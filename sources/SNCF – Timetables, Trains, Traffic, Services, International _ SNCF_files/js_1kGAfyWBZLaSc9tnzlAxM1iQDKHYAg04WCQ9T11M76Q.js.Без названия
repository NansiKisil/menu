/*! jQuery v3.4.1 | (c) JS Foundation and other contributors | jquery.org/license */
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(C,e){"use strict";var t=[],E=C.document,r=Object.getPrototypeOf,s=t.slice,g=t.concat,u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toString,l=a.call(Object),y={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},x=function(e){return null!=e&&e===e.window},c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement("script");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[o.call(e)]||"object":typeof e}var f="3.4.1",k=function(e,t){return new k.fn.init(e,t)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function d(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}k.fn=k.prototype={jquery:f,constructor:k,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(n){return this.pushStack(k.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},k.extend=k.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||m(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(l&&r&&(k.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||k.isPlainObject(n)?n:{},i=!1,a[t]=k.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},k.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=r(e))||"function"==typeof(n=v.call(t,"constructor")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){b(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(d(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(p,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?k.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return g.apply([],a)},guid:1,support:y}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=t[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var h=function(n){var e,d,b,o,i,h,f,g,w,u,l,T,C,a,E,v,s,c,y,k="sizzle"+1*new Date,m=n.document,S=0,r=0,p=ue(),x=ue(),N=ue(),A=ue(),D=function(e,t){return e===t&&(l=!0),0},j={}.hasOwnProperty,t=[],q=t.pop,L=t.push,H=t.push,O=t.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",I="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",W="\\["+M+"*("+I+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+M+"*\\]",$=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",F=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),_=new RegExp("^"+M+"*,"+M+"*"),z=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp(M+"|>"),X=new RegExp($),V=new RegExp("^"+I+"$"),G={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){T()},ae=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{H.apply(t=O.call(m.childNodes),m.childNodes),t[m.childNodes.length].nodeType}catch(e){H={apply:t.length?function(e,t){L.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&((e?e.ownerDocument||e:m)!==C&&T(e),e=e||C,E)){if(11!==p&&(u=Z.exec(t)))if(i=u[1]){if(9===p){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return H.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&d.getElementsByClassName&&e.getElementsByClassName)return H.apply(n,e.getElementsByClassName(i)),n}if(d.qsa&&!A[t+" "]&&(!v||!v.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===p&&U.test(t)){(s=e.getAttribute("id"))?s=s.replace(re,ie):e.setAttribute("id",s=k),o=(l=h(t)).length;while(o--)l[o]="#"+s+" "+xe(l[o]);c=l.join(","),f=ee.test(t)&&ye(e.parentNode)||e}try{return H.apply(n,f.querySelectorAll(c)),n}catch(e){A(t,!0)}finally{s===k&&e.removeAttribute("id")}}}return g(t.replace(B,"$1"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+" ")>b.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function le(e){return e[k]=!0,e}function ce(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split("|"),r=n.length;while(r--)b.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function de(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}for(e in d=se.support={},i=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},T=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:m;return r!==C&&9===r.nodeType&&r.documentElement&&(a=(C=r).documentElement,E=!i(C),m!==C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",oe,!1):n.attachEvent&&n.attachEvent("onunload",oe)),d.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),d.getElementsByTagName=ce(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),d.getElementsByClassName=K.test(C.getElementsByClassName),d.getById=ce(function(e){return a.appendChild(e).id=k,!C.getElementsByName||!C.getElementsByName(k).length}),d.getById?(b.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=d.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):d.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},b.find.CLASS=d.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(d.qsa=K.test(C.querySelectorAll))&&(ce(function(e){a.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+k+"-]").length||v.push("~="),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||v.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(d.matchesSelector=K.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){d.disconnectedMatch=c.call(e,"*"),c.call(e,"[s!='']:x"),s.push("!=",$)}),v=v.length&&new RegExp(v.join("|")),s=s.length&&new RegExp(s.join("|")),t=K.test(a.compareDocumentPosition),y=t||K.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!d.sortDetached&&t.compareDocumentPosition(e)===n?e===C||e.ownerDocument===m&&y(m,e)?-1:t===C||t.ownerDocument===m&&y(m,t)?1:u?P(u,e)-P(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===C?-1:t===C?1:i?-1:o?1:u?P(u,e)-P(u,t):0;if(i===o)return pe(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?pe(a[r],s[r]):a[r]===m?-1:s[r]===m?1:0}),C},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==C&&T(e),d.matchesSelector&&E&&!A[t+" "]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||d.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){A(t,!0)}return 0<se(t,C,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!==C&&T(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==C&&T(e);var n=b.attrHandle[t.toLowerCase()],r=n&&j.call(b.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:d.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!d.detectDuplicates,u=!d.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(b=se.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=p[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&p(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(F," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,v){var y="nth"!==h.slice(0,3),m="last"!==h.slice(-4),x="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?"nextSibling":"previousSibling",c=e.parentNode,f=x&&e.nodeName.toLowerCase(),p=!n&&!x,d=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(x?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l="only"===h&&!u&&"nextSibling"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&p){d=(s=(r=(i=(o=(a=c)[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===S&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if(1===a.nodeType&&++d&&a===e){i[h]=[S,s,d];break}}else if(p&&(d=s=(r=(i=(o=(a=e)[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===S&&r[1]),!1===d)while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if((x?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++d&&(p&&((i=(o=a[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[S,d]),a===e))break;return(d-=v)===g||d%g==0&&0<=d/g}}},PSEUDO:function(e,o){var t,a=b.pseudos[e]||b.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[k]?a(o):1<a.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=P(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace(B,"$1"));return s[k]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return V.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=de(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=he(e);function me(){}function xe(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&"parentNode"===c,p=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[S,p];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[k]||(e[k]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===S&&r[1]===p)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Te(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Ce(d,h,g,v,y,e){return v&&!v[k]&&(v=Ce(v)),y&&!y[k]&&(y=Ce(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),f=!d||!e&&h?c:Te(c,s,d,n,r),p=g?y||(e?d:l||v)?[]:t:f;if(g&&g(f,p,n,r),v){i=Te(p,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(p[u[o]]=!(f[u[o]]=a))}if(e){if(y||d){if(y){i=[],o=p.length;while(o--)(a=p[o])&&i.push(f[o]=a);y(null,p=[],i,r)}o=p.length;while(o--)(a=p[o])&&-1<(i=y?P(e,a):s[o])&&(e[i]=!(t[i]=a))}}else p=Te(p===t?p.splice(l,p.length):p),y?y(null,t,p,r):H.apply(t,p)})}function Ee(e){for(var i,t,n,r=e.length,o=b.relative[e[0].type],a=o||b.relative[" "],s=o?1:0,u=be(function(e){return e===i},a,!0),l=be(function(e){return-1<P(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=b.relative[e[s].type])c=[be(we(c),t)];else{if((t=b.filter[e[s].type].apply(null,e[s].matches))[k]){for(n=++s;n<r;n++)if(b.relative[e[n].type])break;return Ce(1<s&&we(c),1<s&&xe(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(B,"$1"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&xe(e))}c.push(t)}return we(c)}return me.prototype=b.filters=b.pseudos,b.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=x[e+" "];if(l)return t?0:l.slice(0);a=e,s=[],u=b.preFilter;while(a){for(o in n&&!(r=_.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=z.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(B," ")}),a=a.slice(n.length)),b.filter)!(r=G[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):x(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,x,r,i=[],o=[],a=N[e+" "];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[k]?i.push(a):o.push(a);(a=N(e,(v=o,m=0<(y=i).length,x=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l="0",c=e&&[],f=[],p=w,d=e||x&&b.find.TAG("*",i),h=S+=null==p?1:Math.random()||.1,g=d.length;for(i&&(w=t===C||t||i);l!==g&&null!=(o=d[l]);l++){if(x&&o){a=0,t||o.ownerDocument===C||(T(o),n=!E);while(s=v[a++])if(s(o,t||C,n)){r.push(o);break}i&&(S=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=q.call(r));f=Te(f)}H.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(S=h,w=p),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l="function"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&E&&b.relative[o[1].type]){if(!(t=(b.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=G.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],b.relative[s=a.type])break;if((u=b.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&xe(o)))return H.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},d.sortStable=k.split("").sort(D).join("")===k,d.detectDuplicates=!!l,T(),d.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),d.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(C);k.find=h,k.expr=h.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=h.uniqueSort,k.text=h.getText,k.isXMLDoc=h.isXML,k.contains=h.contains,k.escapeSelector=h.escape;var T=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&k(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=k.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,n,r){return m(n)?k.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?k.grep(e,function(e){return e===n!==r}):"string"!=typeof n?k.grep(e,function(e){return-1<i.call(n,e)!==r}):k.filter(n,e,r)}k.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?k.find.matchesSelector(r,e)?[r]:[]:k.find.matches(e,k.grep(t,function(e){return 1===e.nodeType}))},k.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(k(e).filter(function(){for(t=0;t<r;t++)if(k.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)k.find(e,i[t],n);return 1<r?k.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&N.test(e)?k(e):e||[],!1).length}});var q,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:E,!0)),D.test(r[1])&&k.isPlainObject(t))for(r in t)m(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=E.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,q=k(E);var H=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&k(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&k.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?k.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(k(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return"undefined"!=typeof e.contentDocument?e.contentDocument:(A(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},function(r,i){k.fn[r]=function(e,t){var n=k.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=k.filter(t,n)),1<this.length&&(O[r]||k.uniqueSort(n),H.test(r)&&n.reverse()),this.pushStack(n)}});var R=/[^\x20\t\r\n\f]+/g;function M(e){return e}function I(e){throw e}function W(e,t,n,r){var i;try{e&&m(i=e.promise)?i.call(e).done(t).fail(n):e&&m(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},k.each(e.match(R)||[],function(e,t){n[t]=!0}),n):k.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:"")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){k.each(e,function(e,t){m(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return k.each(arguments,function(e,t){var n;while(-1<(n=k.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<k.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t="",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},k.extend({Deferred:function(e){var o=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return k.Deferred(function(r){k.each(o,function(e,t){var n=m(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&m(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,m(t)?s?t.call(e,l(u,o,M,s),l(u,o,I,s)):(u++,t.call(e,l(u,o,M,s),l(u,o,I,s),l(u,o,M,o.notifyWith))):(a!==M&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==I&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(k.Deferred.getStackHook&&(t.stackTrace=k.Deferred.getStackHook()),C.setTimeout(t))}}return k.Deferred(function(e){o[0][3].add(l(0,e,m(r)?r:M,e.notifyWith)),o[1][3].add(l(0,e,m(t)?t:M)),o[2][3].add(l(0,e,m(n)?n:I))}).promise()},promise:function(e){return null!=e?k.extend(e,a):a}},s={};return k.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=k.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(W(e,o.done(a(t)).resolve,o.reject,!n),"pending"===o.state()||m(i[t]&&i[t].then)))return o.then();while(t--)W(i[t],a(t),o.reject);return o.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&$.test(e.name)&&C.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){C.setTimeout(function(){throw e})};var F=k.Deferred();function B(){E.removeEventListener("DOMContentLoaded",B),C.removeEventListener("load",B),k.ready()}k.fn.ready=function(e){return F.then(e)["catch"](function(e){k.readyException(e)}),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0)!==e&&0<--k.readyWait||F.resolveWith(E,[k])}}),k.ready.then=F.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?C.setTimeout(k.ready):(E.addEventListener("DOMContentLoaded",B),C.addEventListener("load",B));var _=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===w(n))for(s in i=!0,n)_(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,m(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(k(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,U=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function V(e){return e.replace(z,"ms-").replace(U,X)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=k.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(R)||[]).length;while(n--)delete r[t[n]]}(void 0===t||k.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var Q=new Y,J=new Y,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function ee(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:K.test(i)?JSON.parse(i):i)}catch(e){}J.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return J.hasData(e)||Q.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),k.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=J.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=V(r.slice(5)),ee(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof n?this.each(function(){J.set(this,n)}):_(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=J.get(o,n))?t:void 0!==(t=ee(o,n))?t:void 0;this.each(function(){J.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){J.remove(this,e)})}}),k.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,k.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),r=n.length,i=n.shift(),o=k._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){k.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:k.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),k.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?k.queue(this[0],t):void 0===n?this:this.each(function(){var e=k.queue(this,t,n);k._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&k.dequeue(this,t)})},dequeue:function(e){return this.each(function(){k.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=k.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=Q.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ne=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],ie=E.documentElement,oe=function(e){return k.contains(e.ownerDocument,e)},ae={composed:!0};ie.getRootNode&&(oe=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===k.css(e,"display")},ue=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};function le(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return k.css(e,t,"")},u=s(),l=n&&n[3]||(k.cssNumber[t]?"":"px"),c=e.nodeType&&(k.cssNumber[t]||"px"!==l&&+u)&&ne.exec(k.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)k.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,k.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ce={};function fe(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(l[c]=Q.get(r,"display")||null,l[c]||(r.style.display="")),""===r.style.display&&se(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=ce[s])||(o=a.body.appendChild(a.createElement(s)),u=k.css(o,"display"),o.parentNode.removeChild(o),"none"===u&&(u="block"),ce[s]=u)))):"none"!==n&&(l[c]="none",Q.set(r,"display",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}k.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?k(this).show():k(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?k.merge([e],n):n}function ye(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var me,xe,be=/<|&#?\w+;/;function we(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===w(o))k.merge(p,o.nodeType?[o]:o);else if(be.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+k.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;k.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&-1<k.inArray(o,r))i&&i.push(o);else if(l=oe(o),a=ve(f.appendChild(o),"script"),l&&ye(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}me=E.createDocumentFragment().appendChild(E.createElement("div")),(xe=E.createElement("input")).setAttribute("type","radio"),xe.setAttribute("checked","checked"),xe.setAttribute("name","t"),me.appendChild(xe),y.checkClone=me.cloneNode(!0).cloneNode(!0).lastChild.checked,me.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!me.cloneNode(!0).lastChild.defaultValue;var Te=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function ke(){return!0}function Se(){return!1}function Ne(e,t){return e===function(){try{return E.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ae(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Se;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return k().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=k.guid++)),e.each(function(){k.event.add(this,t,i,r,n)})}function De(e,i,o){o?(Q.set(e,i,!1),k.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Q.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(k.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Q.set(this,i,r),t=o(this,i),this[i](),r!==(n=Q.get(this,i))||t?Q.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else r.length&&(Q.set(this,i,{value:k.event.trigger(k.extend(r[0],k.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,i)&&k.event.add(e,i,ke)}k.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Q.get(t);if(v){n.handler&&(n=(o=n).handler,i=o.selector),i&&k.find.matchesSelector(ie,i),n.guid||(n.guid=k.guid++),(u=v.events)||(u=v.events={}),(a=v.handle)||(a=v.handle=function(e){return"undefined"!=typeof k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(R)||[""]).length;while(l--)d=g=(s=Ee.exec(e[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=k.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=k.event.special[d]||{},c=k.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&k.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),k.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Q.hasData(e)&&Q.get(e);if(v&&(u=v.events)){l=(t=(t||"").match(R)||[""]).length;while(l--)if(d=g=(s=Ee.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d){f=k.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||k.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)k.event.remove(e,d+t[l],n,r,!0);k.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=k.event.fix(e),u=new Array(arguments.length),l=(Q.get(this,"events")||{})[s.type]||[],c=k.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){a=k.event.handlers.call(this,s,l),t=0;while((i=a[t++])&&!s.isPropagationStopped()){s.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!s.isImmediatePropagationStopped())s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((k.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<k(i,this).index(l):k.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&De(t,"click",ke),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&De(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&Q.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ke:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ke,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ke,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ke,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},function(e,t){k.event.special[e]={setup:function(){return De(this,e,Ne),!1},trigger:function(){return De(this,e),!0},delegateType:t}}),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){k.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||k.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),k.fn.extend({on:function(e,t,n,r){return Ae(this,e,t,n,r)},one:function(e,t,n,r){return Ae(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,k(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each(function(){k.event.remove(this,e,n,t)})}});var je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,qe=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,He=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),a=Q.set(t,o),l=o.events))for(i in delete a.handle,a.events={},l)for(n=0,r=l[i].length;n<r;n++)k.event.add(t,i,l[i][n]);J.hasData(e)&&(s=J.access(e),u=k.extend({},s),J.set(t,u))}}function Ie(n,r,i,o){r=g.apply([],r);var e,t,a,s,u,l,c=0,f=n.length,p=f-1,d=r[0],h=m(d);if(h||1<f&&"string"==typeof d&&!y.checkClone&&Le.test(d))return n.each(function(e){var t=n.eq(e);h&&(r[0]=d.call(this,e,t.html())),Ie(t,r,i,o)});if(f&&(t=(e=we(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=k.map(ve(e,"script"),Pe)).length;c<f;c++)u=e,c!==p&&(u=k.clone(u,!0,!0),s&&k.merge(a,ve(u,"script"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,k.map(a,Re),c=0;c<s;c++)u=a[c],he.test(u.type||"")&&!Q.access(u,"globalEval")&&k.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?k._evalUrl&&!u.noModule&&k._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):b(u.textContent.replace(He,""),u,l))}return n}function We(e,t,n){for(var r,i=t?k.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||k.cleanData(ve(r)),r.parentNode&&(n&&oe(r)&&ye(ve(r,"script")),r.parentNode.removeChild(r));return e}k.extend({htmlPrefilter:function(e){return e.replace(je,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=oe(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(a=ve(c),r=0,i=(o=ve(e)).length;r<i;r++)s=o[r],u=a[r],void 0,"input"===(l=u.nodeName.toLowerCase())&&pe.test(s.type)?u.checked=s.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ve(e),a=a||ve(c),r=0,i=o.length;r<i;r++)Me(o[r],a[r]);else Me(e,c);return 0<(a=ve(c,"script")).length&&ye(a,!f&&ve(e,"script")),c},cleanData:function(e){for(var t,n,r,i=k.event.special,o=0;void 0!==(n=e[o]);o++)if(G(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?k.event.remove(n,r):k.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),k.fn.extend({detach:function(e){return We(this,e,!0)},remove:function(e){return We(this,e)},text:function(e){return _(this,function(e){return void 0===e?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ie(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)})},prepend:function(){return Ie(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return k.clone(this,e,t)})},html:function(e){return _(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!qe.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Ie(this,arguments,function(e){var t=this.parentNode;k.inArray(this,n)<0&&(k.cleanData(ve(this)),t&&t.replaceChild(e,this))},n)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){k.fn[e]=function(e){for(var t,n=[],r=k(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),k(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var $e=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},Be=new RegExp(re.join("|"),"i");function _e(e,t,n){var r,i,o,a,s=e.style;return(n=n||Fe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||oe(e)||(a=k.style(e,t)),!y.pixelBoxStyles()&&$e.test(a)&&Be.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(s).appendChild(u);var e=C.getComputedStyle(u);n="1%"!==e.top,a=12===t(e.marginLeft),u.style.right="60%",o=36===t(e.right),r=36===t(e.width),u.style.position="absolute",i=12===t(u.offsetWidth/3),ie.removeChild(s),u=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s=E.createElement("div"),u=E.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===u.style.backgroundClip,k.extend(y,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),a},scrollboxSize:function(){return e(),i}}))}();var Ue=["Webkit","Moz","ms"],Xe=E.createElement("div").style,Ve={};function Ge(e){var t=k.cssProps[e]||Ve[e];return t||(e in Xe?e:Ve[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;while(n--)if((e=Ue[n]+t)in Xe)return e}(e)||e)}var Ye=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function Ze(e,t,n){var r=ne.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function et(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=k.css(e,n+re[a],!0,i)),r?("content"===n&&(u-=k.css(e,"padding"+re[a],!0,i)),"margin"!==n&&(u-=k.css(e,"border"+re[a]+"Width",!0,i))):(u+=k.css(e,"padding"+re[a],!0,i),"padding"!==n?u+=k.css(e,"border"+re[a]+"Width",!0,i):s+=k.css(e,"border"+re[a]+"Width",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function tt(e,t,n){var r=Fe(e),i=(!y.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,r),o=i,a=_e(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if($e.test(a)){if(!n)return a;a="auto"}return(!y.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===k.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===k.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+et(e,t,n||(i?"border":"content"),o,r,a)+"px"}function nt(e,t,n,r,i){return new nt.prototype.init(e,t,n,r,i)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=_e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=Qe.test(t),l=e.style;if(u||(t=Ge(s)),a=k.cssHooks[t]||k.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"===(o=typeof n)&&(i=ne.exec(n))&&i[1]&&(n=le(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(k.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return Qe.test(t)||(t=Ge(s)),(a=k.cssHooks[t]||k.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=_e(e,t,r)),"normal"===i&&t in Ke&&(i=Ke[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),k.each(["height","width"],function(e,u){k.cssHooks[u]={get:function(e,t,n){if(t)return!Ye.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?tt(e,u,n):ue(e,Je,function(){return tt(e,u,n)})},set:function(e,t,n){var r,i=Fe(e),o=!y.scrollboxSize()&&"absolute"===i.position,a=(o||n)&&"border-box"===k.css(e,"boxSizing",!1,i),s=n?et(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e["offset"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-et(e,u,"border",!1,i)-.5)),s&&(r=ne.exec(t))&&"px"!==(r[3]||"px")&&(e.style[u]=t,t=k.css(e,u)),Ze(0,t,s)}}}),k.cssHooks.marginLeft=ze(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(_e(e,"marginLeft"))||e.getBoundingClientRect().left-ue(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(i,o){k.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+re[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(k.cssHooks[i+o].set=Ze)}),k.fn.extend({css:function(e,t){return _(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Fe(e),i=t.length;a<i;a++)o[t[a]]=k.css(e,t[a],!1,r);return o}return void 0!==n?k.style(e,t,n):k.css(e,t)},e,t,1<arguments.length)}}),((k.Tween=nt).prototype={constructor:nt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(k.cssNumber[n]?"":"px")},cur:function(){var e=nt.propHooks[this.prop];return e&&e.get?e.get(this):nt.propHooks._default.get(this)},run:function(e){var t,n=nt.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):nt.propHooks._default.set(this),this}}).init.prototype=nt.prototype,(nt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[Ge(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=nt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=nt.prototype.init,k.fx.step={};var rt,it,ot,at,st=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function lt(){it&&(!1===E.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(lt):C.setTimeout(lt,k.fx.interval),k.fx.tick())}function ct(){return C.setTimeout(function(){rt=void 0}),rt=Date.now()}function ft(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=re[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function pt(e,t,n){for(var r,i=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function dt(o,e,t){var n,a,r=0,i=dt.prefilters.length,s=k.Deferred().always(function(){delete u.elem}),u=function(){if(a)return!1;for(var e=rt||ct(),t=Math.max(0,l.startTime+l.duration-e),n=1-(t/l.duration||0),r=0,i=l.tweens.length;r<i;r++)l.tweens[r].run(n);return s.notifyWith(o,[l,n,t]),n<1&&i?t:(i||s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l]),!1)},l=s.promise({elem:o,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},t),originalProperties:e,originalOptions:t,startTime:rt||ct(),duration:t.duration,tweens:[],createTween:function(e,t){var n=k.Tween(o,l.opts,e,t,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(n),n},stop:function(e){var t=0,n=e?l.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)l.tweens[t].run(1);return e?(s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l,e])):s.rejectWith(o,[l,e]),this}}),c=l.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=V(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=k.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);r<i;r++)if(n=dt.prefilters[r].call(l,o,c,l.opts))return m(n.stop)&&(k._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return k.map(c,pt,l),m(l.opts.start)&&l.opts.start.call(o,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),k.fx.timer(k.extend(u,{elem:o,anim:l,queue:l.opts.queue})),l}k.Animation=k.extend(dt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ne.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=["*"]):e=e.match(R);for(var n,r=0,i=e.length;r<i;r++)n=e[r],dt.tweeners[n]=dt.tweeners[n]||[],dt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&se(e),v=Q.get(e,"fxshow");for(r in n.queue||(null==(a=k._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,k.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],st.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||k.style(e,r)}if((u=!k.isEmptyObject(t))||!k.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=v&&v.display)&&(l=Q.get(e,"display")),"none"===(c=k.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=k.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===k.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(v?"hidden"in v&&(g=v.hidden):v=Q.access(e,"fxshow",{display:l}),o&&(v.hidden=!g),g&&fe([e],!0),p.done(function(){for(r in g||fe([e]),Q.remove(e,"fxshow"),d)k.style(e,r,d[r])})),u=pt(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),k.speed=function(e,t,n){var r=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return k.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in k.fx.speeds?r.duration=k.fx.speeds[r.duration]:r.duration=k.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&k.dequeue(this,r.queue)},r},k.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var i=k.isEmptyObject(t),o=k.speed(e,n,r),a=function(){var e=dt(this,k.extend({},t),o);(i||Q.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(i,e,o){var a=function(e){var t=e.stop;delete e.stop,t(o)};return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&!1!==i&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=k.timers,r=Q.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&ut.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||k.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=Q.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],i=k.timers,o=n?n.length:0;for(t.finish=!0,k.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),k.each(["toggle","show","hide"],function(e,r){var i=k.fn[r];k.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(ft(r,!0),e,t,n)}}),k.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){k.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),rt=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){it||(it=!0,lt())},k.fx.stop=function(){it=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(r,e){return r=k.fx&&k.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=C.setTimeout(e,r);t.stop=function(){C.clearTimeout(n)}})},ot=E.createElement("input"),at=E.createElement("select").appendChild(E.createElement("option")),ot.type="checkbox",y.checkOn=""!==ot.value,y.optSelected=at.selected,(ot=E.createElement("input")).value="t",ot.type="radio",y.radioValue="t"===ot.value;var ht,gt=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return _(this,k.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){k.removeAttr(this,e)})}}),k.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?k.prop(e,t,n):(1===o&&k.isXMLDoc(e)||(i=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=k.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(R);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(e,t){var a=gt[t]||k.find.attr;gt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=gt[o],gt[o]=r,r=null!=a(e,t,n)?o:null,gt[o]=i),r}});var vt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function mt(e){return(e.match(R)||[]).join(" ")}function xt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}k.fn.extend({prop:function(e,t){return _(this,k.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[k.propFix[e]||e]})}}),k.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&k.isXMLDoc(e)||(t=k.propFix[t]||t,i=k.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),y.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,u=0;if(m(t))return this.each(function(e){k(this).addClass(t.call(this,e,xt(this)))});if((e=bt(t)).length)while(n=this[u++])if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){a=0;while(o=e[a++])r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,u=0;if(m(t))return this.each(function(e){k(this).removeClass(t.call(this,e,xt(this)))});if(!arguments.length)return this.attr("class","");if((e=bt(t)).length)while(n=this[u++])if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){a=0;while(o=e[a++])while(-1<r.indexOf(" "+o+" "))r=r.replace(" "+o+" "," ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(i,t){var o=typeof i,a="string"===o||Array.isArray(i);return"boolean"==typeof t&&a?t?this.addClass(i):this.removeClass(i):m(i)?this.each(function(e){k(this).toggleClass(i.call(this,e,xt(this),t),t)}):this.each(function(){var e,t,n,r;if(a){t=0,n=k(this),r=bt(i);while(e=r[t++])n.hasClass(e)?n.removeClass(e):n.addClass(e)}else void 0!==i&&"boolean"!==o||((e=xt(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===i?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&-1<(" "+mt(xt(n))+" ").indexOf(t))return!0;return!1}});var wt=/\r/g;k.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=m(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,k(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=k.map(t,function(e){return null==e?"":e+""})),(r=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=k.valHooks[t.type]||k.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(wt,""):null==e?"":e:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:mt(k.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=k(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=k.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<k.inArray(k.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<k.inArray(k(e).val(),t)}},y.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in C;var Tt=/^(?:focusinfocus|focusoutblur)$/,Ct=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,p=[n||E],d=v.call(e,"type")?e.type:e,h=v.call(e,"namespace")?e.namespace.split("."):[];if(o=f=a=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!Tt.test(d+k.event.triggered)&&(-1<d.indexOf(".")&&(d=(h=d.split(".")).shift(),h.sort()),u=d.indexOf(":")<0&&"on"+d,(e=e[k.expando]?e:new k.Event(d,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:k.makeArray(t,[e]),c=k.event.special[d]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||d,Tt.test(s+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||E)&&p.push(a.defaultView||a.parentWindow||C)}i=0;while((o=p[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||d,(l=(Q.get(o,"events")||{})[e.type]&&Q.get(o,"handle"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&G(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!G(n)||u&&m(n[d])&&!x(n)&&((a=n[u])&&(n[u]=null),k.event.triggered=d,e.isPropagationStopped()&&f.addEventListener(d,Ct),n[d](),e.isPropagationStopped()&&f.removeEventListener(d,Ct),k.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(r,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each(function(){k.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),y.focusin||k.each({focus:"focusin",blur:"focusout"},function(n,r){var i=function(e){k.event.simulate(r,e.target,k.event.fix(e))};k.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=Q.access(e,r);t||e.addEventListener(n,i,!0),Q.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=Q.access(e,r)-1;t?Q.access(e,r,t):(e.removeEventListener(n,i,!0),Q.remove(e,r))}}});var Et=C.location,kt=Date.now(),St=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var Nt=/\[\]$/,At=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function qt(n,e,r,i){var t;if(Array.isArray(e))k.each(e,function(e,t){r||Nt.test(n)?i(n,t):qt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==w(e))i(n,e);else for(t in e)qt(n+"["+t+"]",e[t],r,i)}k.param=function(e,t){var n,r=[],i=function(e,t){var n=m(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,function(){i(this.name,this.value)});else for(n in e)qt(n,e[n],t,i);return r.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&jt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(e){return{name:t.name,value:e.replace(At,"\r\n")}}):{name:t.name,value:n.replace(At,"\r\n")}}).get()}});var Lt=/%20/g,Ht=/#.*$/,Ot=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:GET|HEAD)$/,Mt=/^\/\//,It={},Wt={},$t="*/".concat("*"),Ft=E.createElement("a");function Bt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(R)||[];if(m(t))while(n=i[r++])"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function _t(t,i,o,a){var s={},u=t===Wt;function l(e){var r;return s[e]=!0,k.each(t[e]||[],function(e,t){var n=t(i,o,a);return"string"!=typeof n||u||s[n]?u?!(r=n):void 0:(i.dataTypes.unshift(n),l(n),!1)}),r}return l(i.dataTypes[0])||!s["*"]&&l("*")}function zt(e,t){var n,r,i=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&k.extend(!0,e,r),e}Ft.href=Et.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,k.ajaxSettings),t):zt(k.ajaxSettings,e)},ajaxPrefilter:Bt(It),ajaxTransport:Bt(Wt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,f,p,n,d,r,h,g,i,o,v=k.ajaxSetup({},t),y=v.context||v,m=v.context&&(y.nodeType||y.jquery)?k(y):k.event,x=k.Deferred(),b=k.Callbacks("once memory"),w=v.statusCode||{},a={},s={},u="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n){n={};while(t=Pt.exec(p))n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2])}t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),l(0,t),this}};if(x.promise(T),v.url=((e||v.url||Et.href)+"").replace(Mt,Et.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(R)||[""],null==v.crossDomain){r=E.createElement("a");try{r.href=v.url,r.href=r.href,v.crossDomain=Ft.protocol+"//"+Ft.host!=r.protocol+"//"+r.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=k.param(v.data,v.traditional)),_t(It,v,t,T),h)return T;for(i in(g=k.event&&v.global)&&0==k.active++&&k.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Rt.test(v.type),f=v.url.replace(Ht,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Lt,"+")):(o=v.url.slice(f.length),v.data&&(v.processData||"string"==typeof v.data)&&(f+=(St.test(f)?"&":"?")+v.data,delete v.data),!1===v.cache&&(f=f.replace(Ot,"$1"),o=(St.test(f)?"&":"?")+"_="+kt+++o),v.url=f+o),v.ifModified&&(k.lastModified[f]&&T.setRequestHeader("If-Modified-Since",k.lastModified[f]),k.etag[f]&&T.setRequestHeader("If-None-Match",k.etag[f])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+$t+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(i,v.headers[i]);if(v.beforeSend&&(!1===v.beforeSend.call(y,T,v)||h))return T.abort();if(u="abort",b.add(v.complete),T.done(v.success),T.fail(v.error),c=_t(Wt,v,t,T)){if(T.readyState=1,g&&m.trigger("ajaxSend",[T,v]),h)return T;v.async&&0<v.timeout&&(d=C.setTimeout(function(){T.abort("timeout")},v.timeout));try{h=!1,c.send(a,l)}catch(e){if(h)throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,r){var i,o,a,s,u,l=t;h||(h=!0,d&&C.clearTimeout(d),c=void 0,p=r||"",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(v,T,n)),s=function(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(v,s,T,i),i?(v.ifModified&&((u=T.getResponseHeader("Last-Modified"))&&(k.lastModified[f]=u),(u=T.getResponseHeader("etag"))&&(k.etag[f]=u)),204===e||"HEAD"===v.type?l="nocontent":304===e?l="notmodified":(l=s.state,o=s.data,i=!(a=s.error))):(a=l,!e&&l||(l="error",e<0&&(e=0))),T.status=e,T.statusText=(t||l)+"",i?x.resolveWith(y,[o,l,T]):x.rejectWith(y,[T,l,a]),T.statusCode(w),w=void 0,g&&m.trigger(i?"ajaxSuccess":"ajaxError",[T,v,i?o:a]),b.fireWith(y,[T,l]),g&&(m.trigger("ajaxComplete",[T,v]),--k.active||k.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],function(e,i){k[i]=function(e,t,n,r){return m(t)&&(r=r||n,n=t,t=void 0),k.ajax(k.extend({url:e,type:i,dataType:r,data:t,success:n},k.isPlainObject(e)&&e))}}),k._evalUrl=function(e,t){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return m(n)?this.each(function(e){k(this).wrapInner(n.call(this,e))}):this.each(function(){var e=k(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=m(t);return this.each(function(e){k(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Xt=k.ajaxSettings.xhr();y.cors=!!Xt&&"withCredentials"in Xt,y.ajax=Xt=!!Xt,k.ajaxTransport(function(i){var o,a;if(y.cors||Xt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(Ut[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&C.setTimeout(function(){o&&a()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),k.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),k.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=k("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),E.head.appendChild(r[0])},abort:function(){i&&i()}}});var Vt,Gt=[],Yt=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||k.expando+"_"+kt++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Yt,"$1"+r):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||k.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=C[r],C[r]=function(){o=arguments},n.always(function(){void 0===i?k(C).removeProp(r):C[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(r)),o&&m(i)&&i(o[0]),o=i=void 0}),"script"}),y.createHTMLDocument=((Vt=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Vt.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,t.head.appendChild(r)):t=E),o=!n&&[],(i=D.exec(e))?[t.createElement(i[1])]:(i=we([e],t,o),o&&o.length&&k(o).remove(),k.merge([],i.childNodes)));var r,i,o},k.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=mt(e.slice(s)),e=e.slice(0,s)),m(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),0<a.length&&k.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?k("<div>").append(k.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){k.fn[t]=function(e){return this.on(t,e)}}),k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(e){return t===e.elem}).length},k.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=k.css(e,"position"),c=k(e),f={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=k.css(e,"top"),u=k.css(e,"left"),("absolute"===l||"fixed"===l)&&-1<(o+u).indexOf("auto")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),m(t)&&(t=t.call(e,n,k.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):c.css(f)}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){k.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===k.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),i.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-k.css(r,"marginTop",!0),left:t.left-i.left-k.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===k.css(e,"position"))e=e.offsetParent;return e||ie})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;k.fn[t]=function(e){return _(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),k.each(["top","left"],function(e,n){k.cssHooks[n]=ze(y.pixelPosition,function(e,t){if(t)return t=_e(e,n),$e.test(t)?k(e).position()[n]+"px":t})}),k.each({Height:"height",Width:"width"},function(a,s){k.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){k.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return _(this,function(e,t,n){var r;return x(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?k.css(e,t,i):k.style(e,t,n,i)},s,n?e:void 0,n)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){k.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),k.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),k.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||k.guid++,i},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=A,k.isFunction=m,k.isWindow=x,k.camelCase=V,k.type=w,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return k});var Qt=C.jQuery,Jt=C.$;return k.noConflict=function(e){return C.$===k&&(C.$=Jt),e&&C.jQuery===k&&(C.jQuery=Qt),k},e||(C.jQuery=C.$=k),k});
;
/*!
 * jQuery Once v2.2.0 - http://github.com/robloach/jquery-once
 * @license MIT, GPL-2.0
 *   http://opensource.org/licenses/MIT
 *   http://opensource.org/licenses/GPL-2.0
 */
(function(e){"use strict";if(typeof exports==="object"){e(require("jquery"))}else if(typeof define==="function"&&define.amd){define(["jquery"],e)}else{e(jQuery)}})(function(e){"use strict";var n=function(e){e=e||"once";if(typeof e!=="string"){throw new TypeError("The jQuery Once id parameter must be a string")}return e};e.fn.once=function(t){var r="jquery-once-"+n(t);return this.filter(function(){return e(this).data(r)!==true}).data(r,true)};e.fn.removeOnce=function(e){return this.findOnce(e).removeData("jquery-once-"+n(e))};e.fn.findOnce=function(t){var r="jquery-once-"+n(t);return this.filter(function(){return e(this).data(r)===true})}});

/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function () {
  var settingsElement = document.querySelector('head > script[type="application/json"][data-drupal-selector="drupal-settings-json"], body > script[type="application/json"][data-drupal-selector="drupal-settings-json"]');

  window.drupalSettings = {};

  if (settingsElement !== null) {
    window.drupalSettings = JSON.parse(settingsElement.textContent);
  }
})();;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

window.Drupal = { behaviors: {}, locale: {} };

(function (Drupal, drupalSettings, drupalTranslations, console, Proxy, Reflect) {
  Drupal.throwError = function (error) {
    setTimeout(function () {
      throw error;
    }, 0);
  };

  Drupal.attachBehaviors = function (context, settings) {
    context = context || document;
    settings = settings || drupalSettings;
    var behaviors = Drupal.behaviors;

    Object.keys(behaviors || {}).forEach(function (i) {
      if (typeof behaviors[i].attach === 'function') {
        try {
          behaviors[i].attach(context, settings);
        } catch (e) {
          Drupal.throwError(e);
        }
      }
    });
  };

  Drupal.detachBehaviors = function (context, settings, trigger) {
    context = context || document;
    settings = settings || drupalSettings;
    trigger = trigger || 'unload';
    var behaviors = Drupal.behaviors;

    Object.keys(behaviors || {}).forEach(function (i) {
      if (typeof behaviors[i].detach === 'function') {
        try {
          behaviors[i].detach(context, settings, trigger);
        } catch (e) {
          Drupal.throwError(e);
        }
      }
    });
  };

  Drupal.checkPlain = function (str) {
    str = str.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
    return str;
  };

  Drupal.formatString = function (str, args) {
    var processedArgs = {};

    Object.keys(args || {}).forEach(function (key) {
      switch (key.charAt(0)) {
        case '@':
          processedArgs[key] = Drupal.checkPlain(args[key]);
          break;

        case '!':
          processedArgs[key] = args[key];
          break;

        default:
          processedArgs[key] = Drupal.theme('placeholder', args[key]);
          break;
      }
    });

    return Drupal.stringReplace(str, processedArgs, null);
  };

  Drupal.stringReplace = function (str, args, keys) {
    if (str.length === 0) {
      return str;
    }

    if (!Array.isArray(keys)) {
      keys = Object.keys(args || {});

      keys.sort(function (a, b) {
        return a.length - b.length;
      });
    }

    if (keys.length === 0) {
      return str;
    }

    var key = keys.pop();
    var fragments = str.split(key);

    if (keys.length) {
      for (var i = 0; i < fragments.length; i++) {
        fragments[i] = Drupal.stringReplace(fragments[i], args, keys.slice(0));
      }
    }

    return fragments.join(args[key]);
  };

  Drupal.t = function (str, args, options) {
    options = options || {};
    options.context = options.context || '';

    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.strings && drupalTranslations.strings[options.context] && drupalTranslations.strings[options.context][str]) {
      str = drupalTranslations.strings[options.context][str];
    }

    if (args) {
      str = Drupal.formatString(str, args);
    }
    return str;
  };

  Drupal.url = function (path) {
    return drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + path;
  };

  Drupal.url.toAbsolute = function (url) {
    var urlParsingNode = document.createElement('a');

    try {
      url = decodeURIComponent(url);
    } catch (e) {}

    urlParsingNode.setAttribute('href', url);

    return urlParsingNode.cloneNode(false).href;
  };

  Drupal.url.isLocal = function (url) {
    var absoluteUrl = Drupal.url.toAbsolute(url);
    var protocol = window.location.protocol;

    if (protocol === 'http:' && absoluteUrl.indexOf('https:') === 0) {
      protocol = 'https:';
    }
    var baseUrl = protocol + '//' + window.location.host + drupalSettings.path.baseUrl.slice(0, -1);

    try {
      absoluteUrl = decodeURIComponent(absoluteUrl);
    } catch (e) {}
    try {
      baseUrl = decodeURIComponent(baseUrl);
    } catch (e) {}

    return absoluteUrl === baseUrl || absoluteUrl.indexOf(baseUrl + '/') === 0;
  };

  Drupal.formatPlural = function (count, singular, plural, args, options) {
    args = args || {};
    args['@count'] = count;

    var pluralDelimiter = drupalSettings.pluralDelimiter;
    var translations = Drupal.t(singular + pluralDelimiter + plural, args, options).split(pluralDelimiter);
    var index = 0;

    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.pluralFormula) {
      index = count in drupalTranslations.pluralFormula ? drupalTranslations.pluralFormula[count] : drupalTranslations.pluralFormula.default;
    } else if (args['@count'] !== 1) {
      index = 1;
    }

    return translations[index];
  };

  Drupal.encodePath = function (item) {
    return window.encodeURIComponent(item).replace(/%2F/g, '/');
  };

  Drupal.deprecationError = function (_ref) {
    var message = _ref.message;

    if (drupalSettings.suppressDeprecationErrors === false && typeof console !== 'undefined' && console.warn) {
      console.warn('[Deprecation] ' + message);
    }
  };

  Drupal.deprecatedProperty = function (_ref2) {
    var target = _ref2.target,
        deprecatedProperty = _ref2.deprecatedProperty,
        message = _ref2.message;

    if (!Proxy || !Reflect) {
      return target;
    }

    return new Proxy(target, {
      get: function get(target, key) {
        for (var _len = arguments.length, rest = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          rest[_key - 2] = arguments[_key];
        }

        if (key === deprecatedProperty) {
          Drupal.deprecationError({ message: message });
        }
        return Reflect.get.apply(Reflect, [target, key].concat(rest));
      }
    });
  };

  Drupal.theme = function (func) {
    if (func in Drupal.theme) {
      var _Drupal$theme;

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return (_Drupal$theme = Drupal.theme)[func].apply(_Drupal$theme, args);
    }
  };

  Drupal.theme.placeholder = function (str) {
    return '<em class="placeholder">' + Drupal.checkPlain(str) + '</em>';
  };
})(Drupal, window.drupalSettings, window.drupalTranslations, window.console, window.Proxy, window.Reflect);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

if (window.jQuery) {
  jQuery.noConflict();
}

document.documentElement.className += ' js';

(function (Drupal, drupalSettings) {
  var domReady = function domReady(callback) {
    if (document.readyState !== 'loading') {
      callback();
    } else {
      var listener = function listener() {
        callback();
        document.removeEventListener('DOMContentLoaded', listener);
      };
      document.addEventListener('DOMContentLoaded', listener);
    }
  };

  domReady(function () {
    Drupal.attachBehaviors(document, drupalSettings);
  });
})(Drupal, window.drupalSettings);;
/**
 * Created by kbriand on 20/06/2018.
 */
(function ($, Drupal, drupalSettings) {

  $(document).ready(function ($) {

    // COM-6681: Cookies banner.
    // If the banner is present.
    if ($('#sliding-popup').length) {

      // Add bottom margin.
      $('#footer').addClass('footer-cookies');

      // Remove bottom margin on banner closing.
      // The banner is automatically removed but it takes ~1s so it is better
      // to hide it in first place.
      $('.cookies-btn-accept, .custom-cookie-link').click(function () {
        $('.cookies').toggleClass('js-hidden');
        $('.footer').removeClass('footer-cookies');
      });
    }
  });

}(jQuery, Drupal, drupalSettings));
;
/**
 * @file
 * Used to diplay and hide parts "Upload document" or "URL"
 * in the blocks "communiqué de presse", "rapports finances", "documents fournisseurs".
 * (@see COM-7173)
 */

(function ($,Drupal, drupalSettings, window) {
  $(document).ready(function () {
    'use strict';

    // Vars to handle fieldset Link and Upload hiding.
    var radioUrlLink = $('input[name=field_document_link_upload_link]:checked');
    var radioUpload = $('#edit-field-document-link-upload-link-upload-document, #edit-field-document-link-upload-link-url');
    var fieldsetLink =  $('#group-doc-link-id');
    var fieldsetUpload =  $('#group-upload-document-id');

    // Vars to handle lang and weight hiding in format "LIEN".
    var selectLinkFormat = $('#edit-field-document-link-format');
    var fieldLinkLang = $('#edit-field-document-link-language-wrapper');
    var fieldLinkWeight = $('#edit-field-document-link-weight-wrapper');
    var fieldLinkWeightUnit = $('#edit-field-document-link-weight-unit-wrapper');

    // "Init" the hidden blocs.
    initiateDisplayStrate (radioUrlLink, fieldsetLink, fieldsetUpload, selectLinkFormat, fieldLinkLang, fieldLinkWeight, fieldLinkWeightUnit);
    // Handle the click to show and hide.
    handleClickStrate (radioUpload, fieldsetLink, fieldsetUpload, selectLinkFormat, fieldLinkLang, fieldLinkWeight, fieldLinkWeightUnit);

    // Instantiate strates for the inline entity.
    var inlineStrate = function (container) {
      var radioUrlLink = container.find('input[data-fieldset=fieldset-block]:checked');
      var radioUrlLinkSelect = container.find('input[data-fieldset=fieldset-block]');
      var fieldsetLink = container.find('.fieldset_link');
      var fieldsetUpload = container.find('.fieldset_upload');
      var selectLinkFormat = container.find('[data-fieldset=field-format]');
      var fieldLinkLang = container.find('[data-fieldset=field-lang]');
      var fieldLinkWeight = container.find('[data-fieldset=field-weight]');
      var fieldLinkWeightUnit = container.find('[data-fieldset=field-weight-unit]');
      // "Init" the hidden blocs.
      initiateDisplayStrate (radioUrlLink, fieldsetLink, fieldsetUpload, selectLinkFormat, fieldLinkLang, fieldLinkWeight, fieldLinkWeightUnit);
      // Handle the click to show and hide.
      handleClickStrate (radioUrlLinkSelect, fieldsetLink, fieldsetUpload, selectLinkFormat, fieldLinkLang, fieldLinkWeight, fieldLinkWeightUnit);
    };
    // Trigger creation of a strate.
    Drupal.behaviors.triggerCreateInline = {
      attach: function() {
        if ($(document).find('[data-fieldset=general_strate_fieldset]').length > 0) {
          $(document).find('[data-fieldset=general_strate_fieldset]').each(function () {
            inlineStrate($(this));
          });
        }
      }
    };
  });

  /**
   * Initiate display of the strate CP, Provider, Finance.
   *
   * @param radioUrlLink
   * @param fieldsetLink
   * @param fieldsetUpload
   * @param selectLinkFormat
   * @param fieldLinkLang
   * @param fieldLinkWeight
   * @param fieldLinkWeightUnit
   */
  function initiateDisplayStrate (radioUrlLink, fieldsetLink, fieldsetUpload, selectLinkFormat, fieldLinkLang, fieldLinkWeight, fieldLinkWeightUnit) {
    if (radioUrlLink.val() === 'url') {
      fieldsetLink.show();
      fieldsetUpload.hide();
    } else {
      fieldsetLink.hide();
      fieldsetUpload.show();
    }
    if (selectLinkFormat.val() === 'LIEN') {
      fieldLinkLang.hide();
      fieldLinkWeight.hide();
      fieldLinkWeightUnit.hide();
    } else {
      fieldLinkLang.show();
      fieldLinkWeight.show();
      fieldLinkWeightUnit.show();
    }
  }

  /**
   * Handle click on radio and format list.
   *
   * @param radioUrlLink
   * @param fieldsetLink
   * @param fieldsetUpload
   * @param selectLinkFormat
   * @param fieldLinkLang
   * @param fieldLinkWeight
   * @param fieldLinkWeightUnit
   */
  function handleClickStrate (radioUrlLink, fieldsetLink, fieldsetUpload, selectLinkFormat, fieldLinkLang, fieldLinkWeight, fieldLinkWeightUnit) {
    // Click on form upload radio button.
    radioUrlLink.on('change', function () {
      if ($(this).val() === 'upload_document') {
        fieldsetLink.hide();
        fieldsetUpload.show();
      } else {
        fieldsetLink.show();
        fieldsetUpload.hide();
      }
    });

    // Handle hidding of fields "langue" and "weight".
    selectLinkFormat.on('change', function () {
      if ($(this).val() === 'LIEN') {
        fieldLinkLang.hide();
        fieldLinkWeight.hide();
        fieldLinkWeightUnit.hide();
      } else {
        fieldLinkLang.show();
        fieldLinkWeight.show();
        fieldLinkWeightUnit.show();
      }
    });
  }

})(jQuery, Drupal, drupalSettings, this);
;
(function ($, Drupal) {
  Drupal.behaviors.animations = {
    attach: function (context, settings) {

      $('video', context).once('animations').each(function () {

        // Pause animated packshots if animations are deactivated.
        if (!areAnimationsEnabled()) {
          pauseVideos();
        }

        // Make sure animations can be paused by clicking on it.
        $(this).on('click', function () {
          if (areAnimationsEnabled()) {
            this.paused ? this.play() : this.pause();
          }
        })

        // Play/pause videos on animations enable/disable.
        $(window).on('snc:animation:activated', resumeVideos);
        $(window).on('snc:animation:deactivated', pauseVideos);

        // Play/pause if video is selected when pressing spacebar.
        $('video').on('keypress', function(e) {
          if (e.which == 32 && areAnimationsEnabled()) {
            $('video').each(function () {
              this.paused ? this.play() : this.pause();
            });
          }
          // Prevent from scrolling.
          e.preventDefault();
        });

      });

      /**
       * Pause all videos.
       */
      function pauseVideos() {
        $('video').each(function () { this.pause(); });
      }

      /**
       * Resume all videos.
       */
      function resumeVideos() {
        $('video').each(function () { this.play(); });
      }

      /**
       * Does the user have animations activated?
       */
      function areAnimationsEnabled() {
        return $('.btn-animations-activated').hasClass('active');
      }

    }
  };
})(jQuery, Drupal);;
/**
 *
 * SNCF Accessibility plugin
 * Load the right stylesheet according to selected contrast
 *
 */

(function ($) {

  $.fn.accessibility = function (options) {
    // Initialize settings (extends default ones).
    var settings = $.extend({
      cookieDomain: 'sncf.com',
      activatedTxt: 'bouton activé',
      defaultTxt: 'Défaut',
      higherTxt: 'Renforcés',
      invertedTxt: 'Inversés',
      leadingTxt: 'Augmenté',
      adaptedTxt: 'Adapté',
      rootPath: 'themes/contrib/sncf_theme',
      hashkey: ''
    }, options || {});

    var cookie = function () {
      /**
       * Read cookie
       *
       * @param name
       * @returns null or cookie value
       */
      this.readCookie = function (name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') c = c.substring(1, c.length);
          if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
      };

      /**
       * Create cookie defined by parameters
       *
       * @param name : cookie name
       * @param value : cookie value
       * @param days : lifetime's cookie
       */
      this.createCookie = function (name, value, days) {
        var expires = "";
        if (days) {
          var datetime = new Date();
          datetime.setTime(datetime.getTime() + ( days * 24 * 60 * 60 * 1000 ));
          expires = "; expires=" + datetime.toGMTString();
        }
        document.cookie = name + "=" + value + expires + "; path=/";
      };

      /**
       * Delete cookie defined by parameters
       *
       * @param name : cookie name
       */
      this.deleteCookie = function (name) {
        document.cookie = name + "=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";
      };
    };

    var stylesheet = function () {

      this.getLeadingValue = function () {
        if (my_cookie.readCookie('accessibility-leading') !== null) {
          return my_cookie.readCookie('accessibility-leading');
        } else {
          return "";
        }
      };

      this.getContrastValue = function () {
        if (my_cookie.readCookie('accessibility') !== null) {
          return my_cookie.readCookie('accessibility');
        } else {
          return "";
        }
      };

      this.getDyslexiaValue = function () {
        if (my_cookie.readCookie('accessibility-dyslexia') !== null) {
          return my_cookie.readCookie('accessibility-dyslexia');
        } else {
          return "";
        }
      };

      /**
       * Call stylesheet define by accessibilityValue
       *
       * @param accessibilityValue : contrast-default, contrast-higher or contrast-inverted
       */
      this.loadStylesheet = function (accessibilityValue, leadingValue, dyslexiaValue) {
        // Default stylesheet value is empty : styleguide.css
        var stylesheet = "";
        var accessibility = "a11y";

        if (accessibilityValue === "contrast-default") {
          accessibilityValue = "";
        }

        if (leadingValue === "leadings-deactivated") {
          leadingValue = "leadings-desactivated";
        } else {
          leadingValue = "";
        }

        if (dyslexiaValue === "dyslexia-default") {
          dyslexiaValue = "";
        }

        if (accessibilityValue !== "" || leadingValue !== "" || dyslexiaValue !== "") {
          stylesheet = "-" + accessibility;

          if (accessibilityValue !== "") {
            stylesheet += "-" + accessibilityValue;
          }

          if (leadingValue !== "") {
            stylesheet += "-" + leadingValue;
          }

          if (dyslexiaValue !== "") {
            stylesheet += "-" + dyslexiaValue;
          }
        }

        $('#accessibility-stylesheet').remove();

        if (stylesheet !== '') {
          $('#default-stylesheet').after(
            $("<link/>", {
              id: "accessibility-stylesheet",
              rel: "stylesheet",
              type: "text/css",
              href: '/' + settings.rootPath + '/dist/build/styleguide' + stylesheet + '.css?v=' + settings.hashkey
            })
          );
        }

        // Verify if user is on portailiv page
        // TODO: drupalSettings.portailiv should be pass as a parameters.
        if (typeof drupalSettings.portailiv !== "undefined"
          && typeof drupalSettings.portailiv.isPortailIv !== "undefined"
          && drupalSettings.portailiv.isPortailIv === true) {
          // Verify if a portailiv stylesheet is already loaded
          if (!$('#accessibility-portail-stylesheet').length) {
            $("<link/>", {
              id: "accessibility-portail-stylesheet",
              rel: "stylesheet",
              type: "text/css",
              href: '/' + settings.rootPath + '/dist/build/portail-iv' + stylesheet + '.css?v=' + settings.hashkey
            }).appendTo("head");
          }
          // Just call the right portailiv stylesheet
          else {
            $('#accessibility-portail-stylesheet').attr('href', '/' + settings.rootPath + '/dist/build/portail-iv' + stylesheet + '.css?v='+ settings.hashkey);
          }
        }
      };

      this.editHTMLLeading = function (buttonElement, accessibilityValue) {
        // Set title value.
        var title_value = settings.defaultTxt;
        if (accessibilityValue == "leadings-deactivated") {
          title_value = settings.leadingTxt;
        }

        // Set active class on clicked button.
        $('button.btn-leadings.active').removeClass('active');
        // Add active class on each clicked button's classes (desktop <> small/tiny).
        // And add a span element to inform the button is activated.
        $('.' + buttonElement.attr('class').split(' ').join('.')).addClass('active')
          .append('<span class="visually-hidden"> (' + settings.activatedTxt + ')</span>');
        // Add title element.
        buttonElement.attr('title', title_value + ' (' + settings.activatedTxt + ')');
      }

      this.editHTMLDyslexia = function (buttonElement, accessibilityValue) {
        // Set title value.
        var title_value = settings.defaultTxt;
        if (accessibilityValue == "dyslexia-adapted") {
          title_value = settings.adaptedTxt;
        }

        // Set active class on clicked button.
        $('button.btn-dyslexia.active').removeClass('active');
        // Add active class on each clicked button's classes (desktop <> small/tiny).
        // And add a span element to inform the button is activated.
        $('.' + buttonElement.attr('class').split(' ').join('.')).addClass('active')
          .append('<span class="visually-hidden"> (' + settings.activatedTxt + ')</span>');
        // Add title element.
        buttonElement.attr('title', title_value + ' (' + settings.activatedTxt + ')');
      }

      /**
       * Add a title and a span element on selected button
       *
       * @param buttonElement : button clicked
       * @param accessibilityValue : contrast-default, contrast-higher or contrast-inverted
       */
      this.editHTMLContrast = function (buttonElement, accessibilityValue) {
        // Set title value.
        var title_value = settings.defaultTxt;
        if (accessibilityValue == "contrast-higher") {
          title_value = settings.higherTxt;
        }
        else if (accessibilityValue == "contrast-inverted") {
          title_value = settings.invertedTxt;
        }
        // Set active class on clicked button.
        $('button.btn-contrast.active').removeClass('active');
        // Add active class on each clicked button's classes (desktop <> small/tiny).
        // And add a span element to inform the button is activated.
        $('.' + buttonElement.attr('class').split(' ').join('.')).addClass('active')
          .append('<span class="visually-hidden"> (' + settings.activatedTxt + ')</span>');
        // Add title element.
        buttonElement.attr('title', title_value + ' (' + settings.activatedTxt + ')');
      }
    };

    var my_cookie = new cookie();
    var my_stylesheet = new stylesheet();

    /**
     *    On loading page :
     *    - read cookie,
     *    - edit HTML,
     *    - and load stylesheet in consequences.
     */
    if (my_cookie.readCookie('accessibility') !== null) {
      var contrast_value = my_cookie.readCookie('accessibility');
    }
    else {
      var contrast_value = 'contrast-default';
    }

    if (my_cookie.readCookie('accessibility-leading') !== null) {
      var leading_value = my_cookie.readCookie('accessibility-leading');
    }
    else {
      var leading_value = 'leadings-activated';
    }

    if (my_cookie.readCookie('accessibility-dyslexia') !== null) {
      var dyslexia_value = my_cookie.readCookie('accessibility-dyslexia');
    }
    else {
      var dyslexia_value = 'dyslexia-default';
    }

    my_stylesheet.editHTMLContrast($('button.btn-' + contrast_value), contrast_value);
    my_stylesheet.editHTMLLeading($('button.btn-' + leading_value), leading_value);
    my_stylesheet.editHTMLDyslexia($('button.btn-' + dyslexia_value), dyslexia_value);

    my_stylesheet.loadStylesheet(contrast_value, leading_value, dyslexia_value);

    var animationState;

    if (my_cookie.readCookie('accessibility-animation') !== 'desactivated') {
      animationState = $('.btn-animations-activated');
      noAnimationState = $('.btn-animations-deactivated');
      $(window).trigger('snc:animation:activated');
    } else {
      animationState = $('.btn-animations-deactivated');
      noAnimationState = $('.btn-animations-activated');
      $(window).trigger('snc:animation:deactivated');
    }

    animationState.addClass('active');
    noAnimationState.removeClass('active');

    if (noAnimationState.find('.visually-hidden')) {
      noAnimationState.remove('.visually-hidden');
    }

    if (!animationState.find('.visually-hidden')) {
      animationState.attr('title', animationState.eq(0).text() + ' (' + settings.activatedTxt + ')');
      animationState.append('<span class="visually-hidden">&nbsp;(' + settings.activatedTxt + ')</span>');
    }

    /**
     *    On each accessibility button click :
     *    - create cookie,
     *    - edit HTML,
     *    - and load stylesheet in consequences.
     */
    $('.block-btn-accessibility .btn-accessibility').on('click', function (event) {
      var divParent = $(this).parent();
      if (divParent.hasClass('block-btn-accessibility-contrasts')) {
        // Contrasts.
        var accessiblity_buttons = {
          'btn-contrast-higher': 'contrast-higher',
          'btn-contrast-inverted': 'contrast-inverted',
          'btn-contrast-default': 'contrast-default'
        };
        var button_clicked = $(this);
        $.each(accessiblity_buttons, function (index, value) {
          // Verify if button isn't already selected and clicked by user.
          if (button_clicked.hasClass(index) && !$('button.btn-contrast.active').hasClass(index)) {
            // Remove span and title on active button.
            $('button.btn-contrast').removeAttr('title');
            $('button.btn-contrast').find('span').remove();
            // Create cookie.
            my_cookie.createCookie('accessibility', value, '180');
            // Edit HTML.
            my_stylesheet.editHTMLContrast(button_clicked, value);
            // And load the right stylesheet.
            my_stylesheet.loadStylesheet(value, my_stylesheet.getLeadingValue(), my_stylesheet.getDyslexiaValue());

            // Handle animation toggle.
            var animationState;
            if (my_cookie.readCookie('accessibility-animation') !== 'desactivated') {
              animationState = $('.btn-animations-activated');
              noAnimationState = $('.btn-animations-deactivated');
              $(window).trigger('snc:animation:activated');
            } else {
              animationState = $('.btn-animations-deactivated');
              noAnimationState = $('.btn-animations-activated');
              $(window).trigger('snc:animation:deactivated');
            }

            animationState.addClass('active');
            noAnimationState.removeClass('active');

            if (noAnimationState.find('.visually-hidden')) {
              noAnimationState.remove('.visually-hidden');
            }

            if (!animationState.find('.visually-hidden')) {
              animationState.attr('title', animationState.eq(0).text() + ' (' + settings.activatedTxt + ')');
              animationState.append('<span class="visually-hidden">&nbsp;(' + settings.activatedTxt + ')</span>');
            }
          }
        });
      } else if (divParent.hasClass('block-btn-accessibility-animation')) {
        // Animation.
        if (!$(this).hasClass('active')) {
          var offToggle;
          var onToggle;
          if ($(this).hasClass('btn-animations-activated')) {
            offToggle = $('.btn-animations-deactivated');
            onToggle = $('.btn-animations-activated');
            //my_cookie.deleteCookie('accessibility-animation');
            my_cookie.createCookie('accessibility-animation', 'activated', '180');
            $(window).trigger('snc:animation:activated');
          } else {
            onToggle = $('.btn-animations-deactivated');
            offToggle = $('.btn-animations-activated');
            my_cookie.createCookie('accessibility-animation', 'desactivated', '180');
            $(window).trigger('snc:animation:deactivated');
          }

          offToggle.removeClass('active');
          offToggle.find('span').remove();
          offToggle.removeAttr('title');
          onToggle.addClass('active');
          onToggle.attr('title', $(this).text() + ' (' + settings.activatedTxt + ')');
          onToggle.append('<span class="visually-hidden">&nbsp;(' + settings.activatedTxt + ')</span>');
        }
      } else if (divParent.hasClass('block-btn-accessibility-leading')) {
        // Leadings.
        var leading_buttons = {
          'btn-leadings-activated': 'leadings-activated',
          'btn-leadings-deactivated': 'leadings-deactivated'
        };

        var button_clicked = $(this);
        $.each(leading_buttons, function (index, value) {
          // Verify if button isn't already selected and clicked by user.
          if (button_clicked.hasClass(index) && !$('button.btn-leadings.active').hasClass(index)) {
            // Remove span and title on active button.
            $('button.btn-leadings').removeAttr('title');
            $('button.btn-leadings').find('span').remove();
            // Create cookie.
            my_cookie.createCookie('accessibility-leading', value, '180');
            // Edit HTML.
            my_stylesheet.editHTMLLeading(button_clicked, value);
            // And load the right stylesheet.
            my_stylesheet.loadStylesheet(my_stylesheet.getContrastValue(), value, my_stylesheet.getDyslexiaValue());

            // Handle animation toggle.
            var animationState;
            if (my_cookie.readCookie('accessibility-animation') !== 'desactivated') {
              animationState = $('.btn-animations-activated');
              noAnimationState = $('.btn-animations-deactivated');
              $(window).trigger('snc:animation:activated');
            } else {
              animationState = $('.btn-animations-deactivated');
              noAnimationState = $('.btn-animations-activated');
              $(window).trigger('snc:animation:deactivated');
            }

            animationState.addClass('active');
            noAnimationState.removeClass('active');

            if (noAnimationState.find('.visually-hidden')) {
              noAnimationState.remove('.visually-hidden');
            }

            if (!animationState.find('.visually-hidden')) {
              animationState.attr('title', animationState.eq(0).text() + ' (' + settings.activatedTxt + ')');
              animationState.append('<span class="visually-hidden">&nbsp;(' + settings.activatedTxt + ')</span>');
            }
          }
        });
      } else if (divParent.hasClass('block-btn-accessibility-dyslexia')) {
        // Dyslexia.
        var dyslexia_buttons = {
          'btn-dyslexia-default': 'dyslexia-default',
          'btn-dyslexia-adapted': 'dyslexia-adapted'
        };

        var button_clicked = $(this);

        function dyslexia_switch() {
          $(window).trigger("resizePageBreadcrumb");
        }

        setTimeout(dyslexia_switch, 1000);

        $.each(dyslexia_buttons, function (index, value) {
          // Verify if button isn't already selected and clicked by user.
          if (button_clicked.hasClass(index) && !$('button.btn-dyslexia.active').hasClass(index)) {
            // Remove span and title on active button.
            $('button.btn-dyslexia').removeAttr('title');
            $('button.btn-dyslexia').find('span').remove();
            // Create cookie.
            my_cookie.createCookie('accessibility-dyslexia', value, '180');
            // Edit HTML.
            my_stylesheet.editHTMLDyslexia(button_clicked, value);
            // And load the right stylesheet.
            my_stylesheet.loadStylesheet(my_stylesheet.getContrastValue(), my_stylesheet.getLeadingValue(), value);

            // Handle animation toggle.
            var animationState;
            if (my_cookie.readCookie('accessibility-animation') !== 'desactivated') {
              animationState = $('.btn-animations-activated');
              noAnimationState = $('.btn-animations-deactivated');
              $(window).trigger('snc:animation:activated');
            } else {
              animationState = $('.btn-animations-deactivated');
              noAnimationState = $('.btn-animations-activated');
              $(window).trigger('snc:animation:deactivated');
            }

            animationState.addClass('active');
            noAnimationState.removeClass('active');

            if (noAnimationState.find('.visually-hidden')) {
              noAnimationState.remove('.visually-hidden');
            }

            if (!animationState.find('.visually-hidden')) {
              animationState.attr('title', animationState.eq(0).text() + ' (' + settings.activatedTxt + ')');
              animationState.append('<span class="visually-hidden">&nbsp;(' + settings.activatedTxt + ')</span>');
            }
          }
        });
      }
    })
  };
}(jQuery));

/**
 * Accessible accordion plugin
 * Required:
 * - jQuery
 */

// data-attr used             value             description
// data-accordion             "strate|sitemap"  top container
// data-multiselectable       "true|false"      can have multiple block contents opened or not
// data-accordion-opened      "true"            to have an accordion opened by default
// data-accordion-btn         ""                button to open / close
// data-accordion-btn-open    ""                to identify 'open' button part
// data-accordion-btn-close   ""                to identify 'close' button part
// data-accordion-content     ""                content of the accordion

var accordion = function ($, container) {
  'use strict';

  var settings = {};

  // change block state
  // if we open a block, and its not multiple selectable, close the other blocks
  function blockSwitch(btn, opened) {
    if ((opened === 'false') && (settings.multiselectable === false)) {
      closeAll();
    }
    // set values, in case they've been badly set in html
    if (opened === 'true') { // we have to close the block
      btn.find('button').attr('aria-expanded', 'false');
      btn.siblings('[data-accordion-content]').addClass('js-hidden');
      btn.find('[data-accordion-btn-open]').removeClass('js-hidden');
      btn.find('[data-accordion-btn-close]').addClass('js-hidden');
    }
    else {  // we have to open the block
      btn.find('button').attr('aria-expanded', 'true');
      btn.siblings('[data-accordion-content]').removeClass('js-hidden');
      btn.find('[data-accordion-btn-open]').addClass('js-hidden');
      btn.find('[data-accordion-btn-close]').removeClass('js-hidden');
    }
  }

  // close all blocks (needed for not multi selectable)
  function closeAll() {
    container.find('[data-accordion-btn]').each(function () {
      blockSwitch($(this), 'true');
    });
  }

  // Click on an accordion button
  function buttonClicked(btnClicked) {
    var opened = btnClicked.find('button').attr('aria-expanded');
    blockSwitch(btnClicked, opened);
  }

  // Initialisations
  // At init, all blocks are closed
  function init() {
    // Get settings from html.
    settings.type = container.data('accordion');
    settings.multiselectable = container.data('multiselectable');

    // Set blocks at open / close state
    $('[data-accordion-opened]').each(function () {
      var toOpen = $(this).data('accordion-opened');
      if (toOpen === true) {
        blockSwitch($(this).find('[data-accordion-btn]'), 'false');
      }
    });

    // Click on a button open / close
    container.find('[data-accordion-btn]').click(function () {
      buttonClicked($(this));
    });
  }

  // exposed functions (public)
  return {
    init: init
  };
};

// attach accordion() on document ready
jQuery(document).ready(function ($) {
  'use strict';
  $('[data-accordion]').each(function () {
    accordion($, $(this)).init();
  });
});

/**
 *
 * SNCF Anchors
 * Manage sidebar anchor navigation.
 * Provide a fix for anchor positioning if target is below header, the later
 * overlap the content and add an offset.
 *
 * Required:
 * - jQuery
 *
 * Anchor navigation usage:
 *  See Styleguide section 1.5.1
 * Anchor position usage:
 *  Add the "js-fix-anchor" class to any link that target anchors placed below
 * header.
 *
 */

(function ($) {
  $(document).ready(function () {

    // Set default axis to 'y'.
    // It will avoid movement on the 'x' axis.
    $.extend($.scrollTo.defaults, {
      axis: 'y',
      duration: 500
    });

    /**
     * COM-5408
     * Get the top margin of the nav list.
     * ( it should be equal to $margin-xl-large or $margin-xl-tiny )
     */
    var topMarginNavList = parseInt($('#nav-article').css('margin-top'));
    var hash = window.location.hash; // Get anchor in url.
    if($(hash).length) {
      var $ancOff = $(hash).offset().top - topMarginNavList;
      var $mainHeader = $('.main-header');
      var mainHeaderBarHeight = $mainHeader.height()
        + getBannersHeight()
        + parseFloat($mainHeader.css("paddingTop"))
        + parseFloat($mainHeader.css("paddingBottom"));

      $ancOff -= mainHeaderBarHeight * 2;
      $('html, body').scrollTo($ancOff + "px", 500);
      //Set focus on the header of the target
      $(hash+" h2:first").attr('tabindex', -1);
      $(hash+" h2:first").focus().addClass('focus-visible').attr('data-focus-visible-added', '');
    }
    // Anchor fix
    // On click go to the anchor
    $('.js-fix-anchor').click(function (e) {

      e.preventDefault();
      var $anchor = $(this).attr('href');
      var $ancOff = $($anchor).offset().top - topMarginNavList;
      var $barHeaderLanguagesAccessibility = $('.bar-header-languages-accessibility');
      var accessibilityBarHeight = $barHeaderLanguagesAccessibility.height()
          + parseFloat($barHeaderLanguagesAccessibility.css("paddingTop"))
          + parseFloat($barHeaderLanguagesAccessibility.css("paddingBottom"));
      var $mainHeader = $('.main-header');
      var mainHeaderBarHeight = $mainHeader.height()
          + getBannersHeight()
          + parseFloat($mainHeader.css("paddingTop"))
          + parseFloat($mainHeader.css("paddingBottom"));

      if (accessibilityBarHeight > $(window).scrollTop()) {
        $ancOff -= mainHeaderBarHeight * 2;
      }
      else {
        $ancOff -= mainHeaderBarHeight;
      }

      $('html, body').scrollTo($ancOff + "px", 500);

      //Set focus on the header of the target
      $($anchor+" h2:first").attr('tabindex', -1);
      $($anchor+" h2:first").focus().addClass('focus-visible').attr('data-focus-visible-added', '');
    });

    //Anchor Navigation
    if ($('.anchors').length) {
      anchor();
    }

    function anchor() {
      var $win = $(window);

      // select all anchors and get the 'href' attributes
      var aChildren = $(".anchors-list li").children(); // find the a children
                                                        // of the list items
      var aArray = []; // create the empty aArray
      for (var i = 0; i < aChildren.length; i++) {
        var aChild = aChildren[i];
        var ahref = $(aChild).attr('href');
        aArray.push(ahref);
      }
      if ($('.top-header').length !== 0 && (($('.container-sub-home').length !== 0) || ($('.node--type-page').length !== 0))) {
        var headerHeight = $('.top-header').height();
      }
      else {
        var headerHeight = $('#header').height();
      }

      var headerHeightAccessibility = $('.bar-header-languages-accessibility').is(':visible') ? $('.bar-header-languages-accessibility').height() : 0;

      $win.on("anchorScroll", function (event) {

        // to fix the anchors div
        if ($('.header-for-sticky').hasClass('snc-header-sticky') && !$('.anchors').hasClass('anchors-fixed')) {
          $('.anchors').addClass('anchors-fixed');

          // Add top on first scroll.
          headerHeight = $('#header').find('.snc-header-sticky').outerHeight() + $('#header').find('.bar-header-languages-accessibility').outerHeight();
          headerHeightAccessibility = $('.bar-header-languages-accessibility').is(':visible') ? $('.bar-header-languages-accessibility').height() : 0;
          if ($('.top-header-sticky').length) {
            var headerStickyHeight = $('.top-header').height() + getBannersHeight();
            headerHeight = $('.top-header').outerHeight();
          } else {
            var headerStickyHeight = $('.snc-header-sticky').height();
          }

          $('.anchors').css('top', headerStickyHeight);
        }
        else if (!$('.header-for-sticky').hasClass('snc-header-sticky') && $('.anchors').hasClass('anchors-fixed')) {
          $('.anchors').removeClass('anchors-fixed');
        }

        // we always remove the class "anchors-list-end" to recalculate the
        // position
        $('.anchors-list').removeClass('anchors-list-end');

        // get position of the anchor
        var windowPos = $(window).scrollTop();
        windowPos += (headerHeight + getBannersHeight()) + topMarginNavList;

        // for all anchors, check if it should be "active"
        for (var i = 0; i < aArray.length; i++) {
          var theId = aArray[i];

          // get position of the div
          var divPos = $(theId).offset().top;
          var divHeight = $(theId).height();

          // The anchor is below the top of the target div and above the bottom
          // of the target div
          if (windowPos >= divPos && windowPos < (divPos + divHeight)) {

            // if the anchor shouldn't be active, add class "active" (if it not
            // presents)
            if (!$(".link-anchor[href='" + theId + "']").hasClass("active")) {
              var span = "<span class='visually-hidden'>(rubrique courante)</span>";
              $(".link-anchor[href='" + theId + "']").addClass("active").append(span);

              // delete all class active
              for (var j = 0; j < aArray.length; j++) {
                if (aArray[j] != theId) {
                  if ($(".link-anchor[href='" + aArray[j] + "']").hasClass("active")) {
                    $(".link-anchor[href='" + aArray[j] + "']").removeClass("active");
                    $(".link-anchor[href='" + aArray[j] + "'] span.visually-hidden").remove();
                  }
                }
              }
            }
          }
        }
        if (aArray[0] !== undefined) {
          var posAnc = $(aArray[0]).offset().top;
          if (windowPos < posAnc) {
            $('.link-anchor.active span.visually-hidden').remove();
            $('.link-anchor.active').removeClass("active");
          }
        }

        // update the behaviour if the anchor is on the top of the content
        var anchorsTop = $('.anchors-list').offset().top;
        var sidebarTop = $('.anchors-container').offset().top;
        if (anchorsTop < sidebarTop) {
          $('.anchors').removeClass('anchors-fixed');
        }

        // update the behaviour if the anchor is on the bottom of the content
        var anchorsBottom = $('.anchors-list').offset().top + $('.anchors-list').height();
        var paragraphsBottom = $('.edito-article').offset().top + $('.edito-article').height();
        if (anchorsBottom > paragraphsBottom) {
          $('.anchors-list').addClass('anchors-list-end');
          $('.anchors').removeClass('anchors-fixed');

          // to align the list to the bottom of the content
          $('.anchors-list li:last-child').css('marginBottom', '0');
        }
      });

      // Update the anchor position if there has been changes in the header.
      // Call when a banner is removed.
      $win.on("updateAnchorScroll", function (event) {

        // to fix the anchors div
        if ($('.header-for-sticky').hasClass('snc-header-sticky') && $('.anchors').hasClass('anchors-fixed')) {
          $('.anchors').addClass('anchors-fixed');

          // Sticky tabs ?
          if ($('.top-header-sticky').length > 0) {
            // Add top on first scroll.
            var tabsStickyHeight = $('.top-header-sticky').outerHeight();

            if ($('.anchors').css("top") !== (tabsStickyHeight + 'px')) {
              // If there is a difference, we update the css.
              $('.anchors').css('top', tabsStickyHeight);
            }
          } else {
            // Add top on first scroll.
            var headerStickyHeight = $('.snc-header-sticky').height();
            if ($('.anchors').css("top") !== (headerStickyHeight + 'px')) {

              // If there is a difference, we update the css.
              $('.anchors').css('top', headerStickyHeight);
            }
          }

        }
      });
    }
  });

  /**
   * Do a sum of every height's elements above the header.
   * Mainly use for abduction banners.
   *
   * @returns {number}
   *    Int who's the result of every height(including padding and border).
   */
  function getBannersHeight() {
    var bannersHeight = 0;
    $("[id*='section-banner-kidnapping-']").each(function () {
      bannersHeight += $(this).outerHeight();
    });
    return bannersHeight;
  }
}(jQuery));

jQuery(document).ready(function ($) {
// Remove margin in culture event without image
  if ($('.block-culture-release').length > 0) {
    $('.search-filter-results-item').each(function () {
      if ($(this).find('.small-article-image').length === 0) {
        $(this).find('.small-article-see-more').find('p').removeClass('block-accordion-btn-title');
        $(this).find('.small-article-see-more').find('p').addClass('block-accordion-btn-title-without-image');
      }
    });
  }
});

/**
 * @file
 *
 * Browser detect
 *
 * TODO:
 *  - File to rename to styleguide_helpers.js.
 *  - Add debounce & throttle function for resize & scroll.
 *  - Add breakpoint detection.
 *
 **/
jQuery(document).ready(function ($) {
  // Detect Safari: cf. https://stackoverflow.com/a/19406472
  var is_safari = !!navigator.userAgent.match(/Version\/[\d\.]+.*Safari/);

  if (is_safari === true) {
    $("body").addClass("safari");
  }
});

/**
 *
 * SNCF Home carousel plugin
 * Add animations on Nicolas Hoffmann's carousel: https://a11y.nicolas-hoffmann.net/carrousel/
 *
 * Required:
 * - jQuery
 * - jquery-accessible-carousel-aria.js
 * - jquery.touchSwipe.min.js
 *
 * Addition:
 * - swipe
 * - autoplay (with play / pause buttons)
 * - background colors contribution
 *
 * Usage:
 *  Call the function on the main carousel div and give an array with background color classes for each
 *  slides and the number of seconds between each animations.
 *  $('.home-carousel').carousel_homepage({
 *    colors : [ "bg-color-class-slide1", "bg-color-class-slide2", ... ],
 *    display_time : 5,
 *    swipe_zone_class: '.carousel'
 *  });
 *
 *
 */

(function ($) {

  $.fn.carousel_homepage = function (options) {

    var
      $container = this,
      $carousel = $container.find('.carousel__container'),
      $slides = $carousel.find('.carousel__content'),
      $reportage_imgs =  $container.find('.home-carousel-photo-reportage-img');

    // Initialize settings (extends default ones).
    var settings = $.extend({
      colors: ["bg-cool-gray"],
      display_time: 5,
      auto_play: true,
      swipe_zone_class: '.carousel'
    }, options);
    // On carousel init:
    $carousel.bind('carousel:initialized', function () {

      // Remove unused and problematic tabindex on slide title
      $container.find('.carousel-title').removeAttr('tabindex');

      // Move bullets into play/pause container.
      $('.home-carousel__button-play-container').append($('.home-carousel ol'));

      // Once carousel is build, slide change could be detected:
      var $bullets = $container.find(".js-carousel__control__list__item a");
      $bullets.bind('click', function (e) {
        // Cleaning initially hidden slide.
        $slides.eq($bullets.index($(this))).removeClass('js-hidden');

        // Reset autoplay
        carousel_autoPlay.reset();

        // Change background color.
        var res = $(e.currentTarget).attr('id').match(/label_id_carousel_content_[0-9]+_([0-9]+)/);
        if (res !== null) {
          var index = res[1] - 1;
          $container.attr('class','home-carousel ' + settings.colors[index]);
          // Reportage images
          $reportage_imgs
            .removeClass('active')
            .filter('.home-carousel-photo-reportage-img-' + index)
            .addClass('active');
        }

      });

      // Initialize play/pause button.
      var
        $nextBtn = $container.find('.js-carousel__button__next button'),
        $prevBtn = $container.find('.js-carousel__button__previous button'),
        nextSlide = function () {
          $nextBtn.click();
        },
        $playPause = $('.home-carousel__button-play-container button');

      //Auto play
      var autoPlay = function (t) {
        var timerObj = setInterval(nextSlide, t);

        this.stop = function () {
          if (timerObj) {
            clearInterval(timerObj);
            timerObj = null;
          }
          return this;
        };

        // start timer using current settings (if it's not already running)
        this.start = function () {
          if (!timerObj) {
            this.stop();
            timerObj = setInterval(nextSlide, t);
          }
          return this;
        };

        // start with new interval, stop current interval
        this.reset = function () {
          if (timerObj) {
            this.stop().start();
          }
          return this;
        }
      };

      var carousel_autoPlay = new autoPlay(settings.display_time * 1000);
      carousel_autoPlay.start();

      $playPause.click(function (e) {
        e.preventDefault();
        $playPause.toggleClass('js-hidden');
        if ($(this).hasClass('btn-carousel-play')) {
          carousel_autoPlay.start();
        } else {
          carousel_autoPlay.stop();
        }
      });

      // Swipe zone
      var $swipe_zone =  $container.find($(settings.swipe_zone_class));
      if ($swipe_zone.length !== 1) {
        $swipe_zone = $container;
      }

      $swipe_zone.swipe({
        //Generic swipe handler for all directions
        swipeLeft: function () {
          $nextBtn.click();
        },
        swipeRight: function () {
          $prevBtn.click();
        }
      });

      //Scroll to top on tab focus
      $($nextBtn, $prevBtn).focus(function () {
        $("html, body").animate({
          scrollTop: 0
        }, 600);
      });

      if (!settings.auto_play) {
        if ($('.btn-carousel-play').hasClass('js-hidden')) {
          $('.home-carousel__button-play-container button:not(.js-hidden)').click();
        }
      }
    });

    //return object for jQuery chaining.
    return this;
  };

  $(window).on("snc:animation:activated", function () {
    if ($('.btn-carousel-pause').hasClass('js-hidden')) {
      $('.home-carousel__button-play-container button:not(.js-hidden)').click();
    }
  });

  $(window).on("snc:animation:deactivated", function () {
    if ($('.btn-carousel-play').hasClass('js-hidden')) {
      $('.home-carousel__button-play-container button:not(.js-hidden)').click();
    }
  });
}(jQuery));

(function ( $ ) {
  $(document).ready(function () {
    $(window).on('load',recalculate);
    $(window).resize(recalculate);
  });
  function recalculate() {
    var listImg = $('.edito-media-anchor-full');
    listImg.each(function() {
      var $this = $(this);
      var height = $this.innerHeight() - ($this.innerHeight() - $this.height()) /2;
      $this.parent().css('height', height);
    });
  }

}( jQuery ));
/**
 *
 * SNCF Encart Coloré plugin
 * Display the text corresponding to the selected option
 *
 * @requires jQuery
 *
 * @example
 *  Call the function on the select-wrapper div and display corresponding html to the selected option.
 *  The result container should have the .result-select class.
 *  $('.select-wrapper').encart_gris({
 *    'option1' : 'txt',
 *    'option2 : 'txt',
 *    ...
 *  });
 *
 * <div class="select-wrapper">
 *   <select>
 *     (...)
 *   </select>
 * </div>
 * <div class="result-select"></div>
 *
 */

(function ($) {
  $.fn.encart_gris = function (options) {

    // Initialize settings (extends default ones).
    var settings = $.extend({}, options);

    //return object for jQuery chaining.
    return this.each(function () {
      var $container = $(this);
      $container.on('change', function () {
        var select = $container.find("select option:selected").text().trim();
        var txt = settings[select]
        $container.next('.result-select').html(txt);
      });
    });
  };
}(jQuery));





/**
 * @file
 * Initialise the styleguide accessibility.
 */

(function ($) {
  $.fn.sncfFilterSearch = function () {

    // Open/ Close on click popin button.
    this.find(".btn-filter-search").unbind('click').click(function (e) {
      var $this = $(this);
      // Close popin.
      if($this.attr("aria-expanded") == 'true') {
        $this.siblings(".filter-search-content").addClass("js-hidden");
        $this.attr("aria-expanded", "false");
      } else if ($this.attr("aria-expanded") == 'false') {
        // Open popin.
        $this.siblings(".filter-search-content").removeClass("js-hidden");
        $this.attr("aria-expanded", "true");

        // Popin position calculation.
        var id_webform = $this.attr("aria-controls");
        var $popin = $('#' + id_webform);
        const position = -10 - $popin[0].offsetHeight;
        $('#' + id_webform).css("top", position);
      }
    });ffdg
    // Close popin.
    this.find(".btn-close-filter-search").click(function () {
      $(".btn-filter-search")
        .attr("aria-expanded", "false")
        .siblings(".filter-search-content")
        .addClass("js-hidden");
    });

    return this;
  };
})(jQuery);

/**
 * @file Header scripts
 */
jQuery(document).ready(function ($) {

  // Show hidden abduction banner.
  showUnclickedBanner();

  // triggers on accessibility buttons
  var accessibilityTriggers = {
    'accessibility': {
      'button': '.btn-accessibility-title',
      'buttonToClose': '.bar-header-languages-accessibility .btn-languages',
      'popinToClose': '.popin-languages .btn-popin-close'
    },
    'languages': {
      'button': '.block-languages .btn-languages',
      'buttonToClose': '.btn-accessibility-title',
      'popinToClose': '.popin-accessibility .btn-popin-close'
    }
  };
  $.each(accessibilityTriggers, function(index, value) {
    $(value.button).on('click keydown', function(event) {
      var buttonClicked, buttonToClose;
      buttonClicked = $(this).find('button');
      if (!buttonClicked.hasClass('is-opened')) {
        buttonToClose =  $(value.buttonToClose).find('button');
        if (buttonToClose.hasClass('is-opened')) {
          if (event.type == 'click') {
            $(value.popinToClose).trigger('click');
          }
          if (event.type == 'keydown' && (event.keyCode == 13 || event.keyCode == 32 )) {
            $(value.popinToClose).trigger('click');
          }
        }
      }
    });
  });

  $('.btn-popin-close').on('click keydown', function (event) {
    var popinId = $(this).attr('id');
    var popinArray = popinId.split("-");
    $button_popin_open = $('#' + popinArray[1]);

    if (event.type == 'click') {
      $button_popin_open.trigger('click');
      return false;
    }
    if (event.type == 'keydown' && (event.keyCode == 13 || event.keyCode == 32 || event.keyCode == 27)) {
      $button_popin_open.trigger('click');
      return false;
    }
  });

  $(window).scroll(function () {
    var top = 30;
    if ($(window).scrollTop() > top) {
      $('.bar-header-languages-accessibility .js-to_expand').addClass('accessibility-scroll');

      if ($('.js-be-sticky').length !== 0) {
        // If subhome, tabs are sticky.
        $('.js-be-sticky').addClass('top-header-sticky');
        updateStickyTabsHeight();
        $('.main-header').hide();
      } else {
        $('#main-content').css({'margin-top':'8rem'});
      }

      $('.header-for-sticky').addClass('snc-header-sticky');
    } else {
      // If not subhome, header is sticky.
      $('.bar-header-languages-accessibility .js-to_expand').removeClass('accessibility-scroll');
      if ($('.js-be-sticky').length !== 0) {
        $('.js-be-sticky').removeClass('top-header-sticky');
        $('.main-header').show();
      }

      $('.header-for-sticky').removeClass('snc-header-sticky');
      $('#main-content').css({'margin-top':'0'});
      $('.top-header-sticky').css({'top': '0'});
    }
    $(window).trigger('anchorScroll');
  });

  // Close accessibility popin on escape.
  $('body').keydown(function(e) {
    if (e.keyCode == 27 && $('.popin-accessibility.js-to_escape').length !== 0) {
      if ($('.popin-accessibility.js-to_escape').css('display') == 'block') {
        var popinId = $('.popin-accessibility.js-to_escape .btn-popin-close').attr('id');
        var popinArray = popinId.split("-");
        $button_popin_open = $('#' + popinArray[1]);

        $button_popin_open.trigger('click');
      }
    }
  });

  /**
   * Handle click on every closed button of abduction banners.
   */
  $("[id*='close-banner-kidnapping-']").click(function(){
    var stringArray = $(this).attr("id").split('-');
    var id = stringArray[stringArray.length - 2];
    $("[id*='section-banner-kidnapping-" + id + "']").remove();
    setCookie('BannerKidnapping' + id, 10);
    // Tell the anchor to update is position.
    $(window).trigger('updateAnchorScroll');
    updateStickyTabsHeight();

    if ($('.block-iframe-full-height').length !== 0) {
      var ht = $('#header').outerHeight();gu
      var dht = $(window).outerHeight();
      $('.block-iframe-full-height').css({'height': dht-ht + 'px'})
    }
  });

  /**
   * Handle click on every closed button of crisis banners.
   */
  $("[id*='close-banner-crisis-']").click(function(){
    var stringArray = $(this).attr('id').split('-');
    var id = stringArray[stringArray.length - 1];
    $('#banner-crisis-' + id).remove();
    updateStickyTabsHeight();

    if ($('.block-iframe-full-height').length !== 0) {
      var ht = $('#header').outerHeight();
      var dht = $(window).outerHeight();
      $('.block-iframe-full-height').css({'height': dht-ht + 'px'})
    }
  });
  /**
   * Handle click on every closed button of information banners.
   */
  $("[id*='close-banner-information-']").click(function(){
    var stringArray = $(this).attr('id').split('-');
    var id = stringArray[stringArray.length - 1];
    $('#banner-information-' + id).remove();
    updateStickyTabsHeight();

    if ($('.block-iframe-full-height').length !== 0) {
      var ht = $('#header').outerHeight();
      var dht = $(window).outerHeight();
      $('.block-iframe-full-height').css({'height': dht-ht + 'px'})
    }
  });
  /**
   * Abduction banners are hidden by default.
   * Each banner who don't have a cookie is set to visible.
   * If there is multiple child from the same abduction content,
   * one will be shown and the others hidden.
   */
  function showUnclickedBanner() {
    var changedChildren = false;
    $("[id*='section-banner-kidnapping-']").each(function () {
      // Get the abduction ID.
      var stringArray = $(this).attr('id').split('-');
      var id = stringArray[stringArray.length - 2];

      var children = $("[id*='section-banner-kidnapping-" + id + "']");
      var childNumber = children.length;
      if (childNumber > 1) {
        if (cookieExist('BannerKidnapping' + id)) {
          // If there is a cookie we remove every child.
          children.each(function () {
            $(this).remove();
          });
        } else {
          // Select the only child who will be shown.
          var selectedChild = Math.floor((Math.random() * childNumber) + 1);
          children.each(function (index) {
            if ((index + 1) !== selectedChild) {
              $(this).remove();
            }
          });
        }
        // Do a recursive call to have an update with the deleted banner.
        showUnclickedBanner();
        // Quit the function to avoid to loop on deleted elements.
        changedChildren = true;
        return false;
      }
    });
    // Only if we're done filtering children.
    if (!changedChildren) {
      // If we're here its mean that we have 1 child from each result.
      var abductionLength = $("[id*='section-banner-kidnapping-']").length;
      if (abductionLength > 1) {
        // Shuffle div only if there is more than 1 result.
        $("[id*='section-banner-kidnapping-']").each(function (index) {
          if (abductionLength !== (index + 1)) {
            var changePlace = Math.floor((Math.random() * 2));
            if (changePlace === 1) {
              // Move the element to the last position.
              $("[id*='section-banner-kidnapping-']").last().after($(this).detach())
            }
          }
        });
      }

      // Show abduction banner if there is no cookie link to it.
      $("[id*='section-banner-kidnapping-']").each(function () {
        // Get the abduction ID.
        var stringArray = $(this).attr('id').split('-');
        var id = stringArray[stringArray.length - 2];
        if (!cookieExist('BannerKidnapping' + id)) {
          $(this).removeClass('js-hidden');
        } else {
          $(this).remove();
        }
      });
    }
  }

  /**
   * Create a cookie with the given values.
   *
   * @param name
   *    The String name for the cookie.
   * @param exMinutes
   *    Int variable for the cookie duration.
   */
  function setCookie(name, exMinutes) {
    var d = new Date();
    d.setTime(d.getTime() + (exMinutes*60*1000));
    var expires = "expires="+ d.toUTCString();
    document.cookie = name + "=1;" + expires + ";path=/";
  }

  /**
   * Tell if the user have a specific cookie.
   *
   * @param name
   *    String for the name of the wanted cookie.
   * @returns {boolean}
   *    True if the cookie exist, false otherwise.
   */
  function cookieExist(name) {
    if (document.cookie.indexOf(name) !== -1) {
      return true;
    } else {
      return false;
    }
  }

  /**
   * Calc height of all banners.
   *
   * @returns {int}
   *    Crisis and kidnapping banners total height.
   */
  function calcBannersHeight() {
    var ht = 0;

    $('.banner-crisis').each(function() {
      ht += $('#' + this.id).outerHeight()
    });

    $('.banner-kidnapping').each(function() {
      ht += $('#' + this.id).outerHeight()
    });

    return ht;
  }

  /**
   * On (newsroom) subhomes, tabs are sticky.
   * Calc banners height to position tabs.
   */
  function updateStickyTabsHeight() {
    if ($('.top-header-sticky').length !== 0) {
      var ht = calcBannersHeight();
      $('.top-header-sticky').css({'top': ht + 'px'});
      ht += $(".js-be-sticky").outerHeight();
      $('#main-content').css({'margin-top': ht + 'px'});
    }
  }
});


(function ($) {
  // Launched on iframe-resize.js.
  $.fn.iframe_resize = function () {
    // Initialize settings (extends default ones).
    var iframe = $(this);
    setHeight(iframe);

    $(window).on("snc:window:resize", function (event) {
      setHeight(iframe);
    });
  };

  $.fn.iframe_full_height = function () {
    setFullHeight();

    $(window).on("snc:window:resize", function (event) {
      setFullHeight();
    });
  }

  function setHeight(iframe) {
    // If there is the height attr, its means that the iframe resizer script is activate.
    if (iframe.find('.block-iframe-content').attr('style') !== undefined &&
        iframe.find('.block-iframe-content').attr('style').indexOf('height') !== -1) {
      iframe.removeAttr('style');
      return;
    }

    var currentFormat = window.getComputedStyle(document.querySelector('body'), ':before').getPropertyValue('content').replace(/\"/g, '');
    var tinyState = 'tiny';
    var smallState = 'small';
    var height = 0;
    // Resize the iframe height according to the current format.
    if (currentFormat === tinyState){
        // Tiny.
        height = iframe.data('height-tiny');
    } else if (currentFormat === smallState){
        // Small.
        height = iframe.data('height-small');
    } else {
        // Desktop.
        height = iframe.data('height-desktop');
    }
    iframe.css('height', height);
  }

  function setFullHeight() {
    var ht = $('#header').outerHeight();
    var dht = $(window).outerHeight();

    console.log(ht);

    $('.block-iframe-full-height').css({'height': dht-ht + 'px'})
  }
}(jQuery));

/**
 *
 * Independent accordion (small and alone accordion)
 *
 */

(function ($) {

  $( document ).ready(function() {

    $('.independent-accordion-btn').click(function(){
      $(this).find('.independent-accordion-btn-text').children('.link-accordion-up, .link-accordion-down').toggleClass('js-hidden');
      $(this).siblings('.independent-accordion-content').toggleClass('js-hidden');
      if ($(this).attr('aria-expanded') === 'false') {
        $(this).attr('aria-expanded', 'true');
      } else {
        $(this).attr('aria-expanded', 'false');
      }
    });
  });

}(jQuery));

/**
 *  Add offset for PageSearchResult when there is a banner
 *  for mobile and tablet
 *
 */


(function ($) {
  $(document).on('click', '#miv-btn-toolbox-modify', function() {
    if($('.toolbox-header').width() <= 980) {
      $('#miv-toolbox-modal').css({'top': $('#header').outerHeight()});
      $('.miv-modal-panel-itinerary-category').removeClass("visually-hidden");
    } else {
      $('#miv-toolbox-modal').css({'top': $('#header').outerHeight() + $('.toolbox-header').outerHeight()});
      $('.miv-modal-panel-itinerary-category').addClass("visually-hidden");
    }
  });
}(jQuery));

/**
 * @file
 * Styleguide header tabs swipe.
 *
 * Usage : $('.page-header-nav').header_tabs_swipe();
 */

(function ($) {
  $.fn.header_tabs_swipe = function (options) {
    var settings = $.extend({}, options || {});

    // Init
    var initSwipe = function ($header) {
      var initPos = 0;
      var $list = $header.find('.js-nav-tabs-list');
      // initPos = $list.scrollLeft();
      $halo_left = $('.js-nav-tabs-halo-left');
      $halo_right = $('.js-nav-tabs-halo-right');

      // Hide scrollbar (could be done with some css).
      $list.css('overflow-x', 'hidden');

      // Halos management
      var display_halos = function (position) {
        //Add left halo of no scroll
        if (position > 0) {
          $halo_left.toggleClass('js-hidden', false);
        }
        else {
          $halo_left.toggleClass('js-hidden', true);
        }
        // Right halo doesn't need to by hidden, since last item has a right
        // padding.

      };
      display_halos(initPos);

      // Manage left-right swipes.
      var swipeStatus = function (event, phase, direction, distance) {
        var position = 0;
        if (phase == "start") {
          initPos = $list.scrollLeft();
          // If we are moving before swipe, and we are going L or R in X mode,
          // or U or D in Y mode then drag.
        }
        else if (phase == "move" && (direction == "left" || direction == "right")) {
          //To avoid left halo on desktop
          var positionAfterScroll = $list.scrollLeft();
          if (direction == "left") {
            position = initPos + distance;
            $list.scrollLeft(position);
          }
          else if (direction == "right") {
            position = initPos - distance;
            $list.scrollLeft(position);
          }
          // Halo display.
          display_halos(positionAfterScroll);
        }
        // On Desktop.
        else {
          var positionAfterScroll = $list.scrollLeft();
          // Halo display.
          display_halos(positionAfterScroll);
        }
      };

      // Listen to swipe events.
      $header.find('.js-nav-tabs-list').swipe({
        triggerOnTouchEnd: true,
        triggerOnTouchLeave: true,
        swipeStatus: swipeStatus,
        allowPageScroll: "vertical",
        threshold: 90
      });


      // ==== Centering tabs ================================================
      function centerItVariableWidth(target) {
        var outer = $('.js-nav-tabs-list');

        if (outer) {
          // container width
          var containerWidth = outer.width();

          // Placeholder to work outer the width of preceding Siblings
          var precedingSiblingsWidth = 0;

          // Array of li elements in the outer div
          var liArray = outer.find('li');

          // Target retrieval
          var tar = (target ? target : $(".js-nav-tabs-item-active"));

          // target width with margin
          var targetOuterWidth = tar.width();

          // Retrieve the position of the target element to move relative to his siblings
          var tarIndex = tar.index();

          // Add up the width of all the elements before our target.
          for (var i = 0; i < tarIndex; i++) {
            precedingSiblingsWidth += $(liArray[i]).outerWidth(true);
          }

          // Centering
          outer.scrollLeft(Math.max(0, precedingSiblingsWidth - (containerWidth - targetOuterWidth) / 2));

          // Displaying halo.
          display_halos(outer.scrollLeft());
        }
      }

      // centering the selected tab
      centerItVariableWidth();

      // on window resize, we recenter the selected tab
      $(window).on('resize', function () {
        centerItVariableWidth();
      });

      // adding onclick event on li only for MIV
      $(".js-nav-tabs-item").on('click', function (e) {
        centerItVariableWidth($(this));
      });
      // ----- END Centering tabs -------------------------------------------

    };

    // Allow jQuery to manage more than one menu.
    return this.each(function () {
      initSwipe($(this));
    });
  }
})(jQuery);

/**
 *
 * SNCF Kidnapping footer positioning control
 * jQuery function that sticky
 *
 * @requires jQuery
 *
 * @example
 *  $(document).ready(function() {
 *    $.kidnapping_footer_fixed();
 *  )};
 *
 */

(function ($) {

  $.kidnapping_footer_fixed = function() {

    var $kidnapping_footer = $('.kidnapping-footer');
    var $header_sticky = $('.header-for-sticky');

    var switch_fixed_state = function(enable) {
      if (enable) {
        if (! $.isScrollToFixed('.kidnapping-footer')) {
          $kidnapping_footer.scrollToFixed({
            bottom: 0,
            limit: function() { return $('#footer').offset().top },
            zIndex: 900000,
            dontSetWidth: true,
            removeOffsets: true
          });
        }
        $header_sticky.addClass('disabled-sticky');
      } else {
        $kidnapping_footer.trigger('detach.ScrollToFixed');
        $header_sticky.removeClass('disabled-sticky');
      }
    };

    // Create a debounce resize event: only triggered at the end of resizing.
    // TODO: To move to a file grouping Styleguide's generic functions.
    // TODO: Add events triggered on breakpoint changes (+ getter).
    var resizeTimer;
    $(window).on('resize', function(e) {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(function() {
        $(window).trigger('snc:resize:debounced');
      }, 250);
    });


    // Enable triggers.
    $(window)
    .on('snc:font:zoom', function (e , state) {
      // Disable sticky state on text zoom, reenable it when normal zoom.
      switch (state) {
        case 'zoomed':
          switch_fixed_state(false);
          break;
        case 'initial':
          switch_fixed_state(true);
          break;
      }
    })
    .on('snc:resize:debounced', function () {
      // Disable sticky state on small and tiny.
      // TODO : resize event should be replace everywhere with debounced or throttle custom event.
      // TODO : this format detection should be convert into an helper function.
      var currentFormat = window.getComputedStyle(document.querySelector('body'), ':before').getPropertyValue('content').replace(/\"/g, '');
      if (currentFormat == 'large' || currentFormat == 'none') {
        switch_fixed_state(true);
      } else {
        switch_fixed_state(false);
      }
    }).trigger('snc:resize:debounced');
  };

}(jQuery));





(function ($) {
  $(document).ready(function ($) {
    // First and last elements.
    var $firstElement;
    var $lastElement;

      // Modals
    var $modalMenu = $('.expand-main-menu');
    var $modalSearch = $('.expand-main-search');
    var $modalFilter = $('.expand-main-filter-search');

    // Buttons
    var $btNavBurger = $('.btn-navigation-menu-burger');
    var $btNavSearch = $('.main-menu-navigation-search-btn');
    var $btNavSearchSmall = $('.main-menu-navigation-search-btn-small');
    var $btFilterSearch = $('.main-menu-filter-search-btn');
    var $btnFilterSearchClose = $('.search-navigation-filter-btn-close');
    var $bt404SearchLikeField = $('.unavailable-redirection-like-field');
    var $bt404SearchButton = $('.unavailable-redirection-search-button');
    var $btModalSearch = $('.expand-main-search-btn-close')

    // navigation
    var menuBreadcrumb = $('#menu-breadcrumb');

    // All modal.
    var modals =  {
      'openedModalName': false,
      'modals': {
        'search': {
          'triggeringElements': [
            $bt404SearchLikeField,
            $bt404SearchButton,
            $btModalSearch,
            $btNavSearch,
            $btNavSearchSmall,
          ],
          'modal': $modalSearch,
        },
        'menu': {
          'triggeringElements': [$btNavBurger],
          'modal': $modalMenu,
        },
        'filter': {
          'triggeringElements': [$btFilterSearch],
          'modal': $modalFilter,
        }
      },
    };

    /**
     * Open or close a modal, given its modal name.
     *
     * @param modalName
     *   The name of the modal.
     */
    function toggleModal(modalName) {
      var triggeringElements = modals['modals'][modalName]['triggeringElements'];
      var $modal = modals['modals'][modalName]['modal'];
      var openedModalName = modals['openedModalName'];
      var action = openedModalName ? (openedModalName === modalName ? 'close' : 'switch') : 'open';
      var modalIsOpening = action !== 'close';

      // Close previous modal if one was opened.
      if (action === 'switch') {
        toggleModal(openedModalName);
      }

      // Every triggering element must know its related modal is opened/closed.
      for (var i=0; i<triggeringElements.length; i++) {
        triggeringElements[i].toggleClass('is-opened');
        triggeringElements[i].attr('aria-expanded', String(modalIsOpening));
      }
      $modal.toggleClass('is-opened');

      // Save the newly opened modal (false if we are closing one).
      modals['openedModalName'] = modalIsOpening ? modalName : false;

      // Update body class.
      $('body').toggleClass('snc-popin-opened');

      // Special behaviors for modals.
      if (modalName === 'search') {
        if (modalIsOpening) {
          menuBreadcrumb.addClass('js-hidden');
        }
        else {
          menuBreadcrumb.removeClass('js-hidden');
        }
      }
      else if (modalName === 'menu') {
        if (modalIsOpening) {
          upateLastFirstElements();
        }
      }
    }

    // Element
    var $accessLngMobile= $('.block-accessibility-languages-mobile');

    /**
     * Update the first and last elements according to breakpoint.
     */
    var upateLastFirstElements = function () {
      // Detect breakpoints.
      // TODO: move to a file grouping Styleguide's generic functions.
      var currentFormat = window.getComputedStyle(document.querySelector('body'), ':before').getPropertyValue('content').replace(/\"/g, '');
      if (currentFormat == 'large' || currentFormat == 'none') {
        $firstElement = $('.btn-accessibility-title button');
        $lastElement = $modalMenu.find('.block-navigation-item-link:last');
      }
      //Mobile
      else {
        $firstElement = $('.navigation-logo-link');
        $lastElement = $accessLngMobile
          .find("button[id*='label_expand']")
          .last();
      }
    };

    // Update elements on menu change.
    $modalMenu.on('snc:nav_menu:updated', function () {
      upateLastFirstElements();
    });

    // Update elements on resizing.
    $(window).on('snc:nav_menu:resize:debounced', function () {
      upateLastFirstElements();
    });

    // On click on burger button to open/close the menu.
    $btNavBurger.on('click', function () {
      $(window).trigger('snc:nav_menu:burger_button:before_toggle');
      toggleModal('menu');
    });

    // On click on burger button to open/close the menu.
    $btNavSearch.on('click', function () {
      toggleModal('search');
    });

    $btModalSearch.on('click', function () {
      toggleModal('search');
    });

    $bt404SearchLikeField.on('click', function () {
      toggleModal('search');
    });

    $bt404SearchButton.on('click', function () {
      toggleModal('search');
    });

    // On click on search button to open/close the search.
    $btNavSearchSmall.on('click', function () {
      toggleModal('search');
    });

    // On click on filter button to open/close the filter menu for small and tiny.
    $btFilterSearch.on('click', function () {
      toggleModal('filter');
      $btnFilterSearchClose.focus();
    });

    // Toggle the overlay.
    $(window).on('snc:nav_menu:toggle_overlay', function () {
      toggleModal('menu');
    });

    // Keyboard events on menu if menu is opened.
    $('#header').on('keydown', function (event) {
      // On Tab
      if (event.keyCode === 9 && ($btNavBurger.hasClass('is-opened'))) {
        // Shit tab on first element.
        if (event.shiftKey && $firstElement.is(':focus')) {
          $lastElement.focus();
          return false;
        }
        // Tab on last element.
        else if (!event.shiftKey && $lastElement.is(':focus')) {
          $firstElement.focus();
          return false;
        }
      }
    });

    // Close Modal Dialog with Escape key if menu is opened
    $('body').on('keyup', function (e) {
      if (e.keyCode === 27) {
        $('.button-header').focus();
        if (modals['openedModalName']) {
          toggleModal(modals['openedModalName']);
        }
      }
    });

    // Create a debounce resize event: only triggered at the end of resizing.
    // TODO: To merge with snc:resize:debounced
    var resizeTimer;
    $(window).on('resize', function() {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(function() {
        $(window).trigger('snc:nav_menu:resize:debounced');
      }, 250);
    });

    // Global variable to open the overlay when there is a path in the url.
    // It's avoid asynchronous script call problem.
    if (typeof(window.overlay_settings) !== 'undefined') {
      if (window.overlay_settings.open && !$('.btn-navigation-menu-burger').hasClass('is-opened')) {
        toggleModal('menu');
        $(window).trigger('snc:menu_breadcrumb:adapt');
      }
    }

    $('#search-navigation-focus-end').on('focus', function() {
      // "last" focus guard got focus: set focus to the first field
      $('#expand-main-search-btn-close').focus();
    });

    $('#search-navigation-focus-start').on('focus', function() {
      // "first" focus guard got focus: set focus to the last field
      $('.search-navigation-item:last').focus();
    });

    $('#search-filter-focus-end').on('focus', function() {
      // "last" focus guard got focus: set focus to the first field
      $btnFilterSearchClose.focus();
    });

    $('#search-filter-focus-start').on('focus', function() {
      // "first" focus guard got focus: set focus to the last field
      $('.search-navigation-filter-reset-btn').focus();
    });

  });
}(jQuery));

/**
 *
 * SNCF Navigation Menu plugin
 * Display menu entry childs
 *
 * Required:
 * - jQuery
 * - modals.js
 *
 * Usage:
 *  Call the function on the menu container.
 *    $('.main-menu-btn-container').navigation_menu({menu: [],whitelist: [],
 * wordings:[]}); with navigation_menu_settings defined by array of menu
 * elements.
 *
 */

(function ($) {

  // Constant to select the wanted breadcrumb.
  var MENU_BREADCRUMB = 0.0000001;
  var CONTENT_BREADCRUMB = 0.0000002;
  // Constant to hide the overlay menu container.
  var HIDE_OVERLAY_MENU_CONTAINER = 0.0000003;

  // Default menu path, it will be used to detect if there is a menu shortcut
  // in the url.
  var menuDefaultHash = 'menu';

  // This variable will save the hash when the overlay is closed.
  // For example it can be a content anchor.
  var menuHashClosedOverlay;

  // Default separator to detect each strate on the menu shortcut.
  var menuSeparator = '+';

  // A key/value array who will save all the sanitized menu name and their
  // corresponding ID.
  var fullMenu = [];

  // A key/value array who will save the hierarchy of the menu navigation.
  // It will be used to allow the user to come back on the previous menu.
  var menuHierarchy = [];

  // The current Drupal menu.
  var currentUserMenu;

  // The current menu hierarchy.
  var levelMenu = 1;

  // True if the font has increased, false otherwise.
  var isAlreadyZoom = false;

  // Translated wordings.
  var defaultBackMenuTitle = '';
  var currentBackMenuTitle = '';
  var titleExternalLink = '';

  var $body = $('body');

  // Launched on navigation.js.
  $.fn.navigation_menu = function (options) {
    // Initialize settings (extends default ones).
    var settings = $.extend({
      // Default settings.
      menu: {},
      whitelist: [],
      defaultBackMenuTitle: '',
      currentBackMenuTitle: '',
      titleExternalLink: '',
    }, options);

    defaultBackMenuTitle = settings.defaultBackMenuTitle;
    currentBackMenuTitle = settings.currentBackMenuTitle;
    titleExternalLink = settings.titleExternalLink;
    var defaultRootMenu = settings.menu;
    // Set currentUserMenu to make it global.
    currentUserMenu = defaultRootMenu;

    // Handle click on the overlay menu item.
    $body.on("click", '#header-overlay-menu .block-navigation-item-button', function () {
      // Load the overlay with the default menu.
      loadMenu(this.dataset.mid, settings.whitelist);
    });

    // Handle click on the back button from the overlay.
    $body.on("click", '#overlay-menu-back', function () {
      // Click on the last button of the breadcrumb.
      $('#menu-breadcrumb').find('.breadcrumb-item-button').last().click();
    });

    // Handle click on buttons in the overlay menu breadcrumb.
    $body.on("click", '#menu-breadcrumb .breadcrumb-item-button', function () {
      var $this = $(this);
      var $menu_breadcrumb = $("#menu-breadcrumb");

      // We get the li position of the clicked menu.
      var position = parseInt($this.parent().index()) + 1;
      // If its a click on the menu button.
      if (position === 1) {
        // Set the current menu information to the default ones.
        currentUserMenu = defaultRootMenu;
        levelMenu = 1;
        // Reset the url hash.
        window.location.hash = menuDefaultHash;

        // Load the default menu.
        loadMenu('', settings.whitelist);

        // Hide the overlay menu container.
        updateOverlayMenuContainer(HIDE_OVERLAY_MENU_CONTAINER);
        openOverlay();

        // Reset the saved hierarchy.
        menuHierarchy = [];
      }
      else {
        var arrayLength = menuHierarchy.length;
        // We removed 2 to match it with the array index.
        var wantedLevelMenu = (position - 2);
        for (var i = 0; i < arrayLength; i++) {
          if (i === wantedLevelMenu) {
            currentUserMenu = menuHierarchy[i];
            levelMenu = i + 1;
          }
          else if (i > wantedLevelMenu) {
            menuHierarchy.splice(i);
            break;
          }
        }
        removeMenuFromUrl(position - 1);
        loadMenu('', settings.whitelist);
      }

      // If there is a title in the button, we move it into the span.
      if ($this.attr('title') !== undefined) {
        $this.find('span').first().attr('title', $this.attr('title'));
        $this.find('span').first().removeAttr('style');
      }
      // We remove the button tag.
      $this.find('span').first().unwrap('button');
      // As we've already removed the button tag of the new current menu
      // element. The first li without a button tag is our new current and the
      // other can be removed.
      var findCurrent = false;
      $menu_breadcrumb.find("li").each(function () {
        $this = $(this);
        if (!findCurrent) {
          if ($this.find("button").length === 0 && $this.attr('id') !== 'ellipsis-item') {
            findCurrent = true;
          }
        }
        else {
          $this.remove();
        }
      });

      // Remove the arrow of the last li if there is one.
      if ($menu_breadcrumb.find("li").last().find('.arrow-breadcrumb').length > 0) {
        $menu_breadcrumb.find("li").last().find('.arrow-breadcrumb').remove();
      }
      hideFirstOnesBreadcrumbElement(MENU_BREADCRUMB);
      adaptBreadcrumb(MENU_BREADCRUMB);

      // Give focus to "Menu".
      $menu_breadcrumb.focus();
      if (position !== 1) {
        // Wait for the breadcrumb to be updated.
        updateOverlayMenuContainer('');
      }
    });

    // Handle click on content menu item.
    $body.on("click", '#page-breadcrumb .breadcrumb-item-button', function (e) {
      var $this = $(this);
      // Load the overlay only if the href is equal to #.
      if ($this.attr("href") === "#") {
        e.preventDefault();
        var menuHash = menuDefaultHash;
        var $clickLink = $this;
        $("#page-breadcrumb").find(".breadcrumb-item-button").each(function () {
          var $this = $(this);
          // Add each element on the url.
          if ($this.attr('title')) {
            menuHash += menuSeparator + sanitizeMenu($this.attr('title'));
          }
          else {
            menuHash += menuSeparator + sanitizeMenu($this.find('span').text());
          }
          if ($clickLink.is($this)) {
            return false;
          }
        });
        // Update the menu based on the menu url shortcut.
        window.location.hash = menuHash;
        updateMenu(settings.whitelist);
      }
    });
    // Handle click on the navigation block menu item.
    $body.on("click", '.block-navigation-item', function (e) {
      var $this = $(this);
      // Load the overlay only if the href is equal to #.
      // Its means that the menu have children and is not a page link.
      if ($this.find("a").attr("href") === "#") {
        e.preventDefault();

        // We remove every breadcrumb element from the overlay except the first
        // one (MENU).
        $("#menu-breadcrumb").find("li").each(function (index) {
          if (index > 0) {
            $(this).remove();
          }
        });

        // Set the current menu information to the default ones.
        currentUserMenu = defaultRootMenu;
        levelMenu = 1;
        // Reset the url hash.
        window.location.hash = menuDefaultHash;
        openOverlay();
        loadMenu($this.find("a").data('mid'), settings.whitelist);
      }
    });

    // Open menu item by uuid.
    $body.on('snc:menu_breadcrumb:open_item', function(event, data) {
      var key;
      key = data.item || '';
      window.location.hash = menuDefaultHash;
      openOverlay();
      loadMenu(key, settings.whitelist);
      return false;
    });

    // Update the menu based on the menu url shortcut.
    updateMenu(settings.whitelist);
  };

  /**
   * Update the overlay with the given menu.
   *
   * @param menuId
   *    The ID of the menu we want to show.
   *    If empty, load the default menu.
   * @param whitelist
   *     The list of url which have to be considered as intern.
   */
  function loadMenu(menuId, whitelist) {
    var currentMenu;
    if (currentUserMenu.hasOwnProperty(menuId)) {
      currentMenu = currentUserMenu[menuId];
    }
    else {
      currentMenu = currentUserMenu;
    }

    //Remove all items in menu.
    $('#header-overlay-menu').find('.block-navigation-item').remove();

    var loopedMenu;
    // We check for children, because if its the default menu, there will be no
    // child.
    if ((currentMenu || {}).hasChild) {
      loopedMenu = currentMenu.child;
    }
    else {
      loopedMenu = currentMenu;
    }

    // For each child, we build an item.
    $.each(loopedMenu, function (index, menu) {
      // Build item menu.
      var menuItem = "<li class='block-navigation-item template'>";

      // If has children or is internal link.
      if ((menu.hasChild && levelMenu < 6) || (!isExternalLink(menu.url, whitelist))) {
        if (menu.hasChild && levelMenu < 6) {
          menuItem += "   <button type='button' data-mid='" + index + "' class='block-navigation-item-link block-navigation-item-button'> ";
        }
        else {
          menuItem += "    <a href=' " + menu.url + "' " + menu.url_target + " class='block-navigation-item-link'> ";
        }

        menuItem += "     <span class='block-navigation-item-icon-container'>" + menu.icone + "</span>";
        menuItem += "     <span class='block-navigation-item-link-text'>";
        menuItem += "       <span class='block-navigation-item-link-title'>" + menu.title + "<span class='snc-icon-arrow' aria-hidden='true'></span></span>";
        menuItem += "       <span class='block-navigation-item-link-description'>" + menu.description + "</span>";
        menuItem += "      </span>";

        if (menu.hasChild && levelMenu < 6) {
          menuItem += "   </button> ";
        }
        else {
          menuItem += "    </a> ";
        }
      }
      else {
        // External link.
        menuItem += "    <a href=' " + menu.url + "' " + menu.url_target + " class='block-navigation-item-link' title='" + menu.title + " - " + titleExternalLink + "' target='_blank'>";
        menuItem += "     <span class='block-navigation-item-icon-container'>" + menu.icone + "</span>";
        menuItem += "     <span class='block-navigation-item-link-text'>";
        menuItem += "       <span class='block-navigation-item-link-title'>" + menu.title + "<span class='snc-icon-external-link' aria-hidden='true'></span></span>";
        menuItem += "       <span class='block-navigation-item-link-description'>" + menu.description + "</span>";
        menuItem += "      </span>";
        menuItem += "    </a> ";
      }

      menuItem += "</li>";
      // Append each child on menu.
      $('#header-overlay-menu.block-navigation-list').append(menuItem);
    });

    if (menuId !== '') {
      // Update the url.
      window.location.hash += menuSeparator + sanitizeMenu(currentMenu.title);
      // We save the new menu top level hierarchy.
      menuHierarchy.push(currentMenu);
      // Update the menu breadcrumb.
      addMenuToBreadcrumb(currentMenu.title, levelMenu + 1);
      hideFirstOnesBreadcrumbElement(MENU_BREADCRUMB);
      adaptBreadcrumb(MENU_BREADCRUMB);

      // Give focus to "Menu".
      $('#menu-breadcrumb').focus();
    }

    // Update the overlay menu container.
    updateOverlayMenuContainer(currentMenu.title);

    // Redefined currentUserMenu with child.
    if ((currentMenu || {}).hasChild) {
      currentUserMenu = currentMenu.child;
      levelMenu++;
    }

    // Trigger overlay content has been updated.
    $('.expand-main-menu').trigger('snc:nav_menu:updated');
    $('.expand-main-search').trigger('snc:nav_menu:updated');
    $('.expand-main-filter-search').trigger('snc:nav_menu:updated');

  }

  /**
   * To check if link is external or not (whitelist included).
   * @param uri
   *    The list to test.
   * @param whitelist
   *    The list of url which have to be considered as intern.
   *
   */
  function isExternalLink(uri, whitelist) {
    var type = true;
    if (typeof uri != 'undefined' && uri) {
      if (uri.indexOf("http") === -1 || uri.indexOf(window.location.origin) !== -1) {
        // This is an internal uri.
        type = false;
      }
      else {
        if (typeof whitelist === 'object' && $.isArray(whitelist)) {
          for (var item in whitelist) {
            if (uri.indexOf(whitelist[item]) !== -1) {
              // This is in whitelist.
              return false;
            }
          }
        }
      }
    }
    return type;
  }

  /**
   * Update the menu based on the path in the url.
   */
  function updateMenu(whitelist) {
    // Look in the url if there the wanted wording.
    if (window.location.hash.indexOf(menuDefaultHash) === 1) {
      var splittedMenu = window.location.hash.substr(1).split(menuSeparator);
      var menuLength = splittedMenu.length;

      // Update the overlay if there is a menu different from the default one.
      if (menuLength > 1) {
        // We save the last correct result from the url.
        // In case the url have been change incorrectly.
        var lastGoodIndex = -1;
        var previousMenu = currentUserMenu;
        // Update the Drupal menu variable to the one given in the url
        $.each(splittedMenu, function (index, value) {
          if (value !== menuDefaultHash) {
            loadMenuReference();
            if (typeof fullMenu[value] !== 'undefined') {
              lastGoodIndex = index;
              // We do not update the Drupal menu for the last child.
              // It will be done on the loadMenu method.
              if (index !== (menuLength - 1)) {
                previousMenu = currentUserMenu;
                // We save the new menu top level hierarchy.
                menuHierarchy.push(currentUserMenu[fullMenu[value]]);
                // Update the menu breadcrumb.
                addMenuToBreadcrumb(currentUserMenu[fullMenu[value]].title, levelMenu + 1);
                currentUserMenu = currentUserMenu[fullMenu[value]].child;
              }
            }
            else {
              // We set back to the previous menu because the last one menu
              // will be set on the loadMenu method.
              currentUserMenu = previousMenu;
              return false;
            }
          }
        });
        // If lastGoodIndex == -1 it's mean there was no good menu shortcut on
        // the url. So we're not updating the menu.
        if (lastGoodIndex !== -1) {
          levelMenu = lastGoodIndex;
          var savedHash = window.location.hash;
          loadMenu(fullMenu[splittedMenu[lastGoodIndex]], whitelist);
          window.location.hash = savedHash;
        }
      }

      // Open the overlay once everything is done.
      openOverlay();
      hideFirstOnesBreadcrumbElement(MENU_BREADCRUMB);
      adaptBreadcrumb(MENU_BREADCRUMB);

      // Global variable to open the overlay when there is a path in the url.
      // It's avoid asynchronous script call problem.
      if (!$('.btn-navigation-menu-burger').hasClass('is-opened')) {
        window.overlay_settings =
          {
            open: true
          };
      }
    }
  }

  /**
   * Create a key/value array based on the current Drupal menu.
   *
   * It create a key/value array :
   *  - Key: The sanitize menu name, it's the same that will be send in the url.
   *  - Value: The ID of the menu who will be used to update the overlay.
   */
  function loadMenuReference() {
    $.each(currentUserMenu, function (index, value) {
      fullMenu[sanitizeMenu(value.title)] = index;
    });
  }

  /**
   * Click on the menu burger to open the overlay
   */
  function openOverlay() {
    // Open the menu burger only if is not open yet.
    if (!$('.btn-navigation-menu-burger').hasClass('is-opened')) {
      $(window).trigger('snc:nav_menu:toggle_overlay');
    }
  }

  /**
   * Change the breadcrumb if its too long
   *
   * @param menuFlag
   *    A constant to indicate on which breadcrumb operate.
   */
  function adaptBreadcrumb(menuFlag) {
    // We do not update the breadcrumb if the text is zoomed.
    if (isAlreadyZoom) {
      return;
    }
    else if (window.getComputedStyle(document.querySelector('body'), ':before').getPropertyValue('content').replace(/\"/g, '') !== 'large') {
      // Or if we're not in a desktop format.
      return;
    }

    var $ulElement;
    if (menuFlag === MENU_BREADCRUMB) {
      // If it's the breadcrumb menu from the overlay.
      $ulElement = $('#menu-breadcrumb').find('.breadcrumb-list');
    }
    else {
      // If it's the breadcrumb menu from the page content.
      $ulElement = $('#page-breadcrumb').find('.breadcrumb-list');
    }

    // Represent the max width of the breadcrumb :
    // Max width of the header minus the other elements who's not in the
    // breadcrumb
    var maxWidthBreadcrumb = $('.main-header .clearfix').width() - sideElementsOverlayHeaderWidth(menuFlag);
    // Remove some width to give some space.
    maxWidthBreadcrumb -= 42;
    // Width counter for all the breadcrumb's items
    var widthBreadcrumb = 0;
    // Will be true if the breadcrumb size is above the max size
    var firstAboveWidth = false;

    addMissingArrow(menuFlag);

    // Look on each breadcrumb's items
    $ulElement.find('li').each(function () {
      var $this = $(this);
      if (menuFlag === CONTENT_BREADCRUMB) {
        // If it's the content page breadcrumb and the 'li' menu has to be
        // shown. Each menu is hidden by default so we remove the class.
        $this.removeClass('js-hidden');
      }

      if ($this.is(":hidden")) {
        return true;
      }

      // Remove all the ellipsis attributes to get a 'clean' breadcrumb.
      if ($this.find('.ellipsis').length !== 0) {
        $this.find('.ellipsis').removeAttr('style');
        $this.find('.ellipsis').removeClass('ellipsis');
        $this.find('[title]').removeAttr("title");
      }

      var width = $(this).width();
      widthBreadcrumb += width;

      // If it's the first element above the max width
      if (!firstAboveWidth) {
        // If it's above the max width, it's mean that one or more breadcrumb's
        // items are on a second line
        if (widthBreadcrumb > maxWidthBreadcrumb) {
          firstAboveWidth = true;

          var newWidth = (width + maxWidthBreadcrumb) - (widthBreadcrumb);
          if ($this.find('.arrow-breadcrumb').length > 0) {
            // Remove the width of the arrow.
            newWidth -= $this.find('.arrow-breadcrumb').outerWidth();
          }

          truncate($this, newWidth);

          // Remove the arrow if there is one.
          if ($this.find('.arrow-breadcrumb').length > 0) {
            $this.find('.arrow-breadcrumb').hide();
          }
        }
      }
      else {
        // If 'firstAboveWidth' is True it's mean there was already an element
        // which exceeded header's width So we hide all the menu items after
        $this.hide();
      }
    });
    if (menuFlag === CONTENT_BREADCRUMB) {
      updateItempropPosition();
    }
  }

  /**
   * Set the position number of each breadcrumb content item, for SIO purpose.
   */
  function updateItempropPosition() {
    var $ulElement = $('#page-breadcrumb').find('.breadcrumb-list');
    var index = 1;
    $ulElement.find('li').each(function () {
      if ($(this).is(":visible") && $(this).attr('id') !== 'ellipsis-item') {
        $(this).find('meta').attr('content', index);
        index++;
      }
    });
  }

  /**
   * Every will only show 3 elements.
   * This function hide first items and add an ellipsis.
   * X Fermer > Menu > N1 > N2 > N3
   * X Fermer > Menu > [ellipsis] > N2 > N3 > N4
   *
   * @param menuFlag
   *    A constant to indicate on which breadcrumb operate.
   */
  function hideFirstOnesBreadcrumbElement(menuFlag) {
    // We do not update the breadcrumb if the text is zoomed.
    if (isAlreadyZoom) {
      return;
    }
    else if (window.getComputedStyle(document.querySelector('body'), ':before').getPropertyValue('content').replace(/\"/g, '') !== 'large') {
      // Or if we're not in a desktop format.
      return;
    }
    var maxLiNumber;
    var $ulElement;

    if (menuFlag === MENU_BREADCRUMB) {
      // If it's the breadcrumb menu from the overlay.
      $ulElement = $('#menu-breadcrumb').find('.breadcrumb-list');
      maxLiNumber = 4;
    }
    else {
      // If it's the breadcrumb menu from the page content.
      $ulElement = $('#page-breadcrumb').find('.breadcrumb-list');
      maxLiNumber = 3;
    }
    // Remove the previous ellipsis.
    $ulElement.find('#ellipsis-item').remove();

    // Only if there is too many breadcrumb item.
    if ($ulElement.find('li').length > maxLiNumber) {
      var elementsToHide = $ulElement.find('li').length - 3;
      // If there isn't an ellipsis item.
      $ulElement.find('li').each(function (index) {
        // The "MENU" item is present on the menu breadcrumb so we skip it.
        if (index === 0 && menuFlag === MENU_BREADCRUMB) {
          return true;
        }
        if (index < elementsToHide) {
          $(this).hide();
        }
        else {
          // Make the element visible.
          $(this).removeAttr('style');
        }
      });
      // If its the last element to hide.
      var ellipsis = '';
      // We add an ellipsis item just after.
      if (menuFlag === MENU_BREADCRUMB) {
        ellipsis += "<li class='breadcrumb-item' id='ellipsis-item'>";
        ellipsis += " <span class='breadcrumb-item-text'>…</span>";
        ellipsis += " <span class='snc-icon-arrow arrow-breadcrumb' aria-hidden='true'></span>";
        ellipsis += "</li>";
        $('#menu-breadcrumb').find('.breadcrumb-list').find('li').eq(0).append(ellipsis);
      }
      else {
        ellipsis += "<li class='breadcrumb-item' id='ellipsis-item'>";
        ellipsis += " <strong class='current-breadcrumb-item breadcrumb-item-text'>…</strong>";
        ellipsis += " <span class='snc-icon-arrow arrow-breadcrumb' aria-hidden='true'></span>";
        ellipsis += "</li>";
        $('#page-breadcrumb').find('.breadcrumb-list').prepend(ellipsis);
      }
    }
    else {
      // Make all elements visible.
      $ulElement.find('li').each(function () {
        $(this).removeAttr('style');
      });
    }
  }

  /**
   * Add the menu html element at the end of the menu breadcrumb.
   *
   * @param title
   *    String value of new menu added.
   * @param currentElement
   *    A boolean to set if its the last breacrumb item.
   *    If true the element will be a text with no link. It will change
   *   previous li to button. Otherwise it will be a button with a link.
   */
  function addMenuToBreadcrumb(title, currentElement) {
    // Will contain the HTML that will be added at the end of the breadcrumb.
    var breadcrumbItem = "<li class='breadcrumb-item'>";
    var $menu_breadcrumb = $("#menu-breadcrumb");

    if (currentElement) {
      // If its the current menu, it will be just a text not clickable.
      breadcrumbItem += "  <span class='breadcrumb-item-text'>" + title + "</span>";

      // Wrap the previous li into a button tag.
      $menu_breadcrumb.find("li").each(function () {
        var $this = $(this);
        if ($this.attr('id') === 'ellipsis-item') {
          // Skip this li if its the ellipsis.
          return true;
        }

        if ($this.find("button").length === 0) {
          $this.find('span').first().wrapAll("<button type='button' class='breadcrumb-item-button'/>");
        }

        // If there is a title in the span, we move it into the button.
        if ($this.find('span').first().attr('title') !== undefined) {
          $this.find("button").attr('title', $this.find('span').first().text());
          $this.find("span").first().removeAttr("title");
        }
      });
    }
    else {
      breadcrumbItem += " <button type='button' class='breadcrumb-item-button'> ";
      breadcrumbItem += "   <span class='breadcrumb-item-text'>" + title + "</span>";
      breadcrumbItem += " </button> ";
    }
    // Add an arrow into the last li element.
    // If it do not have the ellipsis class and if it do not have an arrow
    // already.
    if ($menu_breadcrumb.find("li").last().find(".ellipsis").length === 0 &&
      $menu_breadcrumb.find("li").last().find(".arrow-breadcrumb").length === 0) {
      $menu_breadcrumb.find("li").last().append(" <span class='snc-icon-arrow arrow-breadcrumb' aria-hidden='true'></span>");
    }
    $menu_breadcrumb.find("ul").append(breadcrumbItem);
  }

  /**
   * Removed the unwanted menu on the url hash.
   *
   * @param lastIndex
   *    The last index we want to keep.
   *    Everything after will be removed.
   */
  function removeMenuFromUrl(lastIndex) {
    var splittedMenu = window.location.hash.substr(1).split(menuSeparator);
    var newHash = '';
    $.each(splittedMenu, function (index, value) {
      if (index <= lastIndex) {
        if (index === 0) {
          // If its the first element we don't add a separator.
          newHash += value;
        }
        else {
          newHash += "+" + value;
        }
      }
    });
    window.location.hash = newHash;
  }

  /**
   * Use to show and update the overlay menu container.
   * It also can hide the container with a specific title.
   *
   * @param title
   *    The new string title.
   */
  function updateOverlayMenuContainer(title) {
    if (title === HIDE_OVERLAY_MENU_CONTAINER) {
      // Hide the container.
      $('#overlay-menu-container').addClass('js-hidden');
    }
    else {
      // Show the container and update the title.
      $('#overlay-menu-container').removeClass('js-hidden');
      if (title !== '') {
        $('#overlay-menu-current').text(title);
      }

      // Set the back button span and title
      var $breadcrumbButtons = $('#menu-breadcrumb').find('.breadcrumb-item-button');
      if ($breadcrumbButtons.length > 0) {
        // Get the previous element to add its name on the back button for
        // accessibility purpose.
        var $wantedElement = $breadcrumbButtons.last();
        var $backButton = $('#overlay-menu-back');
        var name = "";
        if ($breadcrumbButtons.length === 1) {
          // If there is only the menu who's clickable.
          name = defaultBackMenuTitle;
        }
        else {
          name = $wantedElement.find('.breadcrumb-item-text').text();
          // Just in case we remove " and '.
          name = name.replace(/["']/g, '');
          name = currentBackMenuTitle.replace("%menu", name);
        }
        $backButton.attr('title', name);
        $backButton.find('span').last().text(name);

        // If the back button is visible we give it the focus.
        // It isn't visible on desktop screen format.
        if ($backButton.is(":visible")) {
          $backButton.focus();
        }
      }
    }
  }

  /**
   * Add the needed CSS properties to truncate an element.
   *
   * @param $element
   *    The 'li' DOM element who will be truncate.
   * @param width
   *    The fixed width of the element.
   */
  function truncate($element, width) {
    var $textElement = $element.find('.breadcrumb-item-text');
    var $breadcrumb_item_button = $element.find('.breadcrumb-item-button');
    if ($breadcrumb_item_button.length > 0) {
      // If it have a button we set the title on the button.
      $breadcrumb_item_button.attr('title', $textElement.text());
    }
    else {
      // Otherwise it's on the span text.
      $textElement.attr('title', $textElement.text());
    }
    $textElement.addClass('ellipsis');
    $textElement.css("width", width + "px");
  }

  /**
   * Add up width of the overlay header's elements who's not in the breadcrumb
   * @returns {*} Width sum
   */
  function sideElementsOverlayHeaderWidth(menuFlag) {
    // Logo.
    var sideElementsWidth = $('.navigation-logo-link').outerWidth();

    if (menuFlag === MENU_BREADCRUMB) {
      // If it's the breadcrumb menu from the overlay.
      // Close button.
      sideElementsWidth += $('.main-menu-container').outerWidth();
      // First arrow (before Menu).
      sideElementsWidth += $('#menu-breadcrumb').find('.snc-icon-arrow').first().outerWidth();
    }
    else {
      // If it's the breadcrumb menu from the page content.
      // Hamburger menu.
      sideElementsWidth += $('#main-navigation').outerWidth();
      // Get the first arrow.
      var $page_breadcrumb = $('#page-breadcrumb');
      if ($page_breadcrumb.find('.arrow-breadcrumb').length > 0) {
        sideElementsWidth += $page_breadcrumb.find('.arrow-breadcrumb').first().outerWidth();
      }
    }
    // Search magnifying glass icon
    sideElementsWidth += $('#search-navigation').outerWidth();

    return sideElementsWidth;
  }

  /**
   * With the ellipsis process some arrows are removed.
   * So when the breadcrumb is updated we need to add back these.
   *
   * @param menuFlag
   *    A constant to indicate on which breadcrumb operate.
   */
  function addMissingArrow(menuFlag) {
    var $ulElement;
    if (menuFlag === MENU_BREADCRUMB) {
      // If it's the breadcrumb menu from the overlay.
      $ulElement = $('#menu-breadcrumb').find('.breadcrumb-list');
    }
    else {
      // If it's the breadcrumb menu from the page content.
      $ulElement = $('#page-breadcrumb').find('.breadcrumb-list');
    }
    var length = $ulElement.find('li').length;
    $ulElement.find('li').each(function (index) {
      var $this = $(this);
      // Add an arrow if its not present.
      if (index !== (length - 1) && $this.find('.arrow-breadcrumb').length === 0) {
        $this.append("<span class='snc-icon-arrow arrow-breadcrumb' aria-hidden='true'></span>");
      }
    });
  }

  /**
   * Clean the menu name.
   *
   * @param name
   *    String value to format.
   * @returns {*}
   */
  function sanitizeMenu(name) {
    var defaultSeparator = '-';
    var sanitizedName = (name ? name.toLowerCase() : '');

    var unwantedWords = [
      "la",
      "les",
      "le",
      "du",
      "en",
      "des",
      "de",
      "et"
    ];
    // Check for the first word.
    if ($.inArray(sanitizedName.split(' ')[0], unwantedWords) !== -1) {
      sanitizedName = sanitizedName.substring(sanitizedName.split(' ')[0].length);
    }

    sanitizedName = sanitizedName.replace(/ /g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/d'|t'|m'|n'|l'|qu'/g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/["']/g, '');
    sanitizedName = sanitizedName.replace(/&quot;/g, '');
    sanitizedName = sanitizedName.replace(/-la-/g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/-les-/g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/-le-/g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/-du-/g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/-en-/g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/-des-/g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/-de-/g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/-et-/g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/[&/\]\[()#=_~]/g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/[@+|°*:!?,;.§'<>%€$\\]/g, '');
    sanitizedName = sanitizedName.replace(/[ÀÁÂÃÄÅ]/g, 'A');
    sanitizedName = sanitizedName.replace(/[àáâãäå]/g, 'a');
    sanitizedName = sanitizedName.replace(/[ÈÉÊË]/g, 'E');
    sanitizedName = sanitizedName.replace(/[èéêë]/g, 'e');
    sanitizedName = sanitizedName.replace(/[ç]/g, 'c');
    sanitizedName = sanitizedName.replace(/[Ç]/g, 'C');
    sanitizedName = sanitizedName.replace(/[ùûü]/g, 'u');
    sanitizedName = sanitizedName.replace(/[ÙÛÜ]/g, 'U');
    sanitizedName = sanitizedName.replace(/[öô]/g, 'o');
    sanitizedName = sanitizedName.replace(/[ÖÔ]/g, 'O');
    sanitizedName = sanitizedName.replace(/[îï]/g, 'i');
    sanitizedName = sanitizedName.replace(/[ÎÏ]/g, 'I');

    sanitizedName = sanitizedName.replace(/---/g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/--/g, defaultSeparator);
    sanitizedName = sanitizedName.replace(/--/g, defaultSeparator);

    // We remove every '-' at the beginning of the String.
    while (sanitizedName.charAt(0) === '-') {
      sanitizedName = sanitizedName.replace('-', '');
    }
    // We remove every '-' at the end of the String.
    while (sanitizedName.slice(-1) === '-') {
      sanitizedName = sanitizedName.replace(/.$/, '');
    }
    return sanitizedName;
  }

  // Init : Waiting for DOM to be loaded;
  $(window).ready(function () {
    $(window).on("snc:nav_menu:update_menu", function () {
      updateMenu();
    });
    // Each time the user resize the window we adapt the beadcrumb.
    // Only if the font size has not been change.
    $(window).resize(function () {
      $(window).trigger('snc:window:resize');
      if (!isAlreadyZoom) {
        hideFirstOnesBreadcrumbElement(MENU_BREADCRUMB);
        hideFirstOnesBreadcrumbElement(CONTENT_BREADCRUMB);
        adaptBreadcrumb(MENU_BREADCRUMB);
        adaptBreadcrumb(CONTENT_BREADCRUMB);
      }
    });


    // On click on burger button to open / close the menu.
    $(window).on('snc:nav_menu:burger_button:before_toggle', function () {
      if ($('.btn-navigation-menu-burger').hasClass('is-opened')) {
        // Reset the overlay menu.
        var $menu_breadcrumb = $('#menu-breadcrumb');
        if ($menu_breadcrumb.find('.breadcrumb-item-button').length > 0) {
          $menu_breadcrumb.find('.breadcrumb-item-button').first().click();
        }
        // When the overlay is closed.
        if (menuHashClosedOverlay !== '' && menuHashClosedOverlay !== undefined) {
          // Update the url with the hash saved.
          window.location.hash = menuHashClosedOverlay;
          menuHashClosedOverlay = '';
        }
        else {
          // Remove the menu path in the url.
          history.pushState('', document.title, window.location.pathname + window.location.search);
        }
      }
      else {
        // When the overlay is opened.
        // Check if there was already a hash.
        if (window.location.hash !== '' &&
          window.location.hash.indexOf(menuDefaultHash) !== 1 &&
          window.location.hash.indexOf(menuSeparator) !== 5) {
          // If there is a hash not related to the menu breadcrumb(like a
          // content anchor).
          menuHashClosedOverlay = window.location.hash.substr(1);
          // Update the url with the menu path.
          window.location.hash = menuDefaultHash;
        }
        else if (window.location.hash !== '' &&
          window.location.hash.indexOf(menuDefaultHash) === 1 &&
          window.location.hash.indexOf(menuSeparator) === 5) {
          // If there is a hash related to the menu breadcrumb.
          // Do nothing.
        }
        else {
          // Update the url with the menu path.
          window.location.hash = menuDefaultHash;
        }
      }
    });

    // Set the call to allow other script to resize the content breadcrumb
    // (call it on page load).
    $(window).on("resizePageBreadcrumb", function () {
      hideFirstOnesBreadcrumbElement(CONTENT_BREADCRUMB);
      adaptBreadcrumb(CONTENT_BREADCRUMB);
    }).trigger("resizePageBreadcrumb");

    // Set the call to allow other script to resize the menu breadcrumb.
    $(window).on("snc:menu_breadcrumb:adapt", function () {
      adaptBreadcrumb(MENU_BREADCRUMB);
    });

    $(window).on("snc:font:zoom", function (event, zoomLevel) {
      if ((zoomLevel === 'zoomed') && !isAlreadyZoom) {
        var $menu_breadcrumb = $("#menu-breadcrumb");
        // If the user has increased the font size for accessibility purpose.
        addMissingArrow(CONTENT_BREADCRUMB);
        addMissingArrow(MENU_BREADCRUMB);
        // Remove the ellipsis item.
        $menu_breadcrumb.find('#ellipsis-item').remove();
        // Menu breadcrumb from the overlay.
        // We remove every title, width and ellipsis class.
        $menu_breadcrumb.find("li").each(function () {
          var $this = $(this);
          if ($this.find('button').length > 0) {
            $this.find('button').removeAttr('title');
          }
          $this.find('span').first().removeAttr('title').removeAttr('style').removeClass('ellipsis');
          // Make the element visible.
          if ($this.is(':hidden')) {
            $this.removeAttr('style');
          }
          // Show arrow.
          if ($this.find('.arrow-breadcrumb').length > 0) {
            $this.find('.arrow-breadcrumb').removeAttr('style');
          }
        });

        // Remove the ellipsis item.
        $menu_breadcrumb.find('#ellipsis-item').remove();
        // Page breadcrumb from the content.
        $menu_breadcrumb.find("li").each(function () {
          var $this = $(this);
          if ($this.find('a').length > 0) {
            $this.find('a').removeAttr('title');
            $this.find('span').first().removeAttr('title').removeAttr('style').removeClass('ellipsis');
          }
          else {
            $this.find('strong').first().removeAttr('title').removeAttr('style').removeClass('ellipsis');
          }
          // Make the element visible.
          if ($this.is(':hidden')) {
            $this.removeAttr('style');
          }
          // Show arrow.
          if ($this.find('.arrow-breadcrumb').length > 0) {
            $this.find('.arrow-breadcrumb').removeAttr('style');
          }
        });
        isAlreadyZoom = true;
      }
      else if ((zoomLevel !== 'zoomed') && isAlreadyZoom) {
        // If the user changed back to the normal font size.
        isAlreadyZoom = false;
        hideFirstOnesBreadcrumbElement(MENU_BREADCRUMB);
        hideFirstOnesBreadcrumbElement(CONTENT_BREADCRUMB);
        adaptBreadcrumb(MENU_BREADCRUMB);
        adaptBreadcrumb(CONTENT_BREADCRUMB);
      }
    });

    // Resize the breadcrumb of the page.
    hideFirstOnesBreadcrumbElement(CONTENT_BREADCRUMB);
    adaptBreadcrumb(CONTENT_BREADCRUMB);
  });
}(jQuery));

/**
 *
 * SNCF Select wrapper
 * add class on "select wrapper" to change arrow direction on click
 * Reworked this file to handle HTML loaded by ajax (COM-7702).
 *
 */

(function ($) {
    $(document).ready(function () {
      // When documents is ready, set listeners.
      initializeSelectListeners();
      // On ajax reload, new selects may appear. Initialize listeners on those selects.
      $(document).ajaxComplete(initializeSelectListeners);
    });

  /**
   * Set listeners on all <select> of the page.
   */
  function initializeSelectListeners() {
    // Get all selects on the current page.
    var selects = $('.form-select-wrapper select');
    // Remove our handlers that would already be set to avoid conflicts.
    selects.off('click', setClicked);
    selects.off('blur', removeClicked);
    // Set handlers.
    selects.on('click', setClicked);
    selects.on('blur', removeClicked);
  }

  /**
   * Add the 'clicked' class on the <select> wrapper.
   */
  function setClicked() {
    $(this).parent('.form-select-wrapper').toggleClass('clicked');
  }

  /**
   * Remove the 'clicked' class from the <select> wrapper.
   */
  function removeClicked() {
    $(this).parent('.form-select-wrapper').removeClass('clicked');
  }

}(jQuery));

/**
 Slideshow edido behavior.
 * Required:
 * - jQuery
 * - jquery.touchSwipe.min.js
 */

// implementing the revealing module pattern (google it :p)
// without the () to instantiate multiple ones
// and injecting the slideshow container
// (have to live with former version... so keeping former functions for now)

// data-attr used             value             description
// data-slideshow             "edito|telex"     top container + slideshow type
// data-slideshow-swipe       ""                swipe zone
// data-slideshow-btn         "previous|next"   buttons
// data-slideshow-dots-item   "id slide"        dots buttons container
// data-slideshow-dots-btn    "id slide"        dots buttons
// data-slideshow-slide       "id slide"        slide container
// data-slideshow-pager       ""                container for pager

// main object to instantiate
var slideshow = function ($, container) {
  // should be mandatory nowadays
  'use strict';

  var settings = {};
  var slides = [];
  var resizeTimeout;

  settings.type = container.data('slideshow');

  // array of slides, to easily get next and previous
  function getSlides() {
    container.find('[data-slideshow-slide]').each(function () {
      slides.push($(this).data('slideshow-slide'));
    });
  }

  // display the current slide
  function changeSlide(id) {
    // dots buttons
    container.find('[data-slideshow-dots-item="' + id + '"]').addClass('active');
    container.find('[data-slideshow-dots-btn="' + id + '"]').addClass('active');
    container.find('[data-slideshow-dots-btn="' + id + '"]').attr('aria-current', true);
    // slide
    container.find('[data-slideshow-slide="' + id + '"]').removeClass('visually-hidden');
  }

  // hide other slides than current
  function hideSlides(id) {
    var thisId;
    $('[data-slideshow-slide]').each(function () {
      thisId = $(this).data('slideshow-slide');
      if (thisId !== id) {
        // dots buttons
        container.find('[data-slideshow-dots-item="' + thisId + '"]').removeClass('active');
        container.find('[data-slideshow-dots-btn="' + thisId + '"]').removeClass('active');
        container.find('[data-slideshow-dots-btn="' + thisId + '"]').attr('aria-current', false);
        // slide
        container.find('[data-slideshow-slide="' + thisId + '"]').addClass('visually-hidden');
      }
    });
  }

  // get index of current slide in [slides]
  function getSlideIndex() {
    var index = 0;
    container.find('[data-slideshow-slide]').each(function () {
      if (!$(this).hasClass('visually-hidden')) {
        index = $(this).data('slideshow-slide');
      }
    });
    return slides.indexOf(index);
  }

  // calculate previous index
  function getPreviousIndex(index) {
    var maxIndex;
    maxIndex = slides.length - 1;
    if (index === 0) {
      return maxIndex;
    }
    return --index;
  }

  // calculate next index
  function getNextIndex(index) {
    var maxIndex;
    maxIndex = slides.length - 1;
    if (index === maxIndex) {
      return 0;
    }
    return ++index;
  }

  // go to the next slide
  function nextSlide() {
    var index;
    index = getNextIndex(getSlideIndex());
    displaySlides(slides[index]);
  }

  // go to the previous slide
  function previousSlide() {
    var index;
    index = getPreviousIndex(getSlideIndex());
    displaySlides(slides[index]);
  }

  // display current slides
  function displaySlides(id) {
    changeSlide(id);
    hideSlides(id);
    slideshowPager();
  }

  // pager
  function slideshowPager() {
    var numberOfSlides = slides.length;
    var currentSlide = getSlideIndex() + 1;
    container.find('[data-slideshow-pager]').html(currentSlide + '/' + numberOfSlides);
  }

  // Buttons vertical align.
  function alignSlideshowButtons() {
    var nth = getSlideIndex();
    var imageContainerHeight = (container.find('ul').find('li').eq(nth).find('img').height()) / 2;
    var slideBtn = container.find('[data-slideshow-btn]');
    var slideBtnHeight = (slideBtn.length ? slideBtn.height() / 2 : 0);

    if (slideBtn.length) {
      slideBtn.css('top', (imageContainerHeight - slideBtnHeight) + 'px');
    }
  }

  // On first image .load, calulate height.
  function imageLoaded() {
    var img = container.find('ul').find('li').eq(1).find('img');
    if (img) {
      $('<img/>')
        .on('load', function () { // Image loaded, align arrow buttons.
          alignSlideshowButtons();
          container.find('.btn-arrow-slideshow').removeClass('js-hidden');
        })
        .attr('src', img.attr('src'));
    }
  }

  // initialisations
  function init() {
    // fill the slides array
    getSlides();

    // 'next' button
    container.find('[data-slideshow-btn="next"]').click(function () {
      nextSlide();
    });

    // 'previous' button
    container.find('[data-slideshow-btn="previous"]').click(function () {
      previousSlide();
    });

    // dot buttons
    container.find('[data-slideshow-dots-btn]').click(function () {
      var id;
      id = $(this).data('slideshow-dots-btn');
      displaySlides(id);
    });

    // Swipe
    container.find('[data-slideshow-swipe]').swipe({
      swipeLeft: function () {
        nextSlide();
      },
      swipeRight: function () {
        previousSlide();
      }
    });

    // if its an edito type, we have to recalculate the vertical position of the buttons
    // on resive window, we have to recalculate it too
    if (settings.type === 'edito') {
      $(window).on('resize', function () {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(function () {
          alignSlideshowButtons();
        }, 250);
      });
      // Dom ready, positioning arrow buttons.
      imageLoaded();
    }
  }

  // exposed functions (public)
  return {
    init: init
  };
};

// initialize slideshow
function initSlideshow() {
  'use strict';
  jQuery('[data-slideshow]').once().each(function () {
    slideshow(jQuery, jQuery(this)).init();
  });
}

// init slideshow on ready
jQuery(document).ready(function ($) {
  'use strict';
  initSlideshow();
});

// split querystring
function getSplittedQueryString(qs) {
  'use strict';
  var qsSplitted, data = {}, i, l, part;
  // COM-XXXX: Uploading a file on a webform on an edito triggers this function
  // and somehow qs.split is not defined. Make sure it is. Also, the error only
  // appears on current and recette.
  // TODO: Only execute this script on slideshows.
  if (typeof qs.split === 'function') {
    qsSplitted = qs.split('&');
    for (i = 0, l = qsSplitted.length; i < l; i++) {
      part = qsSplitted[i].split('=');
      if (part.length === 2) {
        data[part[0]] = decodeURIComponent(part[1]);
      }
    }
  }
  return data;
}

// initialize slideshow after ajax query
// must be a query on view named filter_pages_newsroom
jQuery(document).on('ajaxComplete', function(e, xhr, settings) {
  'use strict';
  var settingsSplit;
  if (typeof settings.data !== 'undefined') {
    settingsSplit = getSplittedQueryString(settings.data);
    if (('view_name' in settingsSplit) && (settingsSplit['view_name'] === 'filter_pages_newsroom')) {
      initSlideshow();
    }
  }
});

/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.6.0
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

Modified by: Capgemini to improve accessibility

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
(function(factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports !== 'undefined') {
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery);
    }

}(function($) {
    'use strict';
    var Slick = window.Slick || {};

    Slick = (function() {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this, dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function(slider, i) {
                    return $('<button type="button" data-role="none" tabindex="-1" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);
            _.keyHandlerDots = $.proxy(_.keyHandlerDots, _);

            _.instanceUid = instanceUid++;

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;


            _.registerBreakpoints();
            _.init(true);

        }

        return Slick;

    }());

    Slick.prototype.activateADA = function() {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').removeAttr('tabindex');

    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || (index >= _.slideCount)) {
            return false;
        }

        _.unload();

        if (typeof(index) === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function(index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.animateHeight = function() {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function(targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }

        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -(_.currentLeft);
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function(now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' +
                                now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' +
                                now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function() {
                        if (callback) {
                            callback.call();
                        }
                    }
                });

            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function() {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }

            }

        }

    };

    Slick.prototype.getNavTarget = function() {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if ( asNavFor && asNavFor !== null ) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;

    };

    Slick.prototype.asNavFor = function(index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if ( asNavFor !== null && typeof asNavFor === 'object' ) {
            asNavFor.each(function() {
                var target = $(this).slick('getSlick');
                if(!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }

    };

    Slick.prototype.applyTransition = function(slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.autoPlay = function() {

        var _ = this;

        _.autoPlayClear();

        if ( _.slideCount > _.options.slidesToShow ) {
            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );
        }

    };

    Slick.prototype.autoPlayClear = function() {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }

    };

    Slick.prototype.autoPlayIterator = function() {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if ( !_.paused && !_.interrupted && !_.focussed ) {

            if ( _.options.infinite === false ) {

                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
                    _.direction = 0;
                }

                else if ( _.direction === 0 ) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if ( _.currentSlide - 1 === 0 ) {
                        _.direction = 1;
                    }

                }

            }

            _.slideHandler( slideTo );

        }

    };

    Slick.prototype.buildArrows = function() {

        var _ = this;

        if (_.options.arrows === true ) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if( _.slideCount > _.options.slidesToShow ) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow
                        .addClass('slick-disabled')
                        .attr('aria-disabled', 'true');
                }

            } else {

                _.$prevArrow.add( _.$nextArrow )

                    .addClass('slick-hidden')
                    .attr({
                        'aria-disabled': 'true',
                        'tabindex': '-1'
                    });

            }

        }

    };

    Slick.prototype.buildDots = function() {

        var _ = this,
            i, dot;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active');

        }

    };

    Slick.prototype.buildOut = function() {

        var _ = this;

        _.$slides =
            _.$slider
                .children( _.options.slide + ':not(.slick-cloned)')
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function(index, element) {
            $(element)
                .attr('data-slick-index', index)
                .data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = (_.slideCount === 0) ?
            $('<div class="slick-track"/>').appendTo(_.$slider) :
            _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap(
            '<div class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();


        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }

    };

    Slick.prototype.buildRows = function() {

        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if(_.options.rows > 1) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(
                originalSlides.length / slidesPerSection
            );

            for(a = 0; a < numOfSlides; a++){
                var slide = document.createElement('div');
                for(b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for(c = 0; c < _.options.slidesPerRow; c++) {
                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children()
                .css({
                    'width':(100 / _.options.slidesPerRow) + '%',
                    'display': 'inline-block'
                });

        }

    };

    Slick.prototype.checkResponsive = function(initial, forceUpdate) {

        var _ = this,
            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if ( _.options.responsive &&
            _.options.responsive.length &&
            _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint =
                            targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings,
                                _.breakpointSettings[
                                    targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings,
                            _.breakpointSettings[
                                targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            // only trigger breakpoints during an actual break. not on initialize.
            if( !initial && triggerBreakpoint !== false ) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }

    };

    Slick.prototype.changeSlide = function(event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset, slideOffset, unevenOffset;

        // If target is a link, prevent default action.
        if($target.is('a')) {
            event.preventDefault();
        }

        // If target is not the <li> element (ie: a child), find the <li>.
        if(!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 :
                    event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }

    };

    Slick.prototype.checkNavigable = function(index) {

        var _ = this,
            navigables, prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function() {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots)
                .off('click.slick', _.changeSlide)
                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);

    };

    Slick.prototype.cleanUpSlideEvents = function() {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));

    };

    Slick.prototype.cleanUpRows = function() {

        var _ = this, originalSlides;

        if(_.options.rows > 1) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }

    };

    Slick.prototype.clickHandler = function(event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }

    };

    Slick.prototype.destroy = function(refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }


        if ( _.$prevArrow && _.$prevArrow.length ) {

            _.$prevArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display','');

            if ( _.htmlExpr.test( _.options.prevArrow )) {
                _.$prevArrow.remove();
            }
        }

        if ( _.$nextArrow && _.$nextArrow.length ) {

            _.$nextArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display','');

            if ( _.htmlExpr.test( _.options.nextArrow )) {
                _.$nextArrow.remove();
            }

        }


        if (_.$slides) {

            _.$slides
                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                .removeAttr('aria-hidden')
                .removeAttr('data-slick-index')
                .each(function(){
                    $(this).attr('style', $(this).data('originalStyling'));
                });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if(!refresh) {
            _.$slider.trigger('destroy', [_]);
        }

    };

    Slick.prototype.disableTransition = function(slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.fadeSlide = function(slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function() {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }

        }

    };

    Slick.prototype.fadeSlideOut = function(slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });

        }

    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.focusHandler = function() {

        var _ = this;

        _.$slider
            .off('focus.slick blur.slick')
            .on('focus.slick blur.slick',
                '*:not(.slick-arrow)', function(event) {

            event.stopImmediatePropagation();
            var $sf = $(this);

            setTimeout(function() {

                if( _.options.pauseOnFocus ) {
                    _.focussed = $sf.is(':focus');
                    _.autoPlay();
                }

            }, 0);

        });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {

        var _ = this;
        return _.currentSlide;

    };

    Slick.prototype.getDotCount = function() {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if(!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        }else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;

    };

    Slick.prototype.getLeft = function(slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                verticalOffset = (verticalHeight * _.options.slidesToShow) * -1;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                    } else {
                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
        } else {
            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft =  0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft =  0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;

    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {

        var _ = this;

        return _.options[option];

    };

    Slick.prototype.getNavigableIndexes = function() {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;

    };

    Slick.prototype.getSlick = function() {

        return this;

    };

    Slick.prototype.getSlideCount = function() {

        var _ = this,
            slidesTraversed, swipedSlide, centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function(index, slide) {
                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;

        } else {
            return _.options.slidesToScroll;
        }

    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);

    };

    Slick.prototype.init = function(creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();

        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if ( _.options.autoplay ) {

            _.paused = false;
            _.autoPlay();

        }

    };

    Slick.prototype.initADA = function() {
        var _ = this;
        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
            $(this).attr({
                'role': 'tabpanel',
                'aria-describedby': 'slick-slide' + _.instanceUid + i + '',
                'id': 'carousel-item' + _.instanceUid + i + ''
            });
        });

        if (_.$dots !== null) {
            _.$dots.attr('role', 'tablist').find('li').each(function(i) {
                $(this).attr({
                    'role': 'presentation',
                    'id': 'slick-slide' + _.instanceUid + i + '',
                }).find('button').attr({
                    'aria-controls': function () {
                      var ids = '',
                      from = i * _.options.slidesToScroll,
                      to = (i+1) * _.options.slidesToScroll;
                      from = from < _.slideCount ? from : _.slideCount;
                      to = to < _.slideCount ? to : _.slideCount;
                      for (var index = from; index < to; index++) {
                        ids += 'carousel-item' + _.instanceUid + index+ ' ';
                      }
                      return ids;
                    }
                });
            })
        }
        _.activateADA();

    };

    Slick.prototype.initArrowEvents = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow
               .off('click.slick')
               .on('click.slick', {
                    message: 'previous'
               }, _.changeSlide);
            _.$nextArrow
               .off('click.slick')
               .on('click.slick', {
                    message: 'next'
               }, _.changeSlide);
        }

    };

    Slick.prototype.initDotEvents = function() {

        var _ = this;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);
        }

        if ( _.options.dots === true && _.options.pauseOnDotsHover === true ) {

            $('li', _.$dots)
                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initSlideEvents = function() {

        var _ = this;

        if ( _.options.pauseOnHover ) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initializeEvents = function() {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
            if (_.$dots) {
              _.$dots.on('keydown.slick', _.keyHandlerDots);
            }
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);

    };

    Slick.prototype.initUI = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();

        }

    };

    Slick.prototype.keyHandler = function(event) {

        var _ = this;
         //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' :  'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }

    };

  Slick.prototype.keyHandlerDots = function(event) {

    var _ = this;
    if (event.keyCode === 37 && _.options.accessibility === true) {
        _.changeSlide({
          data: {
            message: _.options.rtl === true ? 'next' :  'previous'
          }
        });
    } else if (event.keyCode === 39 && _.options.accessibility === true) {
        _.changeSlide({
          data: {
            message: _.options.rtl === true ? 'previous' : 'next'
          }
        });
    }

  };

  Slick.prototype.lazyLoad = function() {

        var _ = this,
            loadRange, cloneRange, rangeStart, rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function() {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function() {

                    image
                        .animate({ opacity: 0 }, 100, function() {
                            image
                                .attr('src', imageSource)
                                .animate({ opacity: 1 }, 200, function() {
                                    image
                                        .removeAttr('data-lazy')
                                        .removeClass('slick-loading');
                                });
                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                        });

                };

                imageToLoad.onerror = function() {

                    image
                        .removeAttr( 'data-lazy' )
                        .removeClass( 'slick-loading' )
                        .addClass( 'slick-lazyload-error' );

                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                };

                imageToLoad.src = imageSource;

            });

        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else
        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }

    };

    Slick.prototype.loadSlider = function() {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }

    };

    Slick.prototype.next = Slick.prototype.slickNext = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });

    };

    Slick.prototype.orientationChange = function() {

        var _ = this;

        _.checkResponsive();
        _.setPosition();

    };

    Slick.prototype.pause = Slick.prototype.slickPause = function() {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;

    };

    Slick.prototype.play = Slick.prototype.slickPlay = function() {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;

    };

    Slick.prototype.postSlide = function(index) {

        var _ = this;

        if( !_.unslicked ) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            _.setPosition();

            _.swipeLeft = null;

            if ( _.options.autoplay ) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();
            }

        }

    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });

    };

    Slick.prototype.preventDefault = function(event) {

        event.preventDefault();

    };

    Slick.prototype.progressiveLazyLoad = function( tryCount ) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),
            image,
            imageSource,
            imageToLoad;

        if ( $imgsToLoad.length ) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function() {

                image
                    .attr( 'src', imageSource )
                    .removeAttr('data-lazy')
                    .removeClass('slick-loading');

                if ( _.options.adaptiveHeight === true ) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);
                _.progressiveLazyLoad();

            };

            imageToLoad.onerror = function() {

                if ( tryCount < 3 ) {

                    /**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */
                    setTimeout( function() {
                        _.progressiveLazyLoad( tryCount + 1 );
                    }, 500 );

                } else {

                    image
                        .removeAttr( 'data-lazy' )
                        .removeClass( 'slick-loading' )
                        .addClass( 'slick-lazyload-error' );

                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                    _.progressiveLazyLoad();

                }

            };

            imageToLoad.src = imageSource;

        } else {

            _.$slider.trigger('allImagesLoaded', [ _ ]);

        }

    };

    Slick.prototype.refresh = function( initializing ) {

        var _ = this, currentSlide, lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        // in non-infinite sliders, we don't want to go past the
        // last visible index.
        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
            _.currentSlide = lastVisibleIndex;
        }

        // if less slides than to show, go to start.
        if ( _.slideCount <= _.options.slidesToShow ) {
            _.currentSlide = 0;

        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if( !initializing ) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);

        }

    };

    Slick.prototype.registerBreakpoints = function() {

        var _ = this, breakpoint, currentBreakpoint, l,
            responsiveSettings = _.options.responsive || null;

        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {

            _.respondTo = _.options.respondTo || 'window';

            for ( breakpoint in responsiveSettings ) {

                l = _.breakpoints.length-1;
                currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {

                    // loop through the breakpoints and cut out any existing
                    // ones with the same breakpoint number, we don't want dupes.
                    while( l >= 0 ) {
                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
                            _.breakpoints.splice(l,1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;

                }

            }

            _.breakpoints.sort(function(a, b) {
                return ( _.options.mobileFirst ) ? a-b : b-a;
            });

        }

    };

    Slick.prototype.reinit = function() {

        var _ = this;

        _.$slides =
            _.$slideTrack
                .children(_.options.slide)
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);

    };

    Slick.prototype.resize = function() {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function() {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if( !_.unslicked ) { _.setPosition(); }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.setCSS = function(position) {

        var _ = this,
            positionProps = {},
            x, y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }

    };

    Slick.prototype.setDimensions = function() {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: ('0px ' + _.options.centerPadding)
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: (_.options.centerPadding + ' 0px')
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();


        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));

        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);

    };

    Slick.prototype.setFade = function() {

        var _ = this,
            targetLeft;

        _.$slides.each(function(index, element) {
            targetLeft = (_.slideWidth * index) * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });

    };

    Slick.prototype.setHeight = function() {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }

    };

    Slick.prototype.setOption =
    Slick.prototype.slickSetOption = function() {

        /**
         * accepts arguments in format of:
         *
         *  - for changing a single option's value:
         *     .slick("setOption", option, value, refresh )
         *
         *  - for changing a set of responsive options:
         *     .slick("setOption", 'responsive', [{}, ...], refresh )
         *
         *  - for updating multiple values at once (not responsive)
         *     .slick("setOption", { 'option': value, ... }, refresh )
         */

        var _ = this, l, item, option, value, refresh = false, type;

        if( $.type( arguments[0] ) === 'object' ) {

            option =  arguments[0];
            refresh = arguments[1];
            type = 'multiple';

        } else if ( $.type( arguments[0] ) === 'string' ) {

            option =  arguments[0];
            value = arguments[1];
            refresh = arguments[2];

            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {

                type = 'responsive';

            } else if ( typeof arguments[1] !== 'undefined' ) {

                type = 'single';

            }

        }

        if ( type === 'single' ) {

            _.options[option] = value;


        } else if ( type === 'multiple' ) {

            $.each( option , function( opt, val ) {

                _.options[opt] = val;

            });


        } else if ( type === 'responsive' ) {

            for ( item in value ) {

                if( $.type( _.options.responsive ) !== 'array' ) {

                    _.options.responsive = [ value[item] ];

                } else {

                    l = _.options.responsive.length-1;

                    // loop through the responsive object and splice out duplicates.
                    while( l >= 0 ) {

                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {

                            _.options.responsive.splice(l,1);

                        }

                        l--;

                    }

                    _.options.responsive.push( value[item] );

                }

            }

        }

        if ( refresh ) {

            _.unload();
            _.reinit();

        }

    };

    Slick.prototype.setPosition = function() {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);

    };

    Slick.prototype.setProps = function() {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined ||
            bodyStyle.MozTransition !== undefined ||
            bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if ( _.options.fade ) {
            if ( typeof _.options.zIndex === 'number' ) {
                if( _.options.zIndex < 3 ) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
    };


    Slick.prototype.setSlideClasses = function(index) {

        var _ = this,
            centerOffset, allSlides, indexOffset, remainder;

        allSlides = _.$slider
            .find('.slick-slide')
            .removeClass('slick-active slick-center slick-current')
            .attr('aria-hidden', 'true');

        _.$slides
            .eq(index)
            .addClass('slick-current');

        if (_.options.centerMode === true) {

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {

                    _.$slides
                        .slice(index - centerOffset, index + centerOffset + 1)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides
                        .slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

                if (index === 0) {

                    allSlides
                        .eq(allSlides.length - 1 - _.options.slidesToShow)
                        .addClass('slick-center');

                } else if (index === _.slideCount - 1) {

                    allSlides
                        .eq(_.options.slidesToShow)
                        .addClass('slick-center');

                }

            }

            _.$slides
                .eq(index)
                .addClass('slick-center');

        } else {

            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {

                _.$slides
                    .slice(index, index + _.options.slidesToShow)
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {

                    allSlides
                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    allSlides
                        .slice(indexOffset, indexOffset + _.options.slidesToShow)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

            }

        }

        if (_.options.lazyLoad === 'ondemand') {
            _.lazyLoad();
        }

    };

    Slick.prototype.setupInfinite = function() {

        var _ = this,
            i, slideIndex, infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > (_.slideCount -
                        infiniteCount); i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex - _.slideCount)
                        .prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex + _.slideCount)
                        .appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
                    $(this).attr('id', '');
                });

            }

        }

    };

    Slick.prototype.interrupt = function( toggle ) {

        var _ = this;

        if( !toggle ) {
            _.autoPlay();
        }
        _.interrupted = toggle;

    };

    Slick.prototype.selectHandler = function(event) {

        var _ = this;

        var targetElement =
            $(event.target).is('.slick-slide') ?
                $(event.target) :
                $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.setSlideClasses(index);
            _.asNavFor(index);
            return;

        }

        _.slideHandler(index);

    };

    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {

        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
            _ = this, navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if ( _.options.autoplay ) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if ( _.options.asNavFor ) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {
                navTarget.setSlideClasses(_.currentSlide);
            }

        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function() {
                    _.postSlide(animSlide);
                });

            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true) {
            _.animateSlide(targetLeft, function() {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }

    };

    Slick.prototype.startLoad = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();

        }

        _.$slider.addClass('slick-loading');

    };

    Slick.prototype.swipeDirection = function() {

        var xDist, yDist, r, swipeAngle, _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
            return (_.options.rtl === false ? 'right' : 'left');
        }
        if (_.options.verticalSwiping === true) {
            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';

    };

    Slick.prototype.swipeEnd = function(event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.interrupted = false;
        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;

        if ( _.touchObject.curX === undefined ) {
            return false;
        }

        if ( _.touchObject.edgeHit === true ) {
            _.$slider.trigger('edge', [_, _.swipeDirection() ]);
        }

        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {

            direction = _.swipeDirection();

            switch ( direction ) {

                case 'left':
                case 'down':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :
                            _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :
                            _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:


            }

            if( direction != 'vertical' ) {

                _.slideHandler( slideCount );
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction ]);

            }

        } else {

            if ( _.touchObject.startX !== _.touchObject.curX ) {

                _.slideHandler( _.currentSlide );
                _.touchObject = {};

            }

        }

    };

    Slick.prototype.swipeHandler = function(event) {

        var _ = this;

        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
            event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options
            .touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options
                .touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }

    };

    Slick.prototype.swipeMove = function(event) {

        var _ = this,
            edgeWasHit = false,
            curLeft, swipeDirection, swipeLength, positionOffset, touches;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = Math.round(Math.sqrt(
                Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
        }

        swipeDirection = _.swipeDirection();

        if (swipeDirection === 'vertical') {
            return;
        }

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }


        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);

    };

    Slick.prototype.swipeStart = function(event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;

    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.unload = function() {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides
            .removeClass('slick-slide slick-active slick-visible slick-current')
            .attr('aria-hidden', 'true')
            .css('width', '');

    };

    Slick.prototype.unslick = function(fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();

    };

    Slick.prototype.updateArrows = function() {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if ( _.options.arrows === true &&
            _.slideCount > _.options.slidesToShow &&
            !_.options.infinite ) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            }

        }

    };

    Slick.prototype.updateDots = function() {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots
                .find('li')
                .removeClass('slick-active')
                .find('button').attr({
                  'tabindex': -1,
                  'aria-selected': 'false'
                });

            _.$dots
                .find('li')
                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                .addClass('slick-active')
                .find('button').attr({
                  'tabindex': 0,
                  'aria-selected': 'true'
                });
            if (_.$dots.find('button:focus').length) {
              _.$dots.find('li.slick-active button').focus();
            }
        }

    };

    Slick.prototype.visibility = function() {

        var _ = this;

        if ( _.options.autoplay ) {

            if ( document[_.hidden] ) {

                _.interrupted = true;

            } else {

                _.interrupted = false;

            }

        }

    };

    $.fn.slick = function() {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == 'object' || typeof opt == 'undefined')
                _[i].slick = new Slick(_[i], opt);
            else
                ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };

}));

/**
 * @file
 * Initialise the styleguide accessibility.
 */

(function ($) {
  $.fn.sncfTooltip = function () {

    // Open/ Close on click popin button.
    this.find(".btn-tooltip").unbind('click').click(function (e) {
      var $this = $(this);
      // Close popin.
      if($this.attr("aria-expanded") == 'true') {
        $this.siblings(".tooltip-content").addClass("js-hidden");
        $this.attr("aria-expanded", "false");
      } else if ($this.attr("aria-expanded") == 'false') {
        // Open popin.
        $this.siblings(".tooltip-content").removeClass("js-hidden");
        $this.attr("aria-expanded", "true");

        // Popin position calculation.
        var id_webform = $this.attr("aria-controls");
        var $popin = $('#' + id_webform);
        const position = -10 - $popin[0].offsetHeight;
        $('#' + id_webform).css("top", position);
      }
    });
    // Close popin.
    this.find(".btn-close-tooltip").click(function () {
      $(".btn-tooltip")
        .attr("aria-expanded", "false")
        .siblings(".tooltip-content")
        .addClass("js-hidden");
    });

    return this;
  };
})(jQuery);

(function ($) {
  // Launched on iframe-resize.js.
  $.fn.yt_video = function () {
    // Initialize settings (extends default ones).
    var iframe = $(this);
    setHeight(iframe);

    $(window).resize(function() {
      setHeight(iframe);
    });
  };

  function setHeight(iframe) {
    var width = iframe.css('width');
    var height = parseInt(width, 10) / 4 * 3;
    iframe.css('height', height + "px");
  }
}(jQuery));

/**
 * Handle the zoom text done by the user.
 *
 * Zoom text method in Firefox: https://support.mozilla.org/en-US/kb/font-size-and-zoom-increase-size-of-web-pages#w_how-to-only-change-the-size-of-the-text
 *
 * Add or remove CSS class based on the zooming level.
 * Trigger a 'snc:font:zoom' event on window DOM object with a state parameter: 'initial', 'zoomed', 'unzoomed'.
 *
 * Required:
 * - jQuery
 *
 * Authors:
 * - Alan Le Fournis
 * - Raphaël Morvan
 * - Olivier Briat
 *
 */

(function ($) {
  var tinyState = 'tiny';
  var zoomClass = 'zoom-text';
  var unzoomClass = 'unzoom-text';
  var tinyTextSize = 16;
  var smallLargeTextSize = 18;
  // This variable will save the current zoom class to avoid unnecessary update.
  var currentZoomState = '';
  // JQuery body element.
  var body = jQuery('body');

  $.fn.font_size_routine = function () {
    // Look if the font size has already been changed for accessibility.
    fontSizeRoutine();
  };

  /**
   * Look if the font size is different from the default one.
   * If it's different, a class is added on the body.
   * (The font size can be change by the user for accessibility purpose).
   */
  function updateZoomUnzoomClass() {
    // Variable used to save the default text size of the current screen format.
    var defaultTextSize;
    // Get the current window format (desktop, mobile, ...).
    var currentFormat = window.getComputedStyle(document.querySelector('body'), ':before').getPropertyValue('content').replace(/\"/g, '');
    // Get the current text size of the body.
    var currentTextSize = parseInt(window.getComputedStyle(document.body).getPropertyValue('font-size'));

    if (currentFormat === tinyState) {
      // If we are on a mobile phone screen.
      defaultTextSize = tinyTextSize;
    } else {
      // If we are on a desktop or a tablet screen.
      defaultTextSize = smallLargeTextSize;
    }

    // Compare the wanted values with the current ones to update classes if necessary.
    if (currentTextSize > defaultTextSize) {
      if(currentZoomState !== zoomClass) {
        addAndRemoveClasses(zoomClass);
      }
    } else if (currentTextSize < defaultTextSize) {
      if(currentZoomState !== unzoomClass) {
        addAndRemoveClasses(unzoomClass);
      }
    } else if (currentTextSize === defaultTextSize) {
      if(currentZoomState !== '') {
        addAndRemoveClasses('');
      }
    }
  }

  /**
   * Add and remove zoom classes based on the given one.
   * @param addedClass
   *    The class we wanted to add on the body.
   *    If empty, it will remove every zoom classes.
   */
  function addAndRemoveClasses(addedClass) {
    if (addedClass !== '') {
      if(addedClass === zoomClass) {
        $('body').removeClass(unzoomClass).addClass(addedClass);
        currentZoomState = zoomClass;
        $(window).trigger('snc:font:zoom' , 'zoomed');
      } else {
        $('body').removeClass(zoomClass).addClass(addedClass);
        currentZoomState = addedClass;
        $(window).trigger('snc:font:zoom', 'unzoomed');
      }
    } else {
      $('body').removeClass(unzoomClass).removeClass(zoomClass);
      currentZoomState = '';
      $(window).trigger('snc:font:zoom', 'initial');
    }
  }

  /**
   * Recursive check for a change in the font size
   */
  $(document).ready(function() {
    (function fontSizeRoutine() {
      updateZoomUnzoomClass();
      setTimeout(fontSizeRoutine, 500);
    })();
  });

}(jQuery));

/**
 * https://github.com/WICG/focus-ring
 * Version: 2018, February 10th
 */
function init() {
  var hadKeyboardEvent = true;
  var hadFocusVisibleRecently = false;
  var hadFocusVisibleRecentlyTimeout = null;
  var elWithFocusRing;

  var inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    'datetime-local': true
  };

  /**
   * Computes whether the given element should automatically trigger the
   * `focus-visible` class being added, i.e. whether it should always match
   * `:focus-visible` when focused.
   * @param {Element} el
   * @return {boolean}
   */
  function focusTriggersKeyboardModality(el) {
    var type = el.type;
    var tagName = el.tagName;

    if (tagName == 'INPUT' && inputTypesWhitelist[type] && !el.readonly) {
      return true;
    }

    if (tagName == 'TEXTAREA' && !el.readonly) {
      return true;
    }

    if (el.contentEditable == 'true') {
      return true;
    }

    return false;
  }

  /**
   * Add the `focus-visible` class to the given element if it was not added by
   * the author.
   * @param {Element} el
   */
  function addFocusVisibleClass(el) {
    if (el.classList.contains('focus-visible')) {
      return;
    }
    el.classList.add('focus-visible');
    el.setAttribute('data-focus-visible-added', '');
  }

  /**
   * Remove the `focus-visible` class from the given element if it was not
   * originally added by the author.
   * @param {Element} el
   */
  function removeFocusVisibleClass(el) {
    if (!el.hasAttribute('data-focus-visible-added')) {
      return;
    }
    el.classList.remove('focus-visible');
    el.removeAttribute('data-focus-visible-added');
  }

  /**
   * On `keydown`, set `hadKeyboardEvent`, add `focus-visible` class if the
   * key was Tab/Shift-Tab or Arrow Keys.
   * @param {Event} e
   */
  function onKeyDown(e) {
    // Ignore keypresses if the user is holding down a modifier key.
    if (e.altKey || e.ctrlKey || e.metaKey) {
      return;
    }

    hadKeyboardEvent = true;
  }

  /**
   * If at any point a user clicks with a pointing device, ensure that we change
   * the modality away from keyboard.
   * This avoids the situation where a user presses a key on an already focused
   * element, and then clicks on a different element, focusing it with a
   * pointing device, while we still think we're in keyboard modality.
   * @param {Event} e
   */
  function onPointerDown(e) {
    hadKeyboardEvent = false;
  }

  /**
   * On `focus`, add the `focus-visible` class to the target if:
   * - the target received focus as a result of keyboard navigation, or
   * - the event target is an element that will likely require interaction
   *   via the keyboard (e.g. a text box)
   * @param {Event} e
   */
  function onFocus(e) {
    // Prevent IE from focusing the document or HTML element.
    if (e.target == document || e.target.nodeName == 'HTML') {
      return;
    }

    if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {
      addFocusVisibleClass(e.target);
      hadKeyboardEvent = false;
    }
  }

  /**
   * On `blur`, remove the `focus-visible` class from the target.
   * @param {Event} e
   */
  function onBlur(e) {
    if (e.target == document || e.target.nodeName == 'HTML') {
      return;
    }

    if (e.target.classList.contains('focus-visible')) {
      // To detect a tab/window switch, we look for a blur event followed
      // rapidly by a visibility change.
      // If we don't see a visibility change within 100ms, it's probably a
      // regular focus change.
      hadFocusVisibleRecently = true;
      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
      hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {
        hadFocusVisibleRecently = false;
        window.clearTimeout(hadFocusVisibleRecentlyTimeout);
      }, 100);
      removeFocusVisibleClass(e.target);
    }
  }

  /**
   * If the user changes tabs, keep track of whether or not the previously
   * focused element had .focus-visible.
   * @param {Event} e
   */
  function onVisibilityChange(e) {
    if (document.visibilityState == 'hidden') {
      // If the tab becomes active again, the browser will handle calling focus
      // on the element (Safari actually calls it twice).
      // If this tab change caused a blur on an element with focus-visible,
      // re-apply the class when the user switches back to the tab.
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
      addInitialPointerMoveListeners();
    }
  }

  /**
   * Add a group of listeners to detect usage of any pointing devices.
   * These listeners will be added when the polyfill first loads, and anytime
   * the window is blurred, so that they are active when the window regains
   * focus.
   */
  function addInitialPointerMoveListeners() {
    document.addEventListener('mousemove', onInitialPointerMove);
    document.addEventListener('mousedown', onInitialPointerMove);
    document.addEventListener('mouseup', onInitialPointerMove);
    document.addEventListener('pointermove', onInitialPointerMove);
    document.addEventListener('pointerdown', onInitialPointerMove);
    document.addEventListener('pointerup', onInitialPointerMove);
    document.addEventListener('touchmove', onInitialPointerMove);
    document.addEventListener('touchstart', onInitialPointerMove);
    document.addEventListener('touchend', onInitialPointerMove);
  }

  function removeInitialPointerMoveListeners() {
    document.removeEventListener('mousemove', onInitialPointerMove);
    document.removeEventListener('mousedown', onInitialPointerMove);
    document.removeEventListener('mouseup', onInitialPointerMove);
    document.removeEventListener('pointermove', onInitialPointerMove);
    document.removeEventListener('pointerdown', onInitialPointerMove);
    document.removeEventListener('pointerup', onInitialPointerMove);
    document.removeEventListener('touchmove', onInitialPointerMove);
    document.removeEventListener('touchstart', onInitialPointerMove);
    document.removeEventListener('touchend', onInitialPointerMove);
  }

  /**
   * When the polfyill first loads, assume the user is in keyboard modality.
   * If any event is received from a pointing device (e.g. mouse, pointer,
   * touch), turn off keyboard modality.
   * This accounts for situations where focus enters the page from the URL bar.
   * @param {Event} e
   */
  function onInitialPointerMove(e) {
    // Work around a Safari quirk that fires a mousemove on <html> whenever the
    // window blurs, even if you're tabbing out of the page. ¯\_(ツ)_/¯
    if (e.target.nodeName.toLowerCase() === 'html') {
      return;
    }

    hadKeyboardEvent = false;
    removeInitialPointerMoveListeners();
  }

  document.addEventListener('keydown', onKeyDown, true);
  document.addEventListener('mousedown', onPointerDown, true);
  document.addEventListener('pointerdown', onPointerDown, true);
  document.addEventListener('touchstart', onPointerDown, true);
  document.addEventListener('focus', onFocus, true);
  document.addEventListener('blur', onBlur, true);
  document.addEventListener('visibilitychange', onVisibilityChange, true);
  addInitialPointerMoveListeners();

  document.body.classList.add('js-focus-visible');
}

/**
 * Subscription when the DOM is ready
 * @param {Function} callback
 */
function onDOMReady(callback) {
  var loaded;

  /**
   * Callback wrapper for check loaded state
   */
  function load() {
    if (!loaded) {
      loaded = true;

      callback();
    }
  }

  if (document.readyState === 'complete') {
    callback();
  } else {
    loaded = false;
    document.addEventListener('DOMContentLoaded', load, false);
    window.addEventListener('load', load, false);
  }
}

onDOMReady(init);

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else if (typeof exports !== 'undefined') {
    module.exports = factory(require('jquery'));
  } else {
    factory(jQuery);
  }

}(function($) {
  $(function() {

    /*
     * jQuery Accessible Carrousel System, using ARIA
     * @version v1.7.1
     * Website: https://a11y.nicolas-hoffmann.net/carrousel/
     * License MIT: https://github.com/nico3333fr/jquery-accessible-carrousel-aria/blob/master/LICENSE
     */
    /* loading aria carousel --------------------------------------------------------------------------------------- */

    /*----------------[IMPORTANT]----------------------------------------
    Important notice: We needed to rename the word "carrousel" into "carousel" because of a mistake (two R as in French)
    for CSS classes. Be careful with updates
    -----------------------------------------------------------------------------------------------------------------*/

    var $carousel_container = $('.carousel__container'),
      $carousel_content = $('.carousel__content'),
      $body = $('body');


    if ($carousel_container.length && $carousel_content.length) { // if there are at least one content and one container :)

      var hash = window.location.hash.replace("#", ""),
        getTransEndEventName = function() {
          var i,
            el = document.createElement('div'),
            transitions = {
              'WebkitTransition': 'webkitTransitionEnd',
              'MozTransition': 'transitionend',
              'OTransition': 'oTransitionEnd otransitionend',
              'msTransition': 'MSTransitionEnd',
              'transition': 'transitionend',
              'webkitAnimation': 'webkitAnimationEnd',
              'MozAnimation': 'animationend',
              'msAnimation': 'msAnimationEnd',
              'animation': 'animationend'

            };

          for (i in transitions) {
            if (transitions.hasOwnProperty(i) && typeof el.style[i] !== "undefined") {
              return transitions[i];
            }
          }

          return "NextSlide"; // CSS transitions not supported
        },
        transEndEventName = getTransEndEventName();
      // Do something when the transition/animation ends
      $body.on(transEndEventName, ".slide .carousel__content", function() {
        var $this = $(this),
          $parent = $this.parents(".carousel");
        $parent.find('.carousel__content[aria-hidden=true]').addClass('visibility-off');
      });

      $carousel_container.each(function(index_carousel_container) {
        var $this_carousel_container = $(this),
          options = $this_carousel_container.data(),
          $index_carousel = index_carousel_container + 1,
          $carousel_prefix_classes = options.carouselPrefixClasses + '-' || '',
          $carousel_span_text_class = options.carouselSpanTextClass || '',
          $carousel_span_text = options.carouselSpanText || '',
          $carousel_span_text_final = '',
          $carousel_transition = options.carouselTransition || '',
          $carousel_btn_previous_img = options.carouselBtnPreviousImg || '',
          $carousel_btn_next_img = options.carouselBtnNextImg || '',
          $carousel_btn_previous_text = options.carouselBtnPreviousText || '',
          $carousel_btn_previous_textflat = $($carousel_btn_previous_text).text() || $carousel_btn_previous_text,
          $carousel_btn_next_text = options.carouselBtnNextText || '',
          $carousel_btn_next_textflat = $($carousel_btn_next_text).text() || $carousel_btn_next_text,
          $carousel_hx = options.carouselHx || '',
          $carousel_existing_hx = options.carouselExistingHx || '';

        if ($carousel_transition != "") {
          $this_carousel_container.addClass($carousel_transition);
        }

        // information to know which tab is activated
        $this_carousel_container.addClass('carouselslide-' + $index_carousel + '-1')
          .addClass($carousel_prefix_classes + 'carousel__container')
          .addClass($carousel_prefix_classes + 'carousel__container--' + $index_carousel);


        /* insert list before carousel__container  -------------------------------------------------------------------------- */
        var navigation = '<ol class="js-carousel__control__list ' + $carousel_prefix_classes + 'carousel__control__list ' + $carousel_prefix_classes + 'carousel__control__list--' + $index_carousel + '" role="tablist">';

        $this_carousel_container.find(".carousel__content").each(function(index) {
          var $this = $(this),
            $index_readable = index + 1,
            $content_id = "id_carousel_content_" + $index_carousel + "_" + $index_readable;

          // add attributes
          $this.attr({
            "role": "tabpanel",
            "id": $content_id,
            "aria-hidden": "true",
            "aria-labelledby": "label_" + $content_id
          })
            .addClass('visibility-off')
            .addClass($carousel_prefix_classes + 'carousel__content');

          // focusable hx
          if ($carousel_existing_hx != '') {
            $this.find($carousel_existing_hx).attr("tabindex", "0");
            $carousel_span_text_final = $this.find($carousel_existing_hx).text();
          } else {
            $this.prepend('<' + $carousel_hx + ' class="invisible" tabindex="0">' + $carousel_span_text + ' ' + $index_readable + '</' + $carousel_hx + '>');
            $carousel_span_text_final = $carousel_span_text + ' ' + $index_readable;
          }


          navigation = navigation + '<li class="js-carousel__control__list__item ' + $carousel_prefix_classes + 'carousel__control__list__item" role="presentation"><a class="js-carousel__control__list__link  ' + $carousel_prefix_classes + 'carousel__control__list__link" id="label_' + $content_id + '" role="tab" aria-controls="' + $content_id + '" tabindex="-1" aria-selected="false">';

          navigation = navigation + '<span class="' + $carousel_prefix_classes + 'carousel__control__list__text';
          if ($carousel_span_text_class !== '') {
            navigation = navigation + ' ' + $carousel_span_text_class;
          }
          navigation = navigation + '">' + $carousel_span_text_final + '</span></a></li>';
        });
        navigation = navigation + '</ol>';

        $(navigation).insertBefore($this_carousel_container);


        /* Add previous/next buttons ----------------------------------------------------------------------------------------------------- */
        if ($carousel_btn_previous_text !== '') {

          var previous_button = '<div class="js-carousel__button-container ' + $carousel_prefix_classes + 'carousel__button-container js-carousel__button__previous ' + $carousel_prefix_classes + 'carousel__button__previous ' + $carousel_prefix_classes + 'carousel__button__previous--' + $index_carousel + '"><button type="button" title="' + $carousel_btn_previous_textflat + '" class="js-carousel__button__button ' + $carousel_prefix_classes + 'carousel__button__button">';
          if ($carousel_btn_previous_img !== '') {
            previous_button = previous_button + '<img src="' + $carousel_btn_previous_img + '" alt="' + $carousel_btn_previous_textflat + '" class="carousel__button__img" />';
          } else {
            previous_button = previous_button + $carousel_btn_previous_text;
          }
          previous_button = previous_button + '</button>';
          $(previous_button).insertBefore($this_carousel_container);

        }


        if ($carousel_btn_next_text !== '') {

          var next_button = '<div class="js-carousel__button-container ' + $carousel_prefix_classes + 'carousel__button-container js-carousel__button__next ' + $carousel_prefix_classes + 'carousel__button__next ' + $carousel_prefix_classes + 'carousel__button__next--' + $index_carousel + '"><button type="button" title="' + $carousel_btn_next_textflat + '" class="js-carousel__button__button ' + $carousel_prefix_classes + 'carousel__button__button">';
          if ($carousel_btn_next_img !== '') {
            next_button = next_button + '<img src="' + $carousel_btn_next_img + '" alt="' + $carousel_btn_next_textflat + '" class="carousel__button__img" />';
          } else {
            next_button = next_button + $carousel_btn_next_text;
          }
          next_button = next_button + '</button>';

          $(next_button).insertAfter($this_carousel_container);
        }

      });


      // check hash concerns carousel
      if (hash !== "") {
        if ($("#" + hash + ".carousel__content").length === 0) {
          hash = '';
        }
      }


      /* then check defaults ---------------------------------------------------------------------------------------------------------- */
      if (hash !== "" && $("#" + hash + ".carousel__content").length) {

        // display
        $("#" + hash + ".carousel__content").removeAttr("aria-hidden").removeClass('visibility-off');

        // selection menu
        $("#label_" + hash + ".js-carousel__control__list__link").attr({
          "aria-selected": "true",
          "tabindex": 0
        });

        $carousel_container.trigger('carousel:slide-changed');
        // update of carouselslide-x-x
        $carousel_container = $("#" + hash + ".carousel__content").parents(".carousel__container");


        // get .carouselslide-x-x
        var classes = $carousel_container.attr('class').split(' ');
        var found = false;
        var $previous_content;
        var $new_content;
        var i = 0;
        while (found === false && i < classes.length) {
          if (classes[i].substr(0, 14) === "carouselslide-") {
            $previous_content = classes[i];
            found = true;
          }
          i++;
        }

        var $index_tab = ($(".carousel__content").index($("#" + hash + ".carousel__content"))) + 1;
        var tab = $previous_content.split('-');
        $new_content = tab[0] + '-' + tab[1] + '-' + $index_tab;
        // replace .carouselslide-1-x by .carouselslide-1-$index_tab
        $carousel_container.removeClass($previous_content).addClass($new_content).trigger("NextSlide");


      }

      //var $carousels = $(".carousel");
      // active slide
      $(".carousel").each(function() {
        var $this = $(this),
          $carousel_container = $this.find('.carousel__container'),
          options = $carousel_container.data(),
          carousel_active_slide = Number(options.carouselActiveSlide) - 1 || 0,
          $control_list_links = $this.find('.js-carousel__control__list__link');

        // if there is an active slide, in a correct range and not already a valid hash for this carousel
        if (carousel_active_slide !== 0 && carousel_active_slide < $control_list_links.length && $this.find(".js-carousel__control__list__link[aria-selected=true]").length === 0) {
          var $control_list_link = $control_list_links.eq(carousel_active_slide),
            $content_linked = $('#' + $control_list_link.attr('aria-controls'));

          $control_list_links.eq(carousel_active_slide).attr({
            "aria-selected": "true",
            "tabindex": 0
          });

          $content_linked.removeAttr("aria-hidden").removeClass('visibility-off');

          // get .carouselslide-x-x
          var classes = $carousel_container.attr('class').split(' ');
          var found = false;
          var previous_content;
          var new_content;
          var i = 0;
          while (found === false && i < classes.length) {
            if (classes[i].substr(0, 14) === "carouselslide-") {
              previous_content = classes[i];
              found = true;
            }
            i++;
          }

          var tab = previous_content.split('-');
          new_content = tab[0] + '-' + tab[1] + '-' + (carousel_active_slide + 1);
          // replace .carouselslide-1-x by .carouselslide-1-$index_tab
          $carousel_container.removeClass(previous_content).addClass(new_content).trigger("NextSlide");

        }

      });

      // if no selected => select first
      $(".carousel").each(function() {
        var $this = $(this),
          $first_content = $this.find(".carousel__content:first");

        if ($this.find(".js-carousel__control__list__link[aria-selected=true]").length === 0) {
          $this.find(".js-carousel__control__list__link:first").attr({
            "aria-selected": "true",
            "tabindex": 0
          });
          $carousel_container.trigger('carousel:slide-changed');
          $first_content.removeAttr("aria-hidden").removeClass('visibility-off');

        }
      });


    }


    /* Events ---------------------------------------------------------------------------------------------------------- */
    /* click on a tab link */
    $body.on("click", ".js-carousel__control__list__link", function(event, additionnal) {
      /* eslint-disable indent */
      var $this = $(this),
        $parent = $this.parents(".carousel"),
        $tab_linked = $("#" + $this.attr("aria-controls")),
        $index_tab,
        $previous_content,
        $carousel_container = $parent.find(".carousel__container"),
        $carousel_hx = $carousel_container.attr('data-carousel-hx'),
        $carousel_existing_hx = $carousel_container.attr('data-carousel-existing-hx'),
        $carousel_hx_final = '';

      if (typeof $carousel_hx === "undefined" || $carousel_hx === "undefined" || $carousel_hx === "") {
        $carousel_hx = '';
      }
      if (typeof $carousel_existing_hx === "undefined" || $carousel_existing_hx === "undefined" && $carousel_existing_hx === "") {
        $carousel_existing_hx = '';
      }

      if ($carousel_existing_hx != '') {
        $carousel_hx_final = $carousel_existing_hx;
      } else {
        $carousel_hx_final = $carousel_hx;
      }


      $parent.find('.carousel__content').removeClass('visibility-off');

      // get .carousel-slide-1-x
      var classes = $carousel_container.attr('class').split(' ');
      var found = false;
      var i = 0;
      while (found === false && i < classes.length) {
        if (classes[i].substr(0, 14) === "carouselslide-") {
          $previous_content = classes[i];
          found = true;
        }
        i++;
      }

      // remove aria selected on all link
      $parent.find(".js-carousel__control__list__link").attr("aria-selected", "false").attr("tabindex", -1);
      // add aria selected on $this
      $this.attr({
        "aria-selected": "true",
        "tabindex": 0
      });
      $carousel_container.trigger('carousel:slide-changed');
      // add aria-hidden on all tabs
      $parent.find(".carousel__content").attr({
        "aria-hidden": "true"
      });

      // remove aria-hidden on tab linked
      $tab_linked.removeAttr("aria-hidden");

      // find index of clicked tab
      $index_tab = ($parent.find(".carousel__content").index($tab_linked)) + 1;
      var tab = $previous_content.split('-');
      $new_content = tab[0] + '-' + tab[1] + '-' + $index_tab;
      // replace .carouselslide-1-x by .carouselslide-1-$index_tab
      $parent.find(".carousel__container").removeClass($previous_content).addClass($new_content).trigger("NextSlide");

      // if coming from button next/prev, add focus to next/prev content
      if (additionnal == 'next' || additionnal == 'prev') {

        $parent.find(".carousel__container div").one(
          "webkitTransitionEnd MSTransitionEnd oTransitionEnd transitionend animationend webkitAnimationEnd oAnimationEnd oanimationend msAnimationEnd animationend",
          function() {
            $(this).data("transitioning", false); // Transition has ended.
            setTimeout(function() {
              $tab_linked.children($carousel_hx_final).focus();
            }, 0);
          }
        );

      }

      event.preventDefault();
    })
    /* eslint-enable indent */

    /* Key down in tabs */
      .on("keydown", ".carousel", function(event) {

        var $parent = $(this),
          $activated,
          $focus_on_tab_only = false;

        // some event should be activated only if the focus is on tabs (not on tabpanel)
        if ($(document.activeElement).is($parent.find('.js-carousel__control__list__link'))) {
          $focus_on_tab_only = true;
        }

        // catch keyboard event only if focus is on tab
        if ($focus_on_tab_only && !event.ctrlKey) {
          // strike up or left in the tab
          if (event.keyCode == 37 || event.keyCode == 38) {
            // find previous tab
            $activated = $parent.find('.js-carousel__control__list__link[aria-selected="true"]').parent();
            // if we are on first => activate last
            if ($activated.is(".js-carousel__control__list__item:first-child")) {
              $parent.find(".js-carousel__control__list__item:last-child a").click();
              setTimeout(function() {
                $parent.find(".js-carousel__control__list__item:last-child a").focus();
              }, 0);
            }
            // else activate previous
            else {
              $activated.prev().children(".js-carousel__control__list__link").click();
              setTimeout(function() {
                $activated.prev().children(".js-carousel__control__list__link").focus();
              }, 0);
            }
            event.preventDefault();
          }
          // strike down or right in the tab
          else if (event.keyCode == 40 || event.keyCode == 39) {
            // find next tab
            $activated = $parent.find('.js-carousel__control__list__link[aria-selected="true"]').parent();
            // if we are on last => activate first
            if ($activated.is(".js-carousel__control__list__item:last-child")) {
              $parent.find(".js-carousel__control__list__item:first-child a").click();
              setTimeout(function() {
                $parent.find(".js-carousel__control__list__item:first-child a").focus();
              }, 0);
            }
            // else activate next
            else {
              $activated.next().children(".js-carousel__control__list__link").click();
              setTimeout(function() {
                $activated.next().children(".js-carousel__control__list__link").focus();
              }, 0);
            }
            event.preventDefault();
          } else if (event.keyCode == 36) {
            // activate first tab
            $parent.find(".js-carousel__control__list__item:first-child a").click();
            setTimeout(function() {
              $parent.find(".js-carousel__control__list__item:first-child a").focus();
            }, 0);
            event.preventDefault();
          } else if (event.keyCode == 35) {
            // activate last tab
            $parent.find(".js-carousel__control__list__item:last-child a").click();
            setTimeout(function() {
              $parent.find(".js-carousel__control__list__item:last-child a").focus();
            }, 0);
            event.preventDefault();
          }

        }

      })
      .on("keydown", ".carousel__content", function(event) {

        var $this = $(this),
          $tab_to_focus,
          $parent;

        // CTRL up/Left
        if ((event.keyCode == 37 || event.keyCode == 38) && event.ctrlKey) {
          $tab_to_focus = $this.attr('aria-labelledby');
          setTimeout(function() {
            $("#" + $tab_to_focus).focus();
          }, 0);
          event.preventDefault();
        }
        // CTRL PageUp
        if (event.keyCode == 33 && event.ctrlKey) {
          var $tab_focused = $this.attr('aria-labelledby');
          setTimeout(function() {
            $("#" + $tab_focused).focus();
          }, 0);

          $parent = $("#" + $tab_focused).parent();

          // if we are on first => activate last
          if ($parent.is(".js-carousel__control__list__item:first-child")) {
            $parent.parent().find(".js-carousel__control__list__item:last-child a").click();
            setTimeout(function() {
              $parent.parent().find(".js-carousel__control__list__item:last-child a").focus();
            }, 0);
          }
          // else activate prev
          else {
            $parent.prev().children(".js-carousel__control__list__link").click();
            setTimeout(function() {
              $parent.prev().children(".js-carousel__control__list__link").focus();
            }, 0);
          }
          event.preventDefault();
        }
        // CTRL PageDown
        if (event.keyCode == 34 && event.ctrlKey) {
          $tab_focused = $this.attr('aria-labelledby');
          setTimeout(function() {
            $("#" + $tab_focused).focus();
          }, 0);

          $parent = $("#" + $tab_focused).parent();
          // if we are on last => activate first
          if ($parent.is(".js-carousel__control__list__item:last-child")) {
            $parent.parent().find(".js-carousel__control__list__item:first-child a").click();
            setTimeout(function() {
              $parent.parent().find(".js-carousel__control__list__item:first-child a").focus();
            }, 0);
          }
          // else activate next
          else {
            $parent.next().children(".js-carousel__control__list__link").click();
            setTimeout(function() {
              $parent.next().children(".js-carousel__control__list__link").focus();
            }, 0);
          }
          event.preventDefault();
        }

      });
    /* click on a button prev/next */
    // prev
    $body.on("click", ".js-carousel__button__previous button", function(event) {

      /* eslint-disable indent */
      event.preventDefault();

      var $this = $(this),
        $activated,
        $parent = $this.parents(".carousel");

      // find previous tab
      $activated = $parent.find('.js-carousel__control__list__link[aria-selected="true"]').parent();
      // if we are on first => activate last
      if ($activated.is(".js-carousel__control__list__item:first-child")) {
        $parent.find(".js-carousel__control__list__item:last-child a").trigger('click', 'prev');
      }
      // else activate previous
      else {
        $activated.prev().children(".js-carousel__control__list__link").trigger('click', 'prev');
      }


    })
    /* eslint-enable indent */

    // next
      .on("click", ".js-carousel__button__next button", function(event) {

        event.preventDefault();

        var $this = $(this),
          $activated,
          $parent = $this.parents(".carousel");

        // find next tab
        $activated = $parent.find('.js-carousel__control__list__link[aria-selected="true"]').parent();
        // if we are on last => activate first
        if ($activated.is(".js-carousel__control__list__item:last-child")) {
          $parent.find(".js-carousel__control__list__item:first-child a").trigger('click', 'next');
        }
        // else activate next
        else {
          $activated.next().children(".js-carousel__control__list__link").trigger('click', 'next');
        }

      });

    $carousel_container.trigger('carousel:initialized');
  });
}));

jQuery(document).ready(function($) {

  /*
   * jQuery simple and accessible hide-show system (collapsible regions), using ARIA
   * @version v1.5.1
   * Website: https://a11y.nicolas-hoffmann.net/hide-show/
   * License MIT: https://github.com/nico3333fr/jquery-accessible-hide-show-aria/blob/master/LICENSE
   */
  // loading expand paragraphs
  // these are recommended settings by a11y experts. You may update to fulfill your needs, but be sure of what you’re doing.
  var attr_control = 'aria-controls',
    attr_expanded = 'aria-expanded',
    attr_labelledby = 'data-labelledby',
    attr_hidden = 'data-hidden',
    $expandmore = $('.js-expandmore'),
    $body = $('body'),
    delay = 1500,
    hash = window.location.hash.replace("#", "");


  if ($expandmore.length) { // if there are at least one :)
    $expandmore.each(function(index_to_expand) {
      var $this = $(this),
        index_lisible = index_to_expand + 1,
        options = $this.data(),
        $hideshow_prefix_classes = typeof options.hideshowPrefixClass !== 'undefined' ? options.hideshowPrefixClass + '-' : '',
        $to_expand = $this.next(".js-to_expand"),
        $expandmore_text = $this.html();

      $this.html('<button type="button" class="' + $hideshow_prefix_classes + 'expandmore__button js-expandmore-button">' + $expandmore_text + '</button>');
      var $button = $this.children('.js-expandmore-button');

      $to_expand.addClass($hideshow_prefix_classes + 'expandmore__to_expand').stop().delay(delay).queue(function() {
        var $this = $(this);
        if ($this.hasClass('js-first_load')) {
          $this.removeClass('js-first_load');
        }
      });

      $button.attr('id', 'label_expand_' + index_lisible);
      $button.attr(attr_control, 'expand_' + index_lisible);
      $button.attr(attr_expanded, 'false');

      $to_expand.attr('id', 'expand_' + index_lisible);
      $to_expand.attr(attr_hidden, 'true');
      $to_expand.attr(attr_labelledby, 'label_expand_' + index_lisible);

      // quick tip to open (if it has class is-opened or if hash is in expand)
      if ($to_expand.hasClass('is-opened') || (hash !== "" && $to_expand.find($("#" + hash)).length)) {
        $button.addClass('is-opened').attr(attr_expanded, 'true');
        $to_expand.removeClass('is-opened').removeAttr(attr_hidden);
      }


    });


  }


  $body.on('click', '.js-expandmore-button', function(event) {
    var $this = $(this),
      $destination = $('#' + $this.attr(attr_control));

    if ($this.attr(attr_expanded) === 'false') {
      $this.addClass('is-opened').attr(attr_expanded, 'true');
      $destination.removeAttr(attr_hidden);
    } else {
      $this.removeClass('is-opened').attr(attr_expanded, 'false');
      $destination.attr(attr_hidden, 'true');
    }

    event.preventDefault();

  });

  $body.on('click keydown', '.js-expandmore', function(event) {
    var $this = $(this),
      $target = $(event.target),
      $button_in = $this.find('.js-expandmore-button');

    if (!$target.is($button_in) && !$target.closest($button_in).length) {

      if (event.type === 'click') {
        $button_in.trigger('click');
        return false;
      }
      if (event.type === 'keydown' && (event.keyCode === 13 || event.keyCode === 32)) {
        $button_in.trigger('click');
        return false;
      }

    }


  });


});

/*!
 * jQuery.scrollTo
 * Copyright (c) 2007-2015 Ariel Flesler - aflesler ○ gmail • com | http://flesler.blogspot.com
 * Licensed under MIT
 * http://flesler.blogspot.com/2007/10/jqueryscrollto.html
 * @projectDescription Lightweight, cross-browser and highly customizable animated scrolling with jQuery
 * @author Ariel Flesler
 * @version 2.1.2
 */
;(function(factory) {
	'use strict';
	if (typeof define === 'function' && define.amd) {
		// AMD
		define(['jquery'], factory);
	} else if (typeof module !== 'undefined' && module.exports) {
		// CommonJS
		module.exports = factory(require('jquery'));
	} else {
		// Global
		factory(jQuery);
	}
})(function($) {
	'use strict';

	var $scrollTo = $.scrollTo = function(target, duration, settings) {
		return $(window).scrollTo(target, duration, settings);
	};

	$scrollTo.defaults = {
		axis:'xy',
		duration: 0,
		limit:true
	};

	function isWin(elem) {
		return !elem.nodeName ||
			$.inArray(elem.nodeName.toLowerCase(), ['iframe','#document','html','body']) !== -1;
	}		

	$.fn.scrollTo = function(target, duration, settings) {
		if (typeof duration === 'object') {
			settings = duration;
			duration = 0;
		}
		if (typeof settings === 'function') {
			settings = { onAfter:settings };
		}
		if (target === 'max') {
			target = 9e9;
		}

		settings = $.extend({}, $scrollTo.defaults, settings);
		// Speed is still recognized for backwards compatibility
		duration = duration || settings.duration;
		// Make sure the settings are given right
		var queue = settings.queue && settings.axis.length > 1;
		if (queue) {
			// Let's keep the overall duration
			duration /= 2;
		}
		settings.offset = both(settings.offset);
		settings.over = both(settings.over);

		return this.each(function() {
			// Null target yields nothing, just like jQuery does
			if (target === null) return;

			var win = isWin(this),
				elem = win ? this.contentWindow || window : this,
				$elem = $(elem),
				targ = target, 
				attr = {},
				toff;

			switch (typeof targ) {
				// A number will pass the regex
				case 'number':
				case 'string':
					if (/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(targ)) {
						targ = both(targ);
						// We are done
						break;
					}
					// Relative/Absolute selector
					targ = win ? $(targ) : $(targ, elem);
					/* falls through */
				case 'object':
					if (targ.length === 0) return;
					// DOMElement / jQuery
					if (targ.is || targ.style) {
						// Get the real position of the target
						toff = (targ = $(targ)).offset();
					}
			}

			var offset = $.isFunction(settings.offset) && settings.offset(elem, targ) || settings.offset;

			$.each(settings.axis.split(''), function(i, axis) {
				var Pos	= axis === 'x' ? 'Left' : 'Top',
					pos = Pos.toLowerCase(),
					key = 'scroll' + Pos,
					prev = $elem[key](),
					max = $scrollTo.max(elem, axis);

				if (toff) {// jQuery / DOMElement
					attr[key] = toff[pos] + (win ? 0 : prev - $elem.offset()[pos]);

					// If it's a dom element, reduce the margin
					if (settings.margin) {
						attr[key] -= parseInt(targ.css('margin'+Pos), 10) || 0;
						attr[key] -= parseInt(targ.css('border'+Pos+'Width'), 10) || 0;
					}

					attr[key] += offset[pos] || 0;

					if (settings.over[pos]) {
						// Scroll to a fraction of its width/height
						attr[key] += targ[axis === 'x'?'width':'height']() * settings.over[pos];
					}
				} else {
					var val = targ[pos];
					// Handle percentage values
					attr[key] = val.slice && val.slice(-1) === '%' ?
						parseFloat(val) / 100 * max
						: val;
				}

				// Number or 'number'
				if (settings.limit && /^\d+$/.test(attr[key])) {
					// Check the limits
					attr[key] = attr[key] <= 0 ? 0 : Math.min(attr[key], max);
				}

				// Don't waste time animating, if there's no need.
				if (!i && settings.axis.length > 1) {
					if (prev === attr[key]) {
						// No animation needed
						attr = {};
					} else if (queue) {
						// Intermediate animation
						animate(settings.onAfterFirst);
						// Don't animate this axis again in the next iteration.
						attr = {};
					}
				}
			});

			animate(settings.onAfter);

			function animate(callback) {
				var opts = $.extend({}, settings, {
					// The queue setting conflicts with animate()
					// Force it to always be true
					queue: true,
					duration: duration,
					complete: callback && function() {
						callback.call(elem, targ, settings);
					}
				});
				$elem.animate(attr, opts);
			}
		});
	};

	// Max scrolling position, works on quirks mode
	// It only fails (not too badly) on IE, quirks mode.
	$scrollTo.max = function(elem, axis) {
		var Dim = axis === 'x' ? 'Width' : 'Height',
			scroll = 'scroll'+Dim;

		if (!isWin(elem))
			return elem[scroll] - $(elem)[Dim.toLowerCase()]();

		var size = 'client' + Dim,
			doc = elem.ownerDocument || elem.document,
			html = doc.documentElement,
			body = doc.body;

		return Math.max(html[scroll], body[scroll]) - Math.min(html[size], body[size]);
	};

	function both(val) {
		return $.isFunction(val) || $.isPlainObject(val) ? val : { top:val, left:val };
	}

	// Add special hooks so that window scroll properties can be animated
	$.Tween.propHooks.scrollLeft = 
	$.Tween.propHooks.scrollTop = {
		get: function(t) {
			return $(t.elem)[t.prop]();
		},
		set: function(t) {
			var curr = this.get(t);
			// If interrupt is true and user scrolled, stop animating
			if (t.options.interrupt && t._last && t._last !== curr) {
				return $(t.elem).stop();
			}
			var next = Math.round(t.now);
			// Don't waste CPU
			// Browsers don't render floating point scroll
			if (curr !== next) {
				$(t.elem)[t.prop](next);
				t._last = this.get(t);
			}
		}
	};

	// AMD requirement
	return $scrollTo;
});

(function(a){a.isScrollToFixed=function(b){return !!a(b).data("ScrollToFixed")};a.ScrollToFixed=function(d,i){var m=this;m.$el=a(d);m.el=d;m.$el.data("ScrollToFixed",m);var c=false;var H=m.$el;var I;var F;var k;var e;var z;var E=0;var r=0;var j=-1;var f=-1;var u=null;var A;var g;function v(){H.trigger("preUnfixed.ScrollToFixed");l();H.trigger("unfixed.ScrollToFixed");f=-1;E=H.offset().top;r=H.offset().left;if(m.options.offsets){r+=(H.offset().left-H.position().left)}if(j==-1){j=r}I=H.css("position");c=true;if(m.options.bottom!=-1){H.trigger("preFixed.ScrollToFixed");x();H.trigger("fixed.ScrollToFixed")}}function o(){var J=m.options.limit;if(!J){return 0}if(typeof(J)==="function"){return J.apply(H)}return J}function q(){return I==="fixed"}function y(){return I==="absolute"}function h(){return !(q()||y())}function x(){if(!q()){var J=H[0].getBoundingClientRect();u.css({display:H.css("display"),width:J.width,height:J.height,"float":H.css("float")});cssOptions={"z-index":m.options.zIndex,position:"fixed",top:m.options.bottom==-1?t():"",bottom:m.options.bottom==-1?"":m.options.bottom,"margin-left":"0px"};if(!m.options.dontSetWidth){cssOptions.width=H.css("width")}H.css(cssOptions);H.addClass(m.options.baseClassName);if(m.options.className){H.addClass(m.options.className)}I="fixed"}}function b(){var K=o();var J=r;if(m.options.removeOffsets){J="";K=K-E}cssOptions={position:"absolute",top:K,left:J,"margin-left":"0px",bottom:""};if(!m.options.dontSetWidth){cssOptions.width=H.css("width")}H.css(cssOptions);I="absolute"}function l(){if(!h()){f=-1;u.css("display","none");H.css({"z-index":z,width:"",position:F,left:"",top:e,"margin-left":""});H.removeClass("scroll-to-fixed-fixed");if(m.options.className){H.removeClass(m.options.className)}I=null}}function w(J){if(J!=f){H.css("left",r-J);f=J}}function t(){var J=m.options.marginTop;if(!J){return 0}if(typeof(J)==="function"){return J.apply(H)}return J}function B(){if(!a.isScrollToFixed(H)||H.is(":hidden")){return}var M=c;var L=h();if(!c){v()}else{if(h()){E=H.offset().top;r=H.offset().left}}var J=a(window).scrollLeft();var N=a(window).scrollTop();var K=o();if(m.options.minWidth&&a(window).width()<m.options.minWidth){if(!h()||!M){p();H.trigger("preUnfixed.ScrollToFixed");l();H.trigger("unfixed.ScrollToFixed")}}else{if(m.options.maxWidth&&a(window).width()>m.options.maxWidth){if(!h()||!M){p();H.trigger("preUnfixed.ScrollToFixed");l();H.trigger("unfixed.ScrollToFixed")}}else{if(m.options.bottom==-1){if(K>0&&N>=K-t()){if(!L&&(!y()||!M)){p();H.trigger("preAbsolute.ScrollToFixed");b();H.trigger("unfixed.ScrollToFixed")}}else{if(N>=E-t()){if(!q()||!M){p();H.trigger("preFixed.ScrollToFixed");x();f=-1;H.trigger("fixed.ScrollToFixed")}w(J)}else{if(!h()||!M){p();H.trigger("preUnfixed.ScrollToFixed");l();H.trigger("unfixed.ScrollToFixed")}}}}else{if(K>0){if(N+a(window).height()-H.outerHeight(true)>=K-(t()||-n())){if(q()){p();H.trigger("preUnfixed.ScrollToFixed");if(F==="absolute"){b()}else{l()}H.trigger("unfixed.ScrollToFixed")}}else{if(!q()){p();H.trigger("preFixed.ScrollToFixed");x()}w(J);H.trigger("fixed.ScrollToFixed")}}else{w(J)}}}}}function n(){if(!m.options.bottom){return 0}return m.options.bottom}function p(){var J=H.css("position");if(J=="absolute"){H.trigger("postAbsolute.ScrollToFixed")}else{if(J=="fixed"){H.trigger("postFixed.ScrollToFixed")}else{H.trigger("postUnfixed.ScrollToFixed")}}}var D=function(J){if(H.is(":visible")){c=false;B()}else{l()}};var G=function(J){(!!window.requestAnimationFrame)?requestAnimationFrame(B):B()};var C=function(){var K=document.body;if(document.createElement&&K&&K.appendChild&&K.removeChild){var M=document.createElement("div");if(!M.getBoundingClientRect){return null}M.innerHTML="x";M.style.cssText="position:fixed;top:100px;";K.appendChild(M);var N=K.style.height,O=K.scrollTop;K.style.height="3000px";K.scrollTop=500;var J=M.getBoundingClientRect().top;K.style.height=N;var L=(J===100);K.removeChild(M);K.scrollTop=O;return L}return null};var s=function(J){J=J||window.event;if(J.preventDefault){J.preventDefault()}J.returnValue=false};m.init=function(){m.options=a.extend({},a.ScrollToFixed.defaultOptions,i);z=H.css("z-index");m.$el.css("z-index",m.options.zIndex);u=a("<div />");I=H.css("position");F=H.css("position");k=H.css("float");e=H.css("top");if(h()){m.$el.after(u)}a(window).bind("resize.ScrollToFixed",D);a(window).bind("scroll.ScrollToFixed",G);if("ontouchmove" in window){a(window).bind("touchmove.ScrollToFixed",B)}if(m.options.preFixed){H.bind("preFixed.ScrollToFixed",m.options.preFixed)}if(m.options.postFixed){H.bind("postFixed.ScrollToFixed",m.options.postFixed)}if(m.options.preUnfixed){H.bind("preUnfixed.ScrollToFixed",m.options.preUnfixed)}if(m.options.postUnfixed){H.bind("postUnfixed.ScrollToFixed",m.options.postUnfixed)}if(m.options.preAbsolute){H.bind("preAbsolute.ScrollToFixed",m.options.preAbsolute)}if(m.options.postAbsolute){H.bind("postAbsolute.ScrollToFixed",m.options.postAbsolute)}if(m.options.fixed){H.bind("fixed.ScrollToFixed",m.options.fixed)}if(m.options.unfixed){H.bind("unfixed.ScrollToFixed",m.options.unfixed)}if(m.options.spacerClass){u.addClass(m.options.spacerClass)}H.bind("resize.ScrollToFixed",function(){u.height(H.height())});H.bind("scroll.ScrollToFixed",function(){H.trigger("preUnfixed.ScrollToFixed");l();H.trigger("unfixed.ScrollToFixed");B()});H.bind("detach.ScrollToFixed",function(J){s(J);H.trigger("preUnfixed.ScrollToFixed");l();H.trigger("unfixed.ScrollToFixed");a(window).unbind("resize.ScrollToFixed",D);a(window).unbind("scroll.ScrollToFixed",G);H.unbind(".ScrollToFixed");u.remove();m.$el.removeData("ScrollToFixed")});D()};m.init()};a.ScrollToFixed.defaultOptions={marginTop:0,limit:0,bottom:-1,zIndex:1000,baseClassName:"scroll-to-fixed-fixed"};a.fn.scrollToFixed=function(b){return this.each(function(){(new a.ScrollToFixed(this,b))})}})(jQuery);
/*!
 * @fileOverview TouchSwipe - jQuery Plugin
 * @version 1.6.18
 *
 * @author Matt Bryson http://www.github.com/mattbryson
 * @see https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
 * @see http://labs.rampinteractive.co.uk/touchSwipe/
 * @see http://plugins.jquery.com/project/touchSwipe
 * @license
 * Copyright (c) 2010-2015 Matt Bryson
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 */
!function(factory){"function"==typeof define&&define.amd&&define.amd.jQuery?define(["jquery"],factory):factory("undefined"!=typeof module&&module.exports?require("jquery"):jQuery)}(function($){"use strict";function init(options){return!options||void 0!==options.allowPageScroll||void 0===options.swipe&&void 0===options.swipeStatus||(options.allowPageScroll=NONE),void 0!==options.click&&void 0===options.tap&&(options.tap=options.click),options||(options={}),options=$.extend({},$.fn.swipe.defaults,options),this.each(function(){var $this=$(this),plugin=$this.data(PLUGIN_NS);plugin||(plugin=new TouchSwipe(this,options),$this.data(PLUGIN_NS,plugin))})}function TouchSwipe(element,options){function touchStart(jqEvent){if(!(getTouchInProgress()||$(jqEvent.target).closest(options.excludedElements,$element).length>0)){var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent;if(!event.pointerType||"mouse"!=event.pointerType||0!=options.fallbackToMouseEvents){var ret,touches=event.touches,evt=touches?touches[0]:event;return phase=PHASE_START,touches?fingerCount=touches.length:options.preventDefaultEvents!==!1&&jqEvent.preventDefault(),distance=0,direction=null,currentDirection=null,pinchDirection=null,duration=0,startTouchesDistance=0,endTouchesDistance=0,pinchZoom=1,pinchDistance=0,maximumsMap=createMaximumsData(),cancelMultiFingerRelease(),createFingerData(0,evt),!touches||fingerCount===options.fingers||options.fingers===ALL_FINGERS||hasPinches()?(startTime=getTimeStamp(),2==fingerCount&&(createFingerData(1,touches[1]),startTouchesDistance=endTouchesDistance=calculateTouchesDistance(fingerData[0].start,fingerData[1].start)),(options.swipeStatus||options.pinchStatus)&&(ret=triggerHandler(event,phase))):ret=!1,ret===!1?(phase=PHASE_CANCEL,triggerHandler(event,phase),ret):(options.hold&&(holdTimeout=setTimeout($.proxy(function(){$element.trigger("hold",[event.target]),options.hold&&(ret=options.hold.call($element,event,event.target))},this),options.longTapThreshold)),setTouchInProgress(!0),null)}}}function touchMove(jqEvent){var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent;if(phase!==PHASE_END&&phase!==PHASE_CANCEL&&!inMultiFingerRelease()){var ret,touches=event.touches,evt=touches?touches[0]:event,currentFinger=updateFingerData(evt);if(endTime=getTimeStamp(),touches&&(fingerCount=touches.length),options.hold&&clearTimeout(holdTimeout),phase=PHASE_MOVE,2==fingerCount&&(0==startTouchesDistance?(createFingerData(1,touches[1]),startTouchesDistance=endTouchesDistance=calculateTouchesDistance(fingerData[0].start,fingerData[1].start)):(updateFingerData(touches[1]),endTouchesDistance=calculateTouchesDistance(fingerData[0].end,fingerData[1].end),pinchDirection=calculatePinchDirection(fingerData[0].end,fingerData[1].end)),pinchZoom=calculatePinchZoom(startTouchesDistance,endTouchesDistance),pinchDistance=Math.abs(startTouchesDistance-endTouchesDistance)),fingerCount===options.fingers||options.fingers===ALL_FINGERS||!touches||hasPinches()){if(direction=calculateDirection(currentFinger.start,currentFinger.end),currentDirection=calculateDirection(currentFinger.last,currentFinger.end),validateDefaultEvent(jqEvent,currentDirection),distance=calculateDistance(currentFinger.start,currentFinger.end),duration=calculateDuration(),setMaxDistance(direction,distance),ret=triggerHandler(event,phase),!options.triggerOnTouchEnd||options.triggerOnTouchLeave){var inBounds=!0;if(options.triggerOnTouchLeave){var bounds=getbounds(this);inBounds=isInBounds(currentFinger.end,bounds)}!options.triggerOnTouchEnd&&inBounds?phase=getNextPhase(PHASE_MOVE):options.triggerOnTouchLeave&&!inBounds&&(phase=getNextPhase(PHASE_END)),phase!=PHASE_CANCEL&&phase!=PHASE_END||triggerHandler(event,phase)}}else phase=PHASE_CANCEL,triggerHandler(event,phase);ret===!1&&(phase=PHASE_CANCEL,triggerHandler(event,phase))}}function touchEnd(jqEvent){var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent,touches=event.touches;if(touches){if(touches.length&&!inMultiFingerRelease())return startMultiFingerRelease(event),!0;if(touches.length&&inMultiFingerRelease())return!0}return inMultiFingerRelease()&&(fingerCount=fingerCountAtRelease),endTime=getTimeStamp(),duration=calculateDuration(),didSwipeBackToCancel()||!validateSwipeDistance()?(phase=PHASE_CANCEL,triggerHandler(event,phase)):options.triggerOnTouchEnd||options.triggerOnTouchEnd===!1&&phase===PHASE_MOVE?(options.preventDefaultEvents!==!1&&jqEvent.cancelable!==!1&&jqEvent.preventDefault(),phase=PHASE_END,triggerHandler(event,phase)):!options.triggerOnTouchEnd&&hasTap()?(phase=PHASE_END,triggerHandlerForGesture(event,phase,TAP)):phase===PHASE_MOVE&&(phase=PHASE_CANCEL,triggerHandler(event,phase)),setTouchInProgress(!1),null}function touchCancel(){fingerCount=0,endTime=0,startTime=0,startTouchesDistance=0,endTouchesDistance=0,pinchZoom=1,cancelMultiFingerRelease(),setTouchInProgress(!1)}function touchLeave(jqEvent){var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent;options.triggerOnTouchLeave&&(phase=getNextPhase(PHASE_END),triggerHandler(event,phase))}function removeListeners(){$element.unbind(START_EV,touchStart),$element.unbind(CANCEL_EV,touchCancel),$element.unbind(MOVE_EV,touchMove),$element.unbind(END_EV,touchEnd),LEAVE_EV&&$element.unbind(LEAVE_EV,touchLeave),setTouchInProgress(!1)}function getNextPhase(currentPhase){var nextPhase=currentPhase,validTime=validateSwipeTime(),validDistance=validateSwipeDistance(),didCancel=didSwipeBackToCancel();return!validTime||didCancel?nextPhase=PHASE_CANCEL:!validDistance||currentPhase!=PHASE_MOVE||options.triggerOnTouchEnd&&!options.triggerOnTouchLeave?!validDistance&&currentPhase==PHASE_END&&options.triggerOnTouchLeave&&(nextPhase=PHASE_CANCEL):nextPhase=PHASE_END,nextPhase}function triggerHandler(event,phase){var ret,touches=event.touches;return(didSwipe()||hasSwipes())&&(ret=triggerHandlerForGesture(event,phase,SWIPE)),(didPinch()||hasPinches())&&ret!==!1&&(ret=triggerHandlerForGesture(event,phase,PINCH)),didDoubleTap()&&ret!==!1?ret=triggerHandlerForGesture(event,phase,DOUBLE_TAP):didLongTap()&&ret!==!1?ret=triggerHandlerForGesture(event,phase,LONG_TAP):didTap()&&ret!==!1&&(ret=triggerHandlerForGesture(event,phase,TAP)),phase===PHASE_CANCEL&&touchCancel(event),phase===PHASE_END&&(touches?touches.length||touchCancel(event):touchCancel(event)),ret}function triggerHandlerForGesture(event,phase,gesture){var ret;if(gesture==SWIPE){if($element.trigger("swipeStatus",[phase,direction||null,distance||0,duration||0,fingerCount,fingerData,currentDirection]),options.swipeStatus&&(ret=options.swipeStatus.call($element,event,phase,direction||null,distance||0,duration||0,fingerCount,fingerData,currentDirection),ret===!1))return!1;if(phase==PHASE_END&&validateSwipe()){if(clearTimeout(singleTapTimeout),clearTimeout(holdTimeout),$element.trigger("swipe",[direction,distance,duration,fingerCount,fingerData,currentDirection]),options.swipe&&(ret=options.swipe.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection),ret===!1))return!1;switch(direction){case LEFT:$element.trigger("swipeLeft",[direction,distance,duration,fingerCount,fingerData,currentDirection]),options.swipeLeft&&(ret=options.swipeLeft.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection));break;case RIGHT:$element.trigger("swipeRight",[direction,distance,duration,fingerCount,fingerData,currentDirection]),options.swipeRight&&(ret=options.swipeRight.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection));break;case UP:$element.trigger("swipeUp",[direction,distance,duration,fingerCount,fingerData,currentDirection]),options.swipeUp&&(ret=options.swipeUp.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection));break;case DOWN:$element.trigger("swipeDown",[direction,distance,duration,fingerCount,fingerData,currentDirection]),options.swipeDown&&(ret=options.swipeDown.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection))}}}if(gesture==PINCH){if($element.trigger("pinchStatus",[phase,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData]),options.pinchStatus&&(ret=options.pinchStatus.call($element,event,phase,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData),ret===!1))return!1;if(phase==PHASE_END&&validatePinch())switch(pinchDirection){case IN:$element.trigger("pinchIn",[pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData]),options.pinchIn&&(ret=options.pinchIn.call($element,event,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData));break;case OUT:$element.trigger("pinchOut",[pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData]),options.pinchOut&&(ret=options.pinchOut.call($element,event,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData))}}return gesture==TAP?phase!==PHASE_CANCEL&&phase!==PHASE_END||(clearTimeout(singleTapTimeout),clearTimeout(holdTimeout),hasDoubleTap()&&!inDoubleTap()?(doubleTapStartTime=getTimeStamp(),singleTapTimeout=setTimeout($.proxy(function(){doubleTapStartTime=null,$element.trigger("tap",[event.target]),options.tap&&(ret=options.tap.call($element,event,event.target))},this),options.doubleTapThreshold)):(doubleTapStartTime=null,$element.trigger("tap",[event.target]),options.tap&&(ret=options.tap.call($element,event,event.target)))):gesture==DOUBLE_TAP?phase!==PHASE_CANCEL&&phase!==PHASE_END||(clearTimeout(singleTapTimeout),clearTimeout(holdTimeout),doubleTapStartTime=null,$element.trigger("doubletap",[event.target]),options.doubleTap&&(ret=options.doubleTap.call($element,event,event.target))):gesture==LONG_TAP&&(phase!==PHASE_CANCEL&&phase!==PHASE_END||(clearTimeout(singleTapTimeout),doubleTapStartTime=null,$element.trigger("longtap",[event.target]),options.longTap&&(ret=options.longTap.call($element,event,event.target)))),ret}function validateSwipeDistance(){var valid=!0;return null!==options.threshold&&(valid=distance>=options.threshold),valid}function didSwipeBackToCancel(){var cancelled=!1;return null!==options.cancelThreshold&&null!==direction&&(cancelled=getMaxDistance(direction)-distance>=options.cancelThreshold),cancelled}function validatePinchDistance(){return null===options.pinchThreshold||pinchDistance>=options.pinchThreshold}function validateSwipeTime(){var result;return result=!options.maxTimeThreshold||!(duration>=options.maxTimeThreshold)}function validateDefaultEvent(jqEvent,direction){if(options.preventDefaultEvents!==!1)if(options.allowPageScroll===NONE)jqEvent.preventDefault();else{var auto=options.allowPageScroll===AUTO;switch(direction){case LEFT:(options.swipeLeft&&auto||!auto&&options.allowPageScroll!=HORIZONTAL)&&jqEvent.preventDefault();break;case RIGHT:(options.swipeRight&&auto||!auto&&options.allowPageScroll!=HORIZONTAL)&&jqEvent.preventDefault();break;case UP:(options.swipeUp&&auto||!auto&&options.allowPageScroll!=VERTICAL)&&jqEvent.preventDefault();break;case DOWN:(options.swipeDown&&auto||!auto&&options.allowPageScroll!=VERTICAL)&&jqEvent.preventDefault();break;case NONE:}}}function validatePinch(){var hasCorrectFingerCount=validateFingers(),hasEndPoint=validateEndPoint(),hasCorrectDistance=validatePinchDistance();return hasCorrectFingerCount&&hasEndPoint&&hasCorrectDistance}function hasPinches(){return!!(options.pinchStatus||options.pinchIn||options.pinchOut)}function didPinch(){return!(!validatePinch()||!hasPinches())}function validateSwipe(){var hasValidTime=validateSwipeTime(),hasValidDistance=validateSwipeDistance(),hasCorrectFingerCount=validateFingers(),hasEndPoint=validateEndPoint(),didCancel=didSwipeBackToCancel(),valid=!didCancel&&hasEndPoint&&hasCorrectFingerCount&&hasValidDistance&&hasValidTime;return valid}function hasSwipes(){return!!(options.swipe||options.swipeStatus||options.swipeLeft||options.swipeRight||options.swipeUp||options.swipeDown)}function didSwipe(){return!(!validateSwipe()||!hasSwipes())}function validateFingers(){return fingerCount===options.fingers||options.fingers===ALL_FINGERS||!SUPPORTS_TOUCH}function validateEndPoint(){return 0!==fingerData[0].end.x}function hasTap(){return!!options.tap}function hasDoubleTap(){return!!options.doubleTap}function hasLongTap(){return!!options.longTap}function validateDoubleTap(){if(null==doubleTapStartTime)return!1;var now=getTimeStamp();return hasDoubleTap()&&now-doubleTapStartTime<=options.doubleTapThreshold}function inDoubleTap(){return validateDoubleTap()}function validateTap(){return(1===fingerCount||!SUPPORTS_TOUCH)&&(isNaN(distance)||distance<options.threshold)}function validateLongTap(){return duration>options.longTapThreshold&&distance<DOUBLE_TAP_THRESHOLD}function didTap(){return!(!validateTap()||!hasTap())}function didDoubleTap(){return!(!validateDoubleTap()||!hasDoubleTap())}function didLongTap(){return!(!validateLongTap()||!hasLongTap())}function startMultiFingerRelease(event){previousTouchEndTime=getTimeStamp(),fingerCountAtRelease=event.touches.length+1}function cancelMultiFingerRelease(){previousTouchEndTime=0,fingerCountAtRelease=0}function inMultiFingerRelease(){var withinThreshold=!1;if(previousTouchEndTime){var diff=getTimeStamp()-previousTouchEndTime;diff<=options.fingerReleaseThreshold&&(withinThreshold=!0)}return withinThreshold}function getTouchInProgress(){return!($element.data(PLUGIN_NS+"_intouch")!==!0)}function setTouchInProgress(val){$element&&(val===!0?($element.bind(MOVE_EV,touchMove),$element.bind(END_EV,touchEnd),LEAVE_EV&&$element.bind(LEAVE_EV,touchLeave)):($element.unbind(MOVE_EV,touchMove,!1),$element.unbind(END_EV,touchEnd,!1),LEAVE_EV&&$element.unbind(LEAVE_EV,touchLeave,!1)),$element.data(PLUGIN_NS+"_intouch",val===!0))}function createFingerData(id,evt){var f={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return f.start.x=f.last.x=f.end.x=evt.pageX||evt.clientX,f.start.y=f.last.y=f.end.y=evt.pageY||evt.clientY,fingerData[id]=f,f}function updateFingerData(evt){var id=void 0!==evt.identifier?evt.identifier:0,f=getFingerData(id);return null===f&&(f=createFingerData(id,evt)),f.last.x=f.end.x,f.last.y=f.end.y,f.end.x=evt.pageX||evt.clientX,f.end.y=evt.pageY||evt.clientY,f}function getFingerData(id){return fingerData[id]||null}function setMaxDistance(direction,distance){direction!=NONE&&(distance=Math.max(distance,getMaxDistance(direction)),maximumsMap[direction].distance=distance)}function getMaxDistance(direction){if(maximumsMap[direction])return maximumsMap[direction].distance}function createMaximumsData(){var maxData={};return maxData[LEFT]=createMaximumVO(LEFT),maxData[RIGHT]=createMaximumVO(RIGHT),maxData[UP]=createMaximumVO(UP),maxData[DOWN]=createMaximumVO(DOWN),maxData}function createMaximumVO(dir){return{direction:dir,distance:0}}function calculateDuration(){return endTime-startTime}function calculateTouchesDistance(startPoint,endPoint){var diffX=Math.abs(startPoint.x-endPoint.x),diffY=Math.abs(startPoint.y-endPoint.y);return Math.round(Math.sqrt(diffX*diffX+diffY*diffY))}function calculatePinchZoom(startDistance,endDistance){var percent=endDistance/startDistance*1;return percent.toFixed(2)}function calculatePinchDirection(){return pinchZoom<1?OUT:IN}function calculateDistance(startPoint,endPoint){return Math.round(Math.sqrt(Math.pow(endPoint.x-startPoint.x,2)+Math.pow(endPoint.y-startPoint.y,2)))}function calculateAngle(startPoint,endPoint){var x=startPoint.x-endPoint.x,y=endPoint.y-startPoint.y,r=Math.atan2(y,x),angle=Math.round(180*r/Math.PI);return angle<0&&(angle=360-Math.abs(angle)),angle}function calculateDirection(startPoint,endPoint){if(comparePoints(startPoint,endPoint))return NONE;var angle=calculateAngle(startPoint,endPoint);return angle<=45&&angle>=0?LEFT:angle<=360&&angle>=315?LEFT:angle>=135&&angle<=225?RIGHT:angle>45&&angle<135?DOWN:UP}function getTimeStamp(){var now=new Date;return now.getTime()}function getbounds(el){el=$(el);var offset=el.offset(),bounds={left:offset.left,right:offset.left+el.outerWidth(),top:offset.top,bottom:offset.top+el.outerHeight()};return bounds}function isInBounds(point,bounds){return point.x>bounds.left&&point.x<bounds.right&&point.y>bounds.top&&point.y<bounds.bottom}function comparePoints(pointA,pointB){return pointA.x==pointB.x&&pointA.y==pointB.y}var options=$.extend({},options),useTouchEvents=SUPPORTS_TOUCH||SUPPORTS_POINTER||!options.fallbackToMouseEvents,START_EV=useTouchEvents?SUPPORTS_POINTER?SUPPORTS_POINTER_IE10?"MSPointerDown":"pointerdown":"touchstart":"mousedown",MOVE_EV=useTouchEvents?SUPPORTS_POINTER?SUPPORTS_POINTER_IE10?"MSPointerMove":"pointermove":"touchmove":"mousemove",END_EV=useTouchEvents?SUPPORTS_POINTER?SUPPORTS_POINTER_IE10?"MSPointerUp":"pointerup":"touchend":"mouseup",LEAVE_EV=useTouchEvents?SUPPORTS_POINTER?"mouseleave":null:"mouseleave",CANCEL_EV=SUPPORTS_POINTER?SUPPORTS_POINTER_IE10?"MSPointerCancel":"pointercancel":"touchcancel",distance=0,direction=null,currentDirection=null,duration=0,startTouchesDistance=0,endTouchesDistance=0,pinchZoom=1,pinchDistance=0,pinchDirection=0,maximumsMap=null,$element=$(element),phase="start",fingerCount=0,fingerData={},startTime=0,endTime=0,previousTouchEndTime=0,fingerCountAtRelease=0,doubleTapStartTime=0,singleTapTimeout=null,holdTimeout=null;try{$element.bind(START_EV,touchStart),$element.bind(CANCEL_EV,touchCancel)}catch(e){$.error("events not supported "+START_EV+","+CANCEL_EV+" on jQuery.swipe")}this.enable=function(){return this.disable(),$element.bind(START_EV,touchStart),$element.bind(CANCEL_EV,touchCancel),$element},this.disable=function(){return removeListeners(),$element},this.destroy=function(){removeListeners(),$element.data(PLUGIN_NS,null),$element=null},this.option=function(property,value){if("object"==typeof property)options=$.extend(options,property);else if(void 0!==options[property]){if(void 0===value)return options[property];options[property]=value}else{if(!property)return options;$.error("Option "+property+" does not exist on jQuery.swipe.options")}return null}}var VERSION="1.6.18",LEFT="left",RIGHT="right",UP="up",DOWN="down",IN="in",OUT="out",NONE="none",AUTO="auto",SWIPE="swipe",PINCH="pinch",TAP="tap",DOUBLE_TAP="doubletap",LONG_TAP="longtap",HORIZONTAL="horizontal",VERTICAL="vertical",ALL_FINGERS="all",DOUBLE_TAP_THRESHOLD=10,PHASE_START="start",PHASE_MOVE="move",PHASE_END="end",PHASE_CANCEL="cancel",SUPPORTS_TOUCH="ontouchstart"in window,SUPPORTS_POINTER_IE10=window.navigator.msPointerEnabled&&!window.navigator.pointerEnabled&&!SUPPORTS_TOUCH,SUPPORTS_POINTER=(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&!SUPPORTS_TOUCH,PLUGIN_NS="TouchSwipe",defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0};$.fn.swipe=function(method){var $this=$(this),plugin=$this.data(PLUGIN_NS);if(plugin&&"string"==typeof method){if(plugin[method])return plugin[method].apply(plugin,Array.prototype.slice.call(arguments,1));$.error("Method "+method+" does not exist on jQuery.swipe")}else if(plugin&&"object"==typeof method)plugin.option.apply(plugin,arguments);else if(!(plugin||"object"!=typeof method&&method))return init.apply(this,arguments);return $this},$.fn.swipe.version=VERSION,$.fn.swipe.defaults=defaults,$.fn.swipe.phases={PHASE_START:PHASE_START,PHASE_MOVE:PHASE_MOVE,PHASE_END:PHASE_END,PHASE_CANCEL:PHASE_CANCEL},$.fn.swipe.directions={LEFT:LEFT,RIGHT:RIGHT,UP:UP,DOWN:DOWN,IN:IN,OUT:OUT},$.fn.swipe.pageScroll={NONE:NONE,HORIZONTAL:HORIZONTAL,VERTICAL:VERTICAL,AUTO:AUTO},$.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:ALL_FINGERS}});
/**
 * File skip-link-focus-fix.js.
 *
 * Helps with accessibility for keyboard only users.
 *
 * Source: https://github.com/Automattic/_s/blob/master/js/skip-link-focus-fix.js
 *
 * Learn more: https://git.io/vWdr2
 */
(function() {
	var isIe = /(trident|msie)/i.test( navigator.userAgent );

	if ( isIe && document.getElementById && window.addEventListener ) {
		window.addEventListener( 'hashchange', function() {
			var id = location.hash.substring( 1 ),
				element;

			if ( ! ( /^[A-z0-9_-]+$/.test( id ) ) ) {
				return;
			}

			element = document.getElementById( id );

			if ( element ) {
				if ( ! ( /^(?:a|select|input|button|textarea)$/i.test( element.tagName ) ) ) {
					element.tabIndex = -1;
				}

				element.focus();
			}
		}, false );
	}
})();
;
/*!
 * jQuery Form Plugin
 * version: 4.2.2
 * Requires jQuery v1.7.2 or later
 * Project repository: https://github.com/jquery-form/form

 * Copyright 2017 Kevin Morris
 * Copyright 2006 M. Alsup

 * Dual licensed under the LGPL-2.1+ or MIT licenses
 * https://github.com/jquery-form/form#license

 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 */
!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&module.exports?module.exports=function(t,r){return void 0===r&&(r="undefined"!=typeof window?require("jquery"):require("jquery")(t)),e(r),r}:e(jQuery)}(function(e){"use strict";function t(t){var r=t.data;t.isDefaultPrevented()||(t.preventDefault(),e(t.target).closest("form").ajaxSubmit(r))}function r(t){var r=t.target,a=e(r);if(!a.is("[type=submit],[type=image]")){var n=a.closest("[type=submit]");if(0===n.length)return;r=n[0]}var i=r.form;if(i.clk=r,"image"===r.type)if(void 0!==t.offsetX)i.clk_x=t.offsetX,i.clk_y=t.offsetY;else if("function"==typeof e.fn.offset){var o=a.offset();i.clk_x=t.pageX-o.left,i.clk_y=t.pageY-o.top}else i.clk_x=t.pageX-r.offsetLeft,i.clk_y=t.pageY-r.offsetTop;setTimeout(function(){i.clk=i.clk_x=i.clk_y=null},100)}function a(){if(e.fn.ajaxSubmit.debug){var t="[jquery.form] "+Array.prototype.join.call(arguments,"");window.console&&window.console.log?window.console.log(t):window.opera&&window.opera.postError&&window.opera.postError(t)}}var n=/\r?\n/g,i={};i.fileapi=void 0!==e('<input type="file">').get(0).files,i.formdata=void 0!==window.FormData;var o=!!e.fn.prop;e.fn.attr2=function(){if(!o)return this.attr.apply(this,arguments);var e=this.prop.apply(this,arguments);return e&&e.jquery||"string"==typeof e?e:this.attr.apply(this,arguments)},e.fn.ajaxSubmit=function(t,r,n,s){function u(r){var a,n,i=e.param(r,t.traditional).split("&"),o=i.length,s=[];for(a=0;a<o;a++)i[a]=i[a].replace(/\+/g," "),n=i[a].split("="),s.push([decodeURIComponent(n[0]),decodeURIComponent(n[1])]);return s}function c(r){function n(e){var t=null;try{e.contentWindow&&(t=e.contentWindow.document)}catch(e){a("cannot get iframe.contentWindow document: "+e)}if(t)return t;try{t=e.contentDocument?e.contentDocument:e.document}catch(r){a("cannot get iframe.contentDocument: "+r),t=e.document}return t}function i(){function t(){try{var e=n(v).readyState;a("state = "+e),e&&"uninitialized"===e.toLowerCase()&&setTimeout(t,50)}catch(e){a("Server abort: ",e," (",e.name,")"),s(L),j&&clearTimeout(j),j=void 0}}var r=p.attr2("target"),i=p.attr2("action"),o=p.attr("enctype")||p.attr("encoding")||"multipart/form-data";w.setAttribute("target",m),l&&!/post/i.test(l)||w.setAttribute("method","POST"),i!==f.url&&w.setAttribute("action",f.url),f.skipEncodingOverride||l&&!/post/i.test(l)||p.attr({encoding:"multipart/form-data",enctype:"multipart/form-data"}),f.timeout&&(j=setTimeout(function(){T=!0,s(A)},f.timeout));var u=[];try{if(f.extraData)for(var c in f.extraData)f.extraData.hasOwnProperty(c)&&(e.isPlainObject(f.extraData[c])&&f.extraData[c].hasOwnProperty("name")&&f.extraData[c].hasOwnProperty("value")?u.push(e('<input type="hidden" name="'+f.extraData[c].name+'">',k).val(f.extraData[c].value).appendTo(w)[0]):u.push(e('<input type="hidden" name="'+c+'">',k).val(f.extraData[c]).appendTo(w)[0]));f.iframeTarget||h.appendTo(D),v.attachEvent?v.attachEvent("onload",s):v.addEventListener("load",s,!1),setTimeout(t,15);try{w.submit()}catch(e){document.createElement("form").submit.apply(w)}}finally{w.setAttribute("action",i),w.setAttribute("enctype",o),r?w.setAttribute("target",r):p.removeAttr("target"),e(u).remove()}}function s(t){if(!x.aborted&&!X){if((O=n(v))||(a("cannot access response document"),t=L),t===A&&x)return x.abort("timeout"),void S.reject(x,"timeout");if(t===L&&x)return x.abort("server abort"),void S.reject(x,"error","server abort");if(O&&O.location.href!==f.iframeSrc||T){v.detachEvent?v.detachEvent("onload",s):v.removeEventListener("load",s,!1);var r,i="success";try{if(T)throw"timeout";var o="xml"===f.dataType||O.XMLDocument||e.isXMLDoc(O);if(a("isXml="+o),!o&&window.opera&&(null===O.body||!O.body.innerHTML)&&--C)return a("requeing onLoad callback, DOM not available"),void setTimeout(s,250);var u=O.body?O.body:O.documentElement;x.responseText=u?u.innerHTML:null,x.responseXML=O.XMLDocument?O.XMLDocument:O,o&&(f.dataType="xml"),x.getResponseHeader=function(e){return{"content-type":f.dataType}[e.toLowerCase()]},u&&(x.status=Number(u.getAttribute("status"))||x.status,x.statusText=u.getAttribute("statusText")||x.statusText);var c=(f.dataType||"").toLowerCase(),l=/(json|script|text)/.test(c);if(l||f.textarea){var p=O.getElementsByTagName("textarea")[0];if(p)x.responseText=p.value,x.status=Number(p.getAttribute("status"))||x.status,x.statusText=p.getAttribute("statusText")||x.statusText;else if(l){var m=O.getElementsByTagName("pre")[0],g=O.getElementsByTagName("body")[0];m?x.responseText=m.textContent?m.textContent:m.innerText:g&&(x.responseText=g.textContent?g.textContent:g.innerText)}}else"xml"===c&&!x.responseXML&&x.responseText&&(x.responseXML=q(x.responseText));try{M=N(x,c,f)}catch(e){i="parsererror",x.error=r=e||i}}catch(e){a("error caught: ",e),i="error",x.error=r=e||i}x.aborted&&(a("upload aborted"),i=null),x.status&&(i=x.status>=200&&x.status<300||304===x.status?"success":"error"),"success"===i?(f.success&&f.success.call(f.context,M,"success",x),S.resolve(x.responseText,"success",x),d&&e.event.trigger("ajaxSuccess",[x,f])):i&&(void 0===r&&(r=x.statusText),f.error&&f.error.call(f.context,x,i,r),S.reject(x,"error",r),d&&e.event.trigger("ajaxError",[x,f,r])),d&&e.event.trigger("ajaxComplete",[x,f]),d&&!--e.active&&e.event.trigger("ajaxStop"),f.complete&&f.complete.call(f.context,x,i),X=!0,f.timeout&&clearTimeout(j),setTimeout(function(){f.iframeTarget?h.attr("src",f.iframeSrc):h.remove(),x.responseXML=null},100)}}}var u,c,f,d,m,h,v,x,y,b,T,j,w=p[0],S=e.Deferred();if(S.abort=function(e){x.abort(e)},r)for(c=0;c<g.length;c++)u=e(g[c]),o?u.prop("disabled",!1):u.removeAttr("disabled");(f=e.extend(!0,{},e.ajaxSettings,t)).context=f.context||f,m="jqFormIO"+(new Date).getTime();var k=w.ownerDocument,D=p.closest("body");if(f.iframeTarget?(b=(h=e(f.iframeTarget,k)).attr2("name"))?m=b:h.attr2("name",m):(h=e('<iframe name="'+m+'" src="'+f.iframeSrc+'" />',k)).css({position:"absolute",top:"-1000px",left:"-1000px"}),v=h[0],x={aborted:0,responseText:null,responseXML:null,status:0,statusText:"n/a",getAllResponseHeaders:function(){},getResponseHeader:function(){},setRequestHeader:function(){},abort:function(t){var r="timeout"===t?"timeout":"aborted";a("aborting upload... "+r),this.aborted=1;try{v.contentWindow.document.execCommand&&v.contentWindow.document.execCommand("Stop")}catch(e){}h.attr("src",f.iframeSrc),x.error=r,f.error&&f.error.call(f.context,x,r,t),d&&e.event.trigger("ajaxError",[x,f,r]),f.complete&&f.complete.call(f.context,x,r)}},(d=f.global)&&0==e.active++&&e.event.trigger("ajaxStart"),d&&e.event.trigger("ajaxSend",[x,f]),f.beforeSend&&!1===f.beforeSend.call(f.context,x,f))return f.global&&e.active--,S.reject(),S;if(x.aborted)return S.reject(),S;(y=w.clk)&&(b=y.name)&&!y.disabled&&(f.extraData=f.extraData||{},f.extraData[b]=y.value,"image"===y.type&&(f.extraData[b+".x"]=w.clk_x,f.extraData[b+".y"]=w.clk_y));var A=1,L=2,F=e("meta[name=csrf-token]").attr("content"),E=e("meta[name=csrf-param]").attr("content");E&&F&&(f.extraData=f.extraData||{},f.extraData[E]=F),f.forceSync?i():setTimeout(i,10);var M,O,X,C=50,q=e.parseXML||function(e,t){return window.ActiveXObject?((t=new ActiveXObject("Microsoft.XMLDOM")).async="false",t.loadXML(e)):t=(new DOMParser).parseFromString(e,"text/xml"),t&&t.documentElement&&"parsererror"!==t.documentElement.nodeName?t:null},_=e.parseJSON||function(e){return window.eval("("+e+")")},N=function(t,r,a){var n=t.getResponseHeader("content-type")||"",i=("xml"===r||!r)&&n.indexOf("xml")>=0,o=i?t.responseXML:t.responseText;return i&&"parsererror"===o.documentElement.nodeName&&e.error&&e.error("parsererror"),a&&a.dataFilter&&(o=a.dataFilter(o,r)),"string"==typeof o&&(("json"===r||!r)&&n.indexOf("json")>=0?o=_(o):("script"===r||!r)&&n.indexOf("javascript")>=0&&e.globalEval(o)),o};return S}if(!this.length)return a("ajaxSubmit: skipping submit process - no element selected"),this;var l,f,d,p=this;"function"==typeof t?t={success:t}:"string"==typeof t||!1===t&&arguments.length>0?(t={url:t,data:r,dataType:n},"function"==typeof s&&(t.success=s)):void 0===t&&(t={}),l=t.method||t.type||this.attr2("method"),(d=(d="string"==typeof(f=t.url||this.attr2("action"))?e.trim(f):"")||window.location.href||"")&&(d=(d.match(/^([^#]+)/)||[])[1]),t=e.extend(!0,{url:d,success:e.ajaxSettings.success,type:l||e.ajaxSettings.type,iframeSrc:/^https/i.test(window.location.href||"")?"javascript:false":"about:blank"},t);var m={};if(this.trigger("form-pre-serialize",[this,t,m]),m.veto)return a("ajaxSubmit: submit vetoed via form-pre-serialize trigger"),this;if(t.beforeSerialize&&!1===t.beforeSerialize(this,t))return a("ajaxSubmit: submit aborted via beforeSerialize callback"),this;var h=t.traditional;void 0===h&&(h=e.ajaxSettings.traditional);var v,g=[],x=this.formToArray(t.semantic,g,t.filtering);if(t.data){var y=e.isFunction(t.data)?t.data(x):t.data;t.extraData=y,v=e.param(y,h)}if(t.beforeSubmit&&!1===t.beforeSubmit(x,this,t))return a("ajaxSubmit: submit aborted via beforeSubmit callback"),this;if(this.trigger("form-submit-validate",[x,this,t,m]),m.veto)return a("ajaxSubmit: submit vetoed via form-submit-validate trigger"),this;var b=e.param(x,h);v&&(b=b?b+"&"+v:v),"GET"===t.type.toUpperCase()?(t.url+=(t.url.indexOf("?")>=0?"&":"?")+b,t.data=null):t.data=b;var T=[];if(t.resetForm&&T.push(function(){p.resetForm()}),t.clearForm&&T.push(function(){p.clearForm(t.includeHidden)}),!t.dataType&&t.target){var j=t.success||function(){};T.push(function(r,a,n){var i=arguments,o=t.replaceTarget?"replaceWith":"html";e(t.target)[o](r).each(function(){j.apply(this,i)})})}else t.success&&(e.isArray(t.success)?e.merge(T,t.success):T.push(t.success));if(t.success=function(e,r,a){for(var n=t.context||this,i=0,o=T.length;i<o;i++)T[i].apply(n,[e,r,a||p,p])},t.error){var w=t.error;t.error=function(e,r,a){var n=t.context||this;w.apply(n,[e,r,a,p])}}if(t.complete){var S=t.complete;t.complete=function(e,r){var a=t.context||this;S.apply(a,[e,r,p])}}var k=e("input[type=file]:enabled",this).filter(function(){return""!==e(this).val()}).length>0,D="multipart/form-data",A=p.attr("enctype")===D||p.attr("encoding")===D,L=i.fileapi&&i.formdata;a("fileAPI :"+L);var F,E=(k||A)&&!L;!1!==t.iframe&&(t.iframe||E)?t.closeKeepAlive?e.get(t.closeKeepAlive,function(){F=c(x)}):F=c(x):F=(k||A)&&L?function(r){for(var a=new FormData,n=0;n<r.length;n++)a.append(r[n].name,r[n].value);if(t.extraData){var i=u(t.extraData);for(n=0;n<i.length;n++)i[n]&&a.append(i[n][0],i[n][1])}t.data=null;var o=e.extend(!0,{},e.ajaxSettings,t,{contentType:!1,processData:!1,cache:!1,type:l||"POST"});t.uploadProgress&&(o.xhr=function(){var r=e.ajaxSettings.xhr();return r.upload&&r.upload.addEventListener("progress",function(e){var r=0,a=e.loaded||e.position,n=e.total;e.lengthComputable&&(r=Math.ceil(a/n*100)),t.uploadProgress(e,a,n,r)},!1),r}),o.data=null;var s=o.beforeSend;return o.beforeSend=function(e,r){t.formData?r.data=t.formData:r.data=a,s&&s.call(this,e,r)},e.ajax(o)}(x):e.ajax(t),p.removeData("jqxhr").data("jqxhr",F);for(var M=0;M<g.length;M++)g[M]=null;return this.trigger("form-submit-notify",[this,t]),this},e.fn.ajaxForm=function(n,i,o,s){if(("string"==typeof n||!1===n&&arguments.length>0)&&(n={url:n,data:i,dataType:o},"function"==typeof s&&(n.success=s)),n=n||{},n.delegation=n.delegation&&e.isFunction(e.fn.on),!n.delegation&&0===this.length){var u={s:this.selector,c:this.context};return!e.isReady&&u.s?(a("DOM not ready, queuing ajaxForm"),e(function(){e(u.s,u.c).ajaxForm(n)}),this):(a("terminating; zero elements found by selector"+(e.isReady?"":" (DOM not ready)")),this)}return n.delegation?(e(document).off("submit.form-plugin",this.selector,t).off("click.form-plugin",this.selector,r).on("submit.form-plugin",this.selector,n,t).on("click.form-plugin",this.selector,n,r),this):this.ajaxFormUnbind().on("submit.form-plugin",n,t).on("click.form-plugin",n,r)},e.fn.ajaxFormUnbind=function(){return this.off("submit.form-plugin click.form-plugin")},e.fn.formToArray=function(t,r,a){var n=[];if(0===this.length)return n;var o,s=this[0],u=this.attr("id"),c=t||void 0===s.elements?s.getElementsByTagName("*"):s.elements;if(c&&(c=e.makeArray(c)),u&&(t||/(Edge|Trident)\//.test(navigator.userAgent))&&(o=e(':input[form="'+u+'"]').get()).length&&(c=(c||[]).concat(o)),!c||!c.length)return n;e.isFunction(a)&&(c=e.map(c,a));var l,f,d,p,m,h,v;for(l=0,h=c.length;l<h;l++)if(m=c[l],(d=m.name)&&!m.disabled)if(t&&s.clk&&"image"===m.type)s.clk===m&&(n.push({name:d,value:e(m).val(),type:m.type}),n.push({name:d+".x",value:s.clk_x},{name:d+".y",value:s.clk_y}));else if((p=e.fieldValue(m,!0))&&p.constructor===Array)for(r&&r.push(m),f=0,v=p.length;f<v;f++)n.push({name:d,value:p[f]});else if(i.fileapi&&"file"===m.type){r&&r.push(m);var g=m.files;if(g.length)for(f=0;f<g.length;f++)n.push({name:d,value:g[f],type:m.type});else n.push({name:d,value:"",type:m.type})}else null!==p&&void 0!==p&&(r&&r.push(m),n.push({name:d,value:p,type:m.type,required:m.required}));if(!t&&s.clk){var x=e(s.clk),y=x[0];(d=y.name)&&!y.disabled&&"image"===y.type&&(n.push({name:d,value:x.val()}),n.push({name:d+".x",value:s.clk_x},{name:d+".y",value:s.clk_y}))}return n},e.fn.formSerialize=function(t){return e.param(this.formToArray(t))},e.fn.fieldSerialize=function(t){var r=[];return this.each(function(){var a=this.name;if(a){var n=e.fieldValue(this,t);if(n&&n.constructor===Array)for(var i=0,o=n.length;i<o;i++)r.push({name:a,value:n[i]});else null!==n&&void 0!==n&&r.push({name:this.name,value:n})}}),e.param(r)},e.fn.fieldValue=function(t){for(var r=[],a=0,n=this.length;a<n;a++){var i=this[a],o=e.fieldValue(i,t);null===o||void 0===o||o.constructor===Array&&!o.length||(o.constructor===Array?e.merge(r,o):r.push(o))}return r},e.fieldValue=function(t,r){var a=t.name,i=t.type,o=t.tagName.toLowerCase();if(void 0===r&&(r=!0),r&&(!a||t.disabled||"reset"===i||"button"===i||("checkbox"===i||"radio"===i)&&!t.checked||("submit"===i||"image"===i)&&t.form&&t.form.clk!==t||"select"===o&&-1===t.selectedIndex))return null;if("select"===o){var s=t.selectedIndex;if(s<0)return null;for(var u=[],c=t.options,l="select-one"===i,f=l?s+1:c.length,d=l?s:0;d<f;d++){var p=c[d];if(p.selected&&!p.disabled){var m=p.value;if(m||(m=p.attributes&&p.attributes.value&&!p.attributes.value.specified?p.text:p.value),l)return m;u.push(m)}}return u}return e(t).val().replace(n,"\r\n")},e.fn.clearForm=function(t){return this.each(function(){e("input,select,textarea",this).clearFields(t)})},e.fn.clearFields=e.fn.clearInputs=function(t){var r=/^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;return this.each(function(){var a=this.type,n=this.tagName.toLowerCase();r.test(a)||"textarea"===n?this.value="":"checkbox"===a||"radio"===a?this.checked=!1:"select"===n?this.selectedIndex=-1:"file"===a?/MSIE/.test(navigator.userAgent)?e(this).replaceWith(e(this).clone(!0)):e(this).val(""):t&&(!0===t&&/hidden/.test(a)||"string"==typeof t&&e(this).is(t))&&(this.value="")})},e.fn.resetForm=function(){return this.each(function(){var t=e(this),r=this.tagName.toLowerCase();switch(r){case"input":this.checked=this.defaultChecked;case"textarea":return this.value=this.defaultValue,!0;case"option":case"optgroup":var a=t.parents("select");return a.length&&a[0].multiple?"option"===r?this.selected=this.defaultSelected:t.find("option").resetForm():a.resetForm(),!0;case"select":return t.find("option").each(function(e){if(this.selected=this.defaultSelected,this.defaultSelected&&!t[0].multiple)return t[0].selectedIndex=e,!1}),!0;case"label":var n=e(t.attr("for")),i=t.find("input,select,textarea");return n[0]&&i.unshift(n[0]),i.resetForm(),!0;case"form":return("function"==typeof this.reset||"object"==typeof this.reset&&!this.reset.nodeType)&&this.reset(),!0;default:return t.find("form,input,label,select,textarea").resetForm(),!0}})},e.fn.enable=function(e){return void 0===e&&(e=!0),this.each(function(){this.disabled=!e})},e.fn.selected=function(t){return void 0===t&&(t=!0),this.each(function(){var r=this.type;if("checkbox"===r||"radio"===r)this.checked=t;else if("option"===this.tagName.toLowerCase()){var a=e(this).parent("select");t&&a[0]&&"select-one"===a[0].type&&a.find("option").selected(!1),this.selected=t}})},e.fn.ajaxSubmit.debug=!1});

;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal) {
  Drupal.theme.progressBar = function (id) {
    return '<div id="' + id + '" class="progress" aria-live="polite">' + '<div class="progress__label">&nbsp;</div>' + '<div class="progress__track"><div class="progress__bar"></div></div>' + '<div class="progress__percentage"></div>' + '<div class="progress__description">&nbsp;</div>' + '</div>';
  };

  Drupal.ProgressBar = function (id, updateCallback, method, errorCallback) {
    this.id = id;
    this.method = method || 'GET';
    this.updateCallback = updateCallback;
    this.errorCallback = errorCallback;

    this.element = $(Drupal.theme('progressBar', id));
  };

  $.extend(Drupal.ProgressBar.prototype, {
    setProgress: function setProgress(percentage, message, label) {
      if (percentage >= 0 && percentage <= 100) {
        $(this.element).find('div.progress__bar').css('width', percentage + '%');
        $(this.element).find('div.progress__percentage').html(percentage + '%');
      }
      $('div.progress__description', this.element).html(message);
      $('div.progress__label', this.element).html(label);
      if (this.updateCallback) {
        this.updateCallback(percentage, message, this);
      }
    },
    startMonitoring: function startMonitoring(uri, delay) {
      this.delay = delay;
      this.uri = uri;
      this.sendPing();
    },
    stopMonitoring: function stopMonitoring() {
      clearTimeout(this.timer);

      this.uri = null;
    },
    sendPing: function sendPing() {
      if (this.timer) {
        clearTimeout(this.timer);
      }
      if (this.uri) {
        var pb = this;

        var uri = this.uri;
        if (uri.indexOf('?') === -1) {
          uri += '?';
        } else {
          uri += '&';
        }
        uri += '_format=json';
        $.ajax({
          type: this.method,
          url: uri,
          data: '',
          dataType: 'json',
          success: function success(progress) {
            if (progress.status === 0) {
              pb.displayError(progress.data);
              return;
            }

            pb.setProgress(progress.percentage, progress.message, progress.label);

            pb.timer = setTimeout(function () {
              pb.sendPing();
            }, pb.delay);
          },
          error: function error(xmlhttp) {
            var e = new Drupal.AjaxError(xmlhttp, pb.uri);
            pb.displayError('<pre>' + e.message + '</pre>');
          }
        });
      }
    },
    displayError: function displayError(string) {
      var error = $('<div class="messages messages--error"></div>').html(string);
      $(this.element).before(error).hide();

      if (this.errorCallback) {
        this.errorCallback(this);
      }
    }
  });
})(jQuery, Drupal);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

(function ($, window, Drupal, drupalSettings) {
  Drupal.behaviors.AJAX = {
    attach: function attach(context, settings) {
      function loadAjaxBehavior(base) {
        var elementSettings = settings.ajax[base];
        if (typeof elementSettings.selector === 'undefined') {
          elementSettings.selector = '#' + base;
        }
        $(elementSettings.selector).once('drupal-ajax').each(function () {
          elementSettings.element = this;
          elementSettings.base = base;
          Drupal.ajax(elementSettings);
        });
      }

      Object.keys(settings.ajax || {}).forEach(function (base) {
        return loadAjaxBehavior(base);
      });

      Drupal.ajax.bindAjaxLinks(document.body);

      $('.use-ajax-submit').once('ajax').each(function () {
        var elementSettings = {};

        elementSettings.url = $(this.form).attr('action');

        elementSettings.setClick = true;

        elementSettings.event = 'click';

        elementSettings.progress = { type: 'throbber' };
        elementSettings.base = $(this).attr('id');
        elementSettings.element = this;

        Drupal.ajax(elementSettings);
      });
    },
    detach: function detach(context, settings, trigger) {
      if (trigger === 'unload') {
        Drupal.ajax.expired().forEach(function (instance) {
          Drupal.ajax.instances[instance.instanceIndex] = null;
        });
      }
    }
  };

  Drupal.AjaxError = function (xmlhttp, uri, customMessage) {
    var statusCode = void 0;
    var statusText = void 0;
    var responseText = void 0;
    if (xmlhttp.status) {
      statusCode = '\n' + Drupal.t('An AJAX HTTP error occurred.') + '\n' + Drupal.t('HTTP Result Code: !status', { '!status': xmlhttp.status });
    } else {
      statusCode = '\n' + Drupal.t('An AJAX HTTP request terminated abnormally.');
    }
    statusCode += '\n' + Drupal.t('Debugging information follows.');
    var pathText = '\n' + Drupal.t('Path: !uri', { '!uri': uri });
    statusText = '';

    try {
      statusText = '\n' + Drupal.t('StatusText: !statusText', {
        '!statusText': $.trim(xmlhttp.statusText)
      });
    } catch (e) {}

    responseText = '';

    try {
      responseText = '\n' + Drupal.t('ResponseText: !responseText', {
        '!responseText': $.trim(xmlhttp.responseText)
      });
    } catch (e) {}

    responseText = responseText.replace(/<("[^"]*"|'[^']*'|[^'">])*>/gi, '');
    responseText = responseText.replace(/[\n]+\s+/g, '\n');

    var readyStateText = xmlhttp.status === 0 ? '\n' + Drupal.t('ReadyState: !readyState', {
      '!readyState': xmlhttp.readyState
    }) : '';

    customMessage = customMessage ? '\n' + Drupal.t('CustomMessage: !customMessage', {
      '!customMessage': customMessage
    }) : '';

    this.message = statusCode + pathText + statusText + customMessage + responseText + readyStateText;

    this.name = 'AjaxError';
  };

  Drupal.AjaxError.prototype = new Error();
  Drupal.AjaxError.prototype.constructor = Drupal.AjaxError;

  Drupal.ajax = function (settings) {
    if (arguments.length !== 1) {
      throw new Error('Drupal.ajax() function must be called with one configuration object only');
    }

    var base = settings.base || false;
    var element = settings.element || false;
    delete settings.base;
    delete settings.element;

    if (!settings.progress && !element) {
      settings.progress = false;
    }

    var ajax = new Drupal.Ajax(base, element, settings);
    ajax.instanceIndex = Drupal.ajax.instances.length;
    Drupal.ajax.instances.push(ajax);

    return ajax;
  };

  Drupal.ajax.instances = [];

  Drupal.ajax.expired = function () {
    return Drupal.ajax.instances.filter(function (instance) {
      return instance && instance.element !== false && !document.body.contains(instance.element);
    });
  };

  Drupal.ajax.bindAjaxLinks = function (element) {
    $(element).find('.use-ajax').once('ajax').each(function (i, ajaxLink) {
      var $linkElement = $(ajaxLink);

      var elementSettings = {
        progress: { type: 'throbber' },
        dialogType: $linkElement.data('dialog-type'),
        dialog: $linkElement.data('dialog-options'),
        dialogRenderer: $linkElement.data('dialog-renderer'),
        base: $linkElement.attr('id'),
        element: ajaxLink
      };
      var href = $linkElement.attr('href');

      if (href) {
        elementSettings.url = href;
        elementSettings.event = 'click';
      }
      Drupal.ajax(elementSettings);
    });
  };

  Drupal.Ajax = function (base, element, elementSettings) {
    var defaults = {
      event: element ? 'mousedown' : null,
      keypress: true,
      selector: base ? '#' + base : null,
      effect: 'none',
      speed: 'none',
      method: 'replaceWith',
      progress: {
        type: 'throbber',
        message: Drupal.t('Please wait...')
      },
      submit: {
        js: true
      }
    };

    $.extend(this, defaults, elementSettings);

    this.commands = new Drupal.AjaxCommands();

    this.instanceIndex = false;

    if (this.wrapper) {
      this.wrapper = '#' + this.wrapper;
    }

    this.element = element;

    this.element_settings = elementSettings;

    this.elementSettings = elementSettings;

    if (this.element && this.element.form) {
      this.$form = $(this.element.form);
    }

    if (!this.url) {
      var $element = $(this.element);
      if ($element.is('a')) {
        this.url = $element.attr('href');
      } else if (this.element && element.form) {
        this.url = this.$form.attr('action');
      }
    }

    var originalUrl = this.url;

    this.url = this.url.replace(/\/nojs(\/|$|\?|#)/, '/ajax$1');

    if (drupalSettings.ajaxTrustedUrl[originalUrl]) {
      drupalSettings.ajaxTrustedUrl[this.url] = true;
    }

    var ajax = this;

    ajax.options = {
      url: ajax.url,
      data: ajax.submit,
      beforeSerialize: function beforeSerialize(elementSettings, options) {
        return ajax.beforeSerialize(elementSettings, options);
      },
      beforeSubmit: function beforeSubmit(formValues, elementSettings, options) {
        ajax.ajaxing = true;
        return ajax.beforeSubmit(formValues, elementSettings, options);
      },
      beforeSend: function beforeSend(xmlhttprequest, options) {
        ajax.ajaxing = true;
        return ajax.beforeSend(xmlhttprequest, options);
      },
      success: function success(response, status, xmlhttprequest) {
        if (typeof response === 'string') {
          response = $.parseJSON(response);
        }

        if (response !== null && !drupalSettings.ajaxTrustedUrl[ajax.url]) {
          if (xmlhttprequest.getResponseHeader('X-Drupal-Ajax-Token') !== '1') {
            var customMessage = Drupal.t('The response failed verification so will not be processed.');
            return ajax.error(xmlhttprequest, ajax.url, customMessage);
          }
        }

        return ajax.success(response, status);
      },
      complete: function complete(xmlhttprequest, status) {
        ajax.ajaxing = false;
        if (status === 'error' || status === 'parsererror') {
          return ajax.error(xmlhttprequest, ajax.url);
        }
      },

      dataType: 'json',
      type: 'POST'
    };

    if (elementSettings.dialog) {
      ajax.options.data.dialogOptions = elementSettings.dialog;
    }

    if (ajax.options.url.indexOf('?') === -1) {
      ajax.options.url += '?';
    } else {
      ajax.options.url += '&';
    }

    var wrapper = 'drupal_' + (elementSettings.dialogType || 'ajax');
    if (elementSettings.dialogRenderer) {
      wrapper += '.' + elementSettings.dialogRenderer;
    }
    ajax.options.url += Drupal.ajax.WRAPPER_FORMAT + '=' + wrapper;

    $(ajax.element).on(elementSettings.event, function (event) {
      if (!drupalSettings.ajaxTrustedUrl[ajax.url] && !Drupal.url.isLocal(ajax.url)) {
        throw new Error(Drupal.t('The callback URL is not local and not trusted: !url', {
          '!url': ajax.url
        }));
      }
      return ajax.eventResponse(this, event);
    });

    if (elementSettings.keypress) {
      $(ajax.element).on('keypress', function (event) {
        return ajax.keypressResponse(this, event);
      });
    }

    if (elementSettings.prevent) {
      $(ajax.element).on(elementSettings.prevent, false);
    }
  };

  Drupal.ajax.WRAPPER_FORMAT = '_wrapper_format';

  Drupal.Ajax.AJAX_REQUEST_PARAMETER = '_drupal_ajax';

  Drupal.Ajax.prototype.execute = function () {
    if (this.ajaxing) {
      return;
    }

    try {
      this.beforeSerialize(this.element, this.options);

      return $.ajax(this.options);
    } catch (e) {
      this.ajaxing = false;
      window.alert('An error occurred while attempting to process ' + this.options.url + ': ' + e.message);

      return $.Deferred().reject();
    }
  };

  Drupal.Ajax.prototype.keypressResponse = function (element, event) {
    var ajax = this;

    if (event.which === 13 || event.which === 32 && element.type !== 'text' && element.type !== 'textarea' && element.type !== 'tel' && element.type !== 'number') {
      event.preventDefault();
      event.stopPropagation();
      $(element).trigger(ajax.elementSettings.event);
    }
  };

  Drupal.Ajax.prototype.eventResponse = function (element, event) {
    event.preventDefault();
    event.stopPropagation();

    var ajax = this;

    if (ajax.ajaxing) {
      return;
    }

    try {
      if (ajax.$form) {
        if (ajax.setClick) {
          element.form.clk = element;
        }

        ajax.$form.ajaxSubmit(ajax.options);
      } else {
        ajax.beforeSerialize(ajax.element, ajax.options);
        $.ajax(ajax.options);
      }
    } catch (e) {
      ajax.ajaxing = false;
      window.alert('An error occurred while attempting to process ' + ajax.options.url + ': ' + e.message);
    }
  };

  Drupal.Ajax.prototype.beforeSerialize = function (element, options) {
    if (this.$form && document.body.contains(this.$form.get(0))) {
      var settings = this.settings || drupalSettings;
      Drupal.detachBehaviors(this.$form.get(0), settings, 'serialize');
    }

    options.data[Drupal.Ajax.AJAX_REQUEST_PARAMETER] = 1;

    var pageState = drupalSettings.ajaxPageState;
    options.data['ajax_page_state[theme]'] = pageState.theme;
    options.data['ajax_page_state[theme_token]'] = pageState.theme_token;
    options.data['ajax_page_state[libraries]'] = pageState.libraries;
  };

  Drupal.Ajax.prototype.beforeSubmit = function (formValues, element, options) {};

  Drupal.Ajax.prototype.beforeSend = function (xmlhttprequest, options) {
    if (this.$form) {
      options.extraData = options.extraData || {};

      options.extraData.ajax_iframe_upload = '1';

      var v = $.fieldValue(this.element);
      if (v !== null) {
        options.extraData[this.element.name] = v;
      }
    }

    $(this.element).prop('disabled', true);

    if (!this.progress || !this.progress.type) {
      return;
    }

    var progressIndicatorMethod = 'setProgressIndicator' + this.progress.type.slice(0, 1).toUpperCase() + this.progress.type.slice(1).toLowerCase();
    if (progressIndicatorMethod in this && typeof this[progressIndicatorMethod] === 'function') {
      this[progressIndicatorMethod].call(this);
    }
  };

  Drupal.theme.ajaxProgressThrobber = function (message) {
    var messageMarkup = typeof message === 'string' ? Drupal.theme('ajaxProgressMessage', message) : '';
    var throbber = '<div class="throbber">&nbsp;</div>';

    return '<div class="ajax-progress ajax-progress-throbber">' + throbber + messageMarkup + '</div>';
  };

  Drupal.theme.ajaxProgressIndicatorFullscreen = function () {
    return '<div class="ajax-progress ajax-progress-fullscreen">&nbsp;</div>';
  };

  Drupal.theme.ajaxProgressMessage = function (message) {
    return '<div class="message">' + message + '</div>';
  };

  Drupal.theme.ajaxProgressBar = function ($element) {
    return $('<div class="ajax-progress ajax-progress-bar"></div>').append($element);
  };

  Drupal.Ajax.prototype.setProgressIndicatorBar = function () {
    var progressBar = new Drupal.ProgressBar('ajax-progress-' + this.element.id, $.noop, this.progress.method, $.noop);
    if (this.progress.message) {
      progressBar.setProgress(-1, this.progress.message);
    }
    if (this.progress.url) {
      progressBar.startMonitoring(this.progress.url, this.progress.interval || 1500);
    }
    this.progress.element = $(Drupal.theme('ajaxProgressBar', progressBar.element));
    this.progress.object = progressBar;
    $(this.element).after(this.progress.element);
  };

  Drupal.Ajax.prototype.setProgressIndicatorThrobber = function () {
    this.progress.element = $(Drupal.theme('ajaxProgressThrobber', this.progress.message));
    $(this.element).after(this.progress.element);
  };

  Drupal.Ajax.prototype.setProgressIndicatorFullscreen = function () {
    this.progress.element = $(Drupal.theme('ajaxProgressIndicatorFullscreen'));
    $('body').append(this.progress.element);
  };

  Drupal.Ajax.prototype.success = function (response, status) {
    var _this = this;

    if (this.progress.element) {
      $(this.progress.element).remove();
    }
    if (this.progress.object) {
      this.progress.object.stopMonitoring();
    }
    $(this.element).prop('disabled', false);

    var elementParents = $(this.element).parents('[data-drupal-selector]').addBack().toArray();

    var focusChanged = false;
    Object.keys(response || {}).forEach(function (i) {
      if (response[i].command && _this.commands[response[i].command]) {
        _this.commands[response[i].command](_this, response[i], status);
        if (response[i].command === 'invoke' && response[i].method === 'focus') {
          focusChanged = true;
        }
      }
    });

    if (!focusChanged && this.element && !$(this.element).data('disable-refocus')) {
      var target = false;

      for (var n = elementParents.length - 1; !target && n >= 0; n--) {
        target = document.querySelector('[data-drupal-selector="' + elementParents[n].getAttribute('data-drupal-selector') + '"]');
      }

      if (target) {
        $(target).trigger('focus');
      }
    }

    if (this.$form && document.body.contains(this.$form.get(0))) {
      var settings = this.settings || drupalSettings;
      Drupal.attachBehaviors(this.$form.get(0), settings);
    }

    this.settings = null;
  };

  Drupal.Ajax.prototype.getEffect = function (response) {
    var type = response.effect || this.effect;
    var speed = response.speed || this.speed;

    var effect = {};
    if (type === 'none') {
      effect.showEffect = 'show';
      effect.hideEffect = 'hide';
      effect.showSpeed = '';
    } else if (type === 'fade') {
      effect.showEffect = 'fadeIn';
      effect.hideEffect = 'fadeOut';
      effect.showSpeed = speed;
    } else {
      effect.showEffect = type + 'Toggle';
      effect.hideEffect = type + 'Toggle';
      effect.showSpeed = speed;
    }

    return effect;
  };

  Drupal.Ajax.prototype.error = function (xmlhttprequest, uri, customMessage) {
    if (this.progress.element) {
      $(this.progress.element).remove();
    }
    if (this.progress.object) {
      this.progress.object.stopMonitoring();
    }

    $(this.wrapper).show();

    $(this.element).prop('disabled', false);

    if (this.$form && document.body.contains(this.$form.get(0))) {
      var settings = this.settings || drupalSettings;
      Drupal.attachBehaviors(this.$form.get(0), settings);
    }
    throw new Drupal.AjaxError(xmlhttprequest, uri, customMessage);
  };

  Drupal.theme.ajaxWrapperNewContent = function ($newContent, ajax, response) {
    return (response.effect || ajax.effect) !== 'none' && $newContent.filter(function (i) {
      return !($newContent[i].nodeName === '#comment' || $newContent[i].nodeName === '#text' && /^(\s|\n|\r)*$/.test($newContent[i].textContent));
    }).length > 1 ? Drupal.theme('ajaxWrapperMultipleRootElements', $newContent) : $newContent;
  };

  Drupal.theme.ajaxWrapperMultipleRootElements = function ($elements) {
    return $('<div></div>').append($elements);
  };

  Drupal.AjaxCommands = function () {};
  Drupal.AjaxCommands.prototype = {
    insert: function insert(ajax, response) {
      var $wrapper = response.selector ? $(response.selector) : $(ajax.wrapper);
      var method = response.method || ajax.method;
      var effect = ajax.getEffect(response);

      var settings = response.settings || ajax.settings || drupalSettings;

      var $newContent = $($.parseHTML(response.data, document, true));

      $newContent = Drupal.theme('ajaxWrapperNewContent', $newContent, ajax, response);

      switch (method) {
        case 'html':
        case 'replaceWith':
        case 'replaceAll':
        case 'empty':
        case 'remove':
          Drupal.detachBehaviors($wrapper.get(0), settings);
          break;
        default:
          break;
      }

      $wrapper[method]($newContent);

      if (effect.showEffect !== 'show') {
        $newContent.hide();
      }

      var $ajaxNewContent = $newContent.find('.ajax-new-content');
      if ($ajaxNewContent.length) {
        $ajaxNewContent.hide();
        $newContent.show();
        $ajaxNewContent[effect.showEffect](effect.showSpeed);
      } else if (effect.showEffect !== 'show') {
        $newContent[effect.showEffect](effect.showSpeed);
      }

      if ($newContent.parents('html').length) {
        $newContent.each(function (index, element) {
          if (element.nodeType === Node.ELEMENT_NODE) {
            Drupal.attachBehaviors(element, settings);
          }
        });
      }
    },
    remove: function remove(ajax, response, status) {
      var settings = response.settings || ajax.settings || drupalSettings;
      $(response.selector).each(function () {
        Drupal.detachBehaviors(this, settings);
      }).remove();
    },
    changed: function changed(ajax, response, status) {
      var $element = $(response.selector);
      if (!$element.hasClass('ajax-changed')) {
        $element.addClass('ajax-changed');
        if (response.asterisk) {
          $element.find(response.asterisk).append(' <abbr class="ajax-changed" title="' + Drupal.t('Changed') + '">*</abbr> ');
        }
      }
    },
    alert: function alert(ajax, response, status) {
      window.alert(response.text, response.title);
    },
    announce: function announce(ajax, response) {
      if (response.priority) {
        Drupal.announce(response.text, response.priority);
      } else {
        Drupal.announce(response.text);
      }
    },
    redirect: function redirect(ajax, response, status) {
      window.location = response.url;
    },
    css: function css(ajax, response, status) {
      $(response.selector).css(response.argument);
    },
    settings: function settings(ajax, response, status) {
      var ajaxSettings = drupalSettings.ajax;

      if (ajaxSettings) {
        Drupal.ajax.expired().forEach(function (instance) {

          if (instance.selector) {
            var selector = instance.selector.replace('#', '');
            if (selector in ajaxSettings) {
              delete ajaxSettings[selector];
            }
          }
        });
      }

      if (response.merge) {
        $.extend(true, drupalSettings, response.settings);
      } else {
        ajax.settings = response.settings;
      }
    },
    data: function data(ajax, response, status) {
      $(response.selector).data(response.name, response.value);
    },
    invoke: function invoke(ajax, response, status) {
      var $element = $(response.selector);
      $element[response.method].apply($element, _toConsumableArray(response.args));
    },
    restripe: function restripe(ajax, response, status) {
      $(response.selector).find('> tbody > tr:visible, > tr:visible').removeClass('odd even').filter(':even').addClass('odd').end().filter(':odd').addClass('even');
    },
    update_build_id: function update_build_id(ajax, response, status) {
      $('input[name="form_build_id"][value="' + response.old + '"]').val(response.new);
    },
    add_css: function add_css(ajax, response, status) {
      $('head').prepend(response.data);

      var match = void 0;
      var importMatch = /^@import url\("(.*)"\);$/gim;
      if (document.styleSheets[0].addImport && importMatch.test(response.data)) {
        importMatch.lastIndex = 0;
        do {
          match = importMatch.exec(response.data);
          document.styleSheets[0].addImport(match[1]);
        } while (match);
      }
    },
    message: function message(ajax, response) {
      var messages = new Drupal.Message(document.querySelector(response.messageWrapperQuerySelector));
      if (response.clearPrevious) {
        messages.clear();
      }
      messages.add(response.message, response.messageOptions);
    }
  };
})(jQuery, window, Drupal, drupalSettings);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function (Drupal) {
  Drupal.theme.ajaxProgressBar = function ($element) {
    return $element.addClass('ajax-progress ajax-progress-bar');
  };
})(Drupal);;
/**
 * @file
 * Provides Ajax page updating via jQuery $.ajax.
 *
 * Ajax is a method of making a request via JavaScript while viewing an HTML
 * page. The request returns an array of commands encoded in JSON, which is
 * then executed to make any changes that are necessary to the page.
 *
 * Drupal uses this file to enhance form elements with `#ajax['url']` and
 * `#ajax['wrapper']` properties. If set, this file will automatically be
 * included to provide Ajax capabilities.
 */

(function ($, window, Drupal, drupalSettings) {
  'use strict';

  /**
   * Sets the progress sncf progress indicator.
   */
  Drupal.Ajax.prototype.setProgressIndicatorSncf = function () {
    var message = drupalSettings.sncfAjaxLoaderMessage;
    if (this.progress.message !== '') {
      message = this.progress.message;
    }

    this.progress.element = $('<div class="ajax-progress loader-link" role="alert">' +
                             '<span class="loader-img" aria-hidden="true"></span>' +
                             '<span class="visually-hidden">' + message + '</span>' +
                           '</div>');

      if (this.element.previousElementSibling !== null && this.element.previousElementSibling.type == 'submit') {
          $(this.element.parentElement).after(this.progress.element);
      } else {
          $(this.element).after(this.progress.element);
      }
  };

})(jQuery, window, Drupal, drupalSettings);
;
/*! jquery.cookie v1.4.1 | MIT */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):"object"==typeof exports?a(require("jquery")):a(jQuery)}(function(a){function b(a){return h.raw?a:encodeURIComponent(a)}function c(a){return h.raw?a:decodeURIComponent(a)}function d(a){return b(h.json?JSON.stringify(a):String(a))}function e(a){0===a.indexOf('"')&&(a=a.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,"\\"));try{return a=decodeURIComponent(a.replace(g," ")),h.json?JSON.parse(a):a}catch(b){}}function f(b,c){var d=h.raw?b:e(b);return a.isFunction(c)?c(d):d}var g=/\+/g,h=a.cookie=function(e,g,i){if(void 0!==g&&!a.isFunction(g)){if(i=a.extend({},h.defaults,i),"number"==typeof i.expires){var j=i.expires,k=i.expires=new Date;k.setTime(+k+864e5*j)}return document.cookie=[b(e),"=",d(g),i.expires?"; expires="+i.expires.toUTCString():"",i.path?"; path="+i.path:"",i.domain?"; domain="+i.domain:"",i.secure?"; secure":""].join("")}for(var l=e?void 0:{},m=document.cookie?document.cookie.split("; "):[],n=0,o=m.length;o>n;n++){var p=m[n].split("="),q=c(p.shift()),r=p.join("=");if(e&&e===q){l=f(r,g);break}e||void 0===(r=f(r))||(l[q]=r)}return l};h.defaults={},a.removeCookie=function(b,c){return void 0===a.cookie(b)?!1:(a.cookie(b,"",a.extend({},c,{expires:-1})),!a.cookie(b))}});;
/**
 * @file
 * eu_cookie_compliance.js
 *
 * Defines the behavior of the eu cookie compliance banner.
 *
 * Statuses:
 *  null: not yet agreed (or withdrawn), show popup
 *  0: Disagreed
 *  1: Agreed, show thank you banner
 *  2: Agreed
 */

(function ($, Drupal, drupalSettings) {

  'use strict';
  var euCookieComplianceBlockCookies;

  Drupal.behaviors.euCookieCompliancePopup = {
    attach: function (context) {
      $('body').once('eu-cookie-compliance').each(function () {
        // If configured, check JSON callback to determine if in EU.
        if (drupalSettings.eu_cookie_compliance.popup_eu_only_js) {
          if (Drupal.eu_cookie_compliance.showBanner()) {
            var url = drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + 'eu-cookie-compliance-check';
            var data = {};
            $.getJSON(url, data, function (data) {
              // If in the EU, show the compliance banner.
              if (data.in_eu) {
                Drupal.eu_cookie_compliance.execute();
              }

              // If not in EU, set an agreed cookie automatically.
              else {
                Drupal.eu_cookie_compliance.setStatus(2);
              }
            });
          }
        }

        // Otherwise, fallback to standard behavior which is to render the banner.
        else {
          Drupal.eu_cookie_compliance.execute();
        }
      });
    },
  };

  Drupal.eu_cookie_compliance = {};

  Drupal.eu_cookie_compliance.execute = function () {
    try {
      if (!drupalSettings.eu_cookie_compliance.popup_enabled) {
        return;
      }

      if (!Drupal.eu_cookie_compliance.cookiesEnabled()) {
        return;
      }

      var status = Drupal.eu_cookie_compliance.getCurrentStatus();
      if ((status === 0 && drupalSettings.eu_cookie_compliance.method === 'default') || status === null || (drupalSettings.eu_cookie_compliance.withdraw_enabled && drupalSettings.eu_cookie_compliance.withdraw_button_on_info_popup)) {
        if (!drupalSettings.eu_cookie_compliance.disagree_do_not_show_popup || status === null) {
          // Detect mobile here and use mobile_popup_html_info, if we have a mobile device.
          if (window.matchMedia('(max-width: ' + drupalSettings.eu_cookie_compliance.mobile_breakpoint + 'px)').matches && drupalSettings.eu_cookie_compliance.use_mobile_message) {
            Drupal.eu_cookie_compliance.createPopup(drupalSettings.eu_cookie_compliance.mobile_popup_html_info, (status !== null));
          } else {
            Drupal.eu_cookie_compliance.createPopup(drupalSettings.eu_cookie_compliance.popup_html_info, (status !== null));
          }
          Drupal.eu_cookie_compliance.initPopup();
        }
      }
      if (status === 1 && drupalSettings.eu_cookie_compliance.popup_agreed_enabled) {
        // Thank you banner.
        Drupal.eu_cookie_compliance.createPopup(drupalSettings.eu_cookie_compliance.popup_html_agreed);
        Drupal.eu_cookie_compliance.attachHideEvents();
      } else if (status === 2 && drupalSettings.eu_cookie_compliance.withdraw_enabled) {
        if (!drupalSettings.eu_cookie_compliance.withdraw_button_on_info_popup) {
          Drupal.eu_cookie_compliance.createWithdrawBanner(drupalSettings.eu_cookie_compliance.withdraw_markup);
        }
        Drupal.eu_cookie_compliance.attachWithdrawEvents();
      }
    }
    catch (e) {
    }
  };

  Drupal.eu_cookie_compliance.initPopup = function() {
    Drupal.eu_cookie_compliance.attachAgreeEvents();

    if (drupalSettings.eu_cookie_compliance.method === 'categories') {
      var categories_checked = [];

      if (Drupal.eu_cookie_compliance.getCurrentStatus() === null) {
        if (drupalSettings.eu_cookie_compliance.select_all_categories_by_default) {
          categories_checked = drupalSettings.eu_cookie_compliance.cookie_categories;
        }
      }
      else {
        categories_checked = Drupal.eu_cookie_compliance.getAcceptedCategories();
      }
      Drupal.eu_cookie_compliance.setPreferenceCheckboxes(categories_checked);
      Drupal.eu_cookie_compliance.attachSavePreferencesEvents();
    }

    if (drupalSettings.eu_cookie_compliance.withdraw_enabled && drupalSettings.eu_cookie_compliance.withdraw_button_on_info_popup) {
      Drupal.eu_cookie_compliance.attachWithdrawEvents();
      var currentStatus = Drupal.eu_cookie_compliance.getCurrentStatus();
      if (currentStatus === 1 || currentStatus === 2) {
        $('.eu-cookie-withdraw-button').show();
      }
    }
  }

  Drupal.eu_cookie_compliance.createWithdrawBanner = function (html) {
    var $html = $('<div></div>').html(html);
    var $banner = $('.eu-cookie-withdraw-banner', $html);
    $html.attr('id', 'sliding-popup');
    $html.addClass('eu-cookie-withdraw-wrapper');

    if (!drupalSettings.eu_cookie_compliance.popup_use_bare_css) {
      $banner.height(drupalSettings.eu_cookie_compliance.popup_height)
          .width(drupalSettings.eu_cookie_compliance.popup_width);
    }
    $html.hide();
    var height = 0;
    if (drupalSettings.eu_cookie_compliance.popup_position) {
      $html.prependTo('body');
      height = $html.outerHeight();

      $html.show()
          .addClass('sliding-popup-top')
          .addClass('clearfix')
        .css({ top: !drupalSettings.eu_cookie_compliance.fixed_top_position ? -(parseInt($('body').css('padding-top')) + parseInt($('body').css('margin-top')) + height) : -1 * height });
      // For some reason, the tab outerHeight is -10 if we don't use a timeout
      // function to reveal the tab.
      setTimeout(function () {
        var height = $html.outerHeight();

        $html.animate({ top: !drupalSettings.eu_cookie_compliance.fixed_top_position ? -(parseInt($('body').css('padding-top')) + parseInt($('body').css('margin-top')) + height) : -1 * height }, drupalSettings.eu_cookie_compliance.popup_delay, null, function () {
          $html.trigger('eu_cookie_compliance_popup_open');
        });
      }.bind($html), 0);
    } else {
      if (drupalSettings.eu_cookie_compliance.better_support_for_screen_readers) {
        $html.prependTo('body');
      } else {
        $html.appendTo('body');
      }
      height = $html.outerHeight();
      $html.show()
          .addClass('sliding-popup-bottom')
          .css({ bottom: -1 * height });
      // For some reason, the tab outerHeight is -10 if we don't use a timeout
      // function to reveal the tab.
      setTimeout(function () {
        var height = $html.outerHeight();

        $html.animate({ bottom: -1 * (height) }, drupalSettings.eu_cookie_compliance.popup_delay, null, function () {
          $html.trigger('eu_cookie_compliance_popup_open');
        });
      }.bind($html), 0);
    }
  };

  Drupal.eu_cookie_compliance.toggleWithdrawBanner = function () {
    var $wrapper = $('#sliding-popup');
    var $tab = $('.eu-cookie-withdraw-tab');
    var topBottom = (drupalSettings.eu_cookie_compliance.popup_position ? 'top' : 'bottom');
    var height = $wrapper.outerHeight();
    var $bannerIsShowing = drupalSettings.eu_cookie_compliance.popup_position ? parseInt($wrapper.css('top')) === (!drupalSettings.eu_cookie_compliance.fixed_top_position ? -(parseInt($('body').css('padding-top')) + parseInt($('body').css('margin-top'))) : 0) : parseInt($wrapper.css('bottom')) === 0;
    if (drupalSettings.eu_cookie_compliance.popup_position) {
      if ($bannerIsShowing) {
        $wrapper.animate({ top: !drupalSettings.eu_cookie_compliance.fixed_top_position ? -(parseInt($('body').css('padding-top')) + parseInt($('body').css('margin-top')) + height) : -1 * height}, drupalSettings.eu_cookie_compliance.popup_delay);
      }
      else {
        $wrapper.animate({ top: !drupalSettings.eu_cookie_compliance.fixed_top_position ? -(parseInt($('body').css('padding-top')) + parseInt($('body').css('margin-top'))) : 0}, drupalSettings.eu_cookie_compliance.popup_delay);
      }
    }
    else {
      if ($bannerIsShowing) {
        $wrapper.animate({'bottom' : -1 * (height)}, drupalSettings.eu_cookie_compliance.popup_delay);
      }
      else {
        $wrapper.animate({'bottom' : 0}, drupalSettings.eu_cookie_compliance.popup_delay);
      }
    }
  };

  Drupal.eu_cookie_compliance.createPopup = function (html, closed) {
    // This fixes a problem with jQuery 1.9.
    var popup = $('<div></div>').html(html);
    popup.attr('id', 'sliding-popup');
    if (!drupalSettings.eu_cookie_compliance.popup_use_bare_css) {
      popup.height(drupalSettings.eu_cookie_compliance.popup_height)
          .width(drupalSettings.eu_cookie_compliance.popup_width);
    }

    popup.hide();
    var height = 0;
    if (drupalSettings.eu_cookie_compliance.popup_position) {
      popup.prependTo('body');
      height = popup.outerHeight();
      popup.show()
        .addClass('sliding-popup-top clearfix')
        .css({ top: -1 * height });
      if (closed !== true) {
        popup.animate({top: 0}, drupalSettings.eu_cookie_compliance.popup_delay, null, function () {
          popup.trigger('eu_cookie_compliance_popup_open');
        });
      }
    } else {
      if (drupalSettings.eu_cookie_compliance.better_support_for_screen_readers) {
        popup.prependTo('body');
      } else {
        popup.appendTo('body');
      }

      height = popup.outerHeight();
      popup.show()
        .addClass('sliding-popup-bottom')
        .css({bottom: -1 * height});
      if (closed !== true) {
        popup.animate({bottom: 0}, drupalSettings.eu_cookie_compliance.popup_delay, null, function () {
          popup.trigger('eu_cookie_compliance_popup_open');
        });
      }
    }
  };

  Drupal.eu_cookie_compliance.attachAgreeEvents = function () {
    var clickingConfirms = drupalSettings.eu_cookie_compliance.popup_clicking_confirmation;
    var scrollConfirms = drupalSettings.eu_cookie_compliance.popup_scrolling_confirmation;

    if (drupalSettings.eu_cookie_compliance.method === 'categories' && drupalSettings.eu_cookie_compliance.enable_save_preferences_button) {
        // The agree button becomes an agree to all categories button when the 'save preferences' button is present.
        $('.agree-button').click(Drupal.eu_cookie_compliance.acceptAllAction);
    }
    else {
        $('.agree-button').click(Drupal.eu_cookie_compliance.acceptAction);
    }
    $('.decline-button').click(Drupal.eu_cookie_compliance.declineAction);

    if (clickingConfirms) {
      $('a, input[type=submit], button[type=submit]').not('.popup-content *').bind('click.euCookieCompliance', Drupal.eu_cookie_compliance.acceptAction);
    }

    if (scrollConfirms) {
      var alreadyScrolled = false;
      var scrollHandler = function () {
        if (alreadyScrolled) {
          Drupal.eu_cookie_compliance.acceptAction();
          $(window).off('scroll', scrollHandler);
        } else {
          alreadyScrolled = true;
        }
      };

      $(window).bind('scroll', scrollHandler);
    }

    $('.find-more-button').not('.find-more-button-processed').addClass('find-more-button-processed').click(Drupal.eu_cookie_compliance.moreInfoAction);
  };

  Drupal.eu_cookie_compliance.attachSavePreferencesEvents = function () {
    $('.eu-cookie-compliance-save-preferences-button').click(Drupal.eu_cookie_compliance.savePreferencesAction);
  };

  Drupal.eu_cookie_compliance.attachHideEvents = function () {
    var popupHideAgreed = drupalSettings.eu_cookie_compliance.popup_hide_agreed;
    var clickingConfirms = drupalSettings.eu_cookie_compliance.popup_clicking_confirmation;
    $('.hide-popup-button').click(function () {
          Drupal.eu_cookie_compliance.changeStatus(2);
        }
    );
    if (clickingConfirms) {
      $('a, input[type=submit], button[type=submit]').unbind('click.euCookieCompliance');
    }

    if (popupHideAgreed) {
      $('a, input[type=submit], button[type=submit]').bind('click.euCookieComplianceHideAgreed', function () {
        Drupal.eu_cookie_compliance.changeStatus(2);
      });
    }

    $('.find-more-button').not('.find-more-button-processed').addClass('find-more-button-processed').click(Drupal.eu_cookie_compliance.moreInfoAction);
  };

  Drupal.eu_cookie_compliance.attachWithdrawEvents = function () {
    $('.eu-cookie-withdraw-button').click(Drupal.eu_cookie_compliance.withdrawAction);
    $('.eu-cookie-withdraw-tab').click(Drupal.eu_cookie_compliance.toggleWithdrawBanner);
  };

  Drupal.eu_cookie_compliance.acceptAction = function () {
    var agreedEnabled = drupalSettings.eu_cookie_compliance.popup_agreed_enabled;
    var nextStatus = 1;
    if (!agreedEnabled) {
      Drupal.eu_cookie_compliance.setStatus(1);
      nextStatus = 2;
    }

    if (!euCookieComplianceHasLoadedScripts && typeof euCookieComplianceLoadScripts === "function") {
      euCookieComplianceLoadScripts();
    }

    if (typeof euCookieComplianceBlockCookies !== 'undefined') {
      clearInterval(euCookieComplianceBlockCookies);
    }

    if (drupalSettings.eu_cookie_compliance.method === 'categories') {
      // Select Checked categories.
      var categories = $("#eu-cookie-compliance-categories input:checkbox:checked").map(function(){
        return $(this).val();
      }).get();
      Drupal.eu_cookie_compliance.setAcceptedCategories(categories);
      // Load scripts for all categories.
      Drupal.eu_cookie_compliance.loadCategoryScripts(categories);
    }

    Drupal.eu_cookie_compliance.changeStatus(nextStatus);
  };

  Drupal.eu_cookie_compliance.acceptAllAction = function () {
    var allCategories = drupalSettings.eu_cookie_compliance.cookie_categories;
    Drupal.eu_cookie_compliance.setPreferenceCheckboxes(allCategories);
    Drupal.eu_cookie_compliance.acceptAction();
  }

  Drupal.eu_cookie_compliance.savePreferencesAction = function () {
    var categories = $("#eu-cookie-compliance-categories input:checkbox:checked").map(function(){
      return $(this).val();
    }).get();
    var agreedEnabled = drupalSettings.eu_cookie_compliance.popup_agreed_enabled;
    var nextStatus = 1;
    if (!agreedEnabled) {
      Drupal.eu_cookie_compliance.setStatus(1);
      nextStatus = 2;
    }

    Drupal.eu_cookie_compliance.setAcceptedCategories(categories);
    if (!euCookieComplianceHasLoadedScripts && typeof euCookieComplianceLoadScripts === "function") {
      euCookieComplianceLoadScripts();
    }
    Drupal.eu_cookie_compliance.loadCategoryScripts(categories);
    Drupal.eu_cookie_compliance.changeStatus(nextStatus);
  };

  Drupal.eu_cookie_compliance.loadCategoryScripts = function(categories) {
    for (var cat in categories) {
      if (euCookieComplianceHasLoadedScriptsForCategory[cat] !== true && typeof euCookieComplianceLoadScripts === "function") {
        euCookieComplianceLoadScripts(categories[cat]);
        euCookieComplianceHasLoadedScriptsForCategory[cat] = true;
      }
    }
  }

  Drupal.eu_cookie_compliance.declineAction = function () {
    Drupal.eu_cookie_compliance.setStatus(0);
    var popup = $('#sliding-popup');
    if (popup.hasClass('sliding-popup-top')) {
      popup.animate({ top: !drupalSettings.eu_cookie_compliance.fixed_top_position ? -(parseInt($('body').css('padding-top')) + parseInt($('body').css('margin-top')) + popup.outerHeight()) : popup.outerHeight() * -1 }, drupalSettings.eu_cookie_compliance.popup_delay, null, function () {
        popup.hide();
      }).trigger('eu_cookie_compliance_popup_close');
    }
    else {
      popup.animate({ bottom: popup.outerHeight() * -1 }, drupalSettings.eu_cookie_compliance.popup_delay, null, function () {
        popup.hide();
      }).trigger('eu_cookie_compliance_popup_close');
    }
  };

  Drupal.eu_cookie_compliance.withdrawAction = function () {
    Drupal.eu_cookie_compliance.setStatus(0);
    Drupal.eu_cookie_compliance.setAcceptedCategories([]);
    location.reload();
  };

  Drupal.eu_cookie_compliance.moreInfoAction = function () {
    if (drupalSettings.eu_cookie_compliance.disagree_do_not_show_popup) {
      Drupal.eu_cookie_compliance.setStatus(0);
      if (drupalSettings.eu_cookie_compliance.withdraw_enabled && drupalSettings.eu_cookie_compliance.withdraw_button_on_info_popup) {
        $('#sliding-popup .eu-cookie-compliance-banner').trigger('eu_cookie_compliance_popup_close').hide();
      }
      else {
        $('#sliding-popup').trigger('eu_cookie_compliance_popup_close').remove();
      }
    } else {
      if (drupalSettings.eu_cookie_compliance.popup_link_new_window) {
        window.open(drupalSettings.eu_cookie_compliance.popup_link);
      } else {
        window.location.href = drupalSettings.eu_cookie_compliance.popup_link;
      }
    }
  };

  Drupal.eu_cookie_compliance.getCurrentStatus = function () {
    var cookieName = (typeof drupalSettings.eu_cookie_compliance.cookie_name === 'undefined' || drupalSettings.eu_cookie_compliance.cookie_name === '') ? 'cookie-agreed' : drupalSettings.eu_cookie_compliance.cookie_name;
    var value = $.cookie(cookieName);
    value = parseInt(value);
    if (isNaN(value)) {
      value = null;
    }

    return value;
  };

  Drupal.eu_cookie_compliance.setPreferenceCheckboxes = function (categories) {
    for (var i in categories) {
      $("#eu-cookie-compliance-categories input:checkbox[value='" + categories[i] + "']").prop("checked", true);
    }
  }

  Drupal.eu_cookie_compliance.getAcceptedCategories = function () {
    var allCategories = drupalSettings.eu_cookie_compliance.cookie_categories;
    var cookieName = (typeof drupalSettings.eu_cookie_compliance.cookie_name === 'undefined' || drupalSettings.eu_cookie_compliance.cookie_name === '') ? 'cookie-agreed-categories' : drupalSettings.eu_cookie_compliance.cookie_name + '-categories';
    var value = $.cookie(cookieName);
    var selectedCategories = [];

    if (value !== null && typeof value !== 'undefined') {
      value = JSON.parse(value);
      selectedCategories = value;
    }

    if (Drupal.eu_cookie_compliance.fix_first_cookie_category && !$.inArray(allCategories[0], selectedCategories)) {
      selectedCategories.push(allCategories[0]);
    }

    return selectedCategories;
  };

  Drupal.eu_cookie_compliance.changeStatus = function (value) {
    var status = Drupal.eu_cookie_compliance.getCurrentStatus();
    var reloadPage = drupalSettings.eu_cookie_compliance.reload_page;
    if (status === value) {
      return;
    }

    if (drupalSettings.eu_cookie_compliance.popup_position) {
      $('.sliding-popup-top').animate({ top: !drupalSettings.eu_cookie_compliance.fixed_top_position ? -(parseInt($('body').css('padding-top')) + parseInt($('body').css('margin-top')) + $('#sliding-popup').outerHeight()) : $('#sliding-popup').outerHeight() * -1 }, drupalSettings.eu_cookie_compliance.popup_delay, function () {
        if (value === 1 && status === null && !reloadPage) {
          $('.sliding-popup-top').not('.eu-cookie-withdraw-wrapper').html(drupalSettings.eu_cookie_compliance.popup_html_agreed).animate({ top: !drupalSettings.eu_cookie_compliance.fixed_top_position ? -(parseInt($('body').css('padding-top')) + parseInt($('body').css('margin-top'))) : 0 }, drupalSettings.eu_cookie_compliance.popup_delay);
          Drupal.eu_cookie_compliance.attachHideEvents();
        } else if (status === 1 && !(drupalSettings.eu_cookie_compliance.withdraw_enabled && drupalSettings.eu_cookie_compliance.withdraw_button_on_info_popup)) {
          $('.sliding-popup-top').not('.eu-cookie-withdraw-wrapper').trigger('eu_cookie_compliance_popup_close').remove();
        }
        Drupal.eu_cookie_compliance.showWithdrawBanner(value);
      });
    } else {
      $('.sliding-popup-bottom').animate({ bottom: $('#sliding-popup').outerHeight() * -1 }, drupalSettings.eu_cookie_compliance.popup_delay, function () {
        if (value === 1 && status === null && !reloadPage) {
          $('.sliding-popup-bottom').not('.eu-cookie-withdraw-wrapper').html(drupalSettings.eu_cookie_compliance.popup_html_agreed).animate({ bottom: 0 }, drupalSettings.eu_cookie_compliance.popup_delay);
          Drupal.eu_cookie_compliance.attachHideEvents();
        } else if (status === 1) {
          if (drupalSettings.eu_cookie_compliance.withdraw_enabled && drupalSettings.eu_cookie_compliance.withdraw_button_on_info_popup) {
            // Restore popup content.
            if (window.matchMedia('(max-width: ' + drupalSettings.eu_cookie_compliance.mobile_breakpoint + 'px)').matches && drupalSettings.eu_cookie_compliance.use_mobile_message) {
              $('.sliding-popup-bottom').not('.eu-cookie-withdraw-wrapper').html(drupalSettings.eu_cookie_compliance.mobile_popup_html_info);
            } else {
              $('.sliding-popup-bottom').not('.eu-cookie-withdraw-wrapper').html(drupalSettings.eu_cookie_compliance.popup_html_info);
            }
            Drupal.eu_cookie_compliance.initPopup();
          }
          else {
            $('.sliding-popup-bottom').not('.eu-cookie-withdraw-wrapper').trigger('eu_cookie_compliance_popup_close').remove();
          }
        }
        Drupal.eu_cookie_compliance.showWithdrawBanner(value);
      });
    }

    if (drupalSettings.eu_cookie_compliance.reload_page) {
      location.reload();
    }

    Drupal.eu_cookie_compliance.setStatus(value);
  };

  Drupal.eu_cookie_compliance.showWithdrawBanner = function (value) {
    if (value === 2 && drupalSettings.eu_cookie_compliance.withdraw_enabled) {
      if (!drupalSettings.eu_cookie_compliance.withdraw_button_on_info_popup) {
        Drupal.eu_cookie_compliance.createWithdrawBanner(drupalSettings.eu_cookie_compliance.withdraw_markup);
      }
      Drupal.eu_cookie_compliance.attachWithdrawEvents();
    }
  };

  Drupal.eu_cookie_compliance.setStatus = function (status) {
    var date = new Date();
    var domain = drupalSettings.eu_cookie_compliance.domain ? drupalSettings.eu_cookie_compliance.domain : '';
    var path = drupalSettings.eu_cookie_compliance.domain_all_sites ? '/' : drupalSettings.path.baseUrl;
    var cookieName = (typeof drupalSettings.eu_cookie_compliance.cookie_name === 'undefined' || drupalSettings.eu_cookie_compliance.cookie_name === '') ? 'cookie-agreed' : drupalSettings.eu_cookie_compliance.cookie_name;
    if (path.length > 1) {
      var pathEnd = path.length - 1;
      if (path.lastIndexOf('/') === pathEnd) {
        path = path.substring(0, pathEnd);
      }
    }

    var cookie_session = parseInt(drupalSettings.eu_cookie_compliance.cookie_session);
    if (cookie_session) {
      $.cookie(cookieName, status, { path: path, domain: domain });
    } else {
      var lifetime = parseInt(drupalSettings.eu_cookie_compliance.cookie_lifetime);
      date.setDate(date.getDate() + lifetime);
      $.cookie(cookieName, status, { expires: date, path: path, domain: domain });
    }
    $(document).trigger('eu_cookie_compliance.changeStatus', [status]);

    // Store consent if applicable.
    if (drupalSettings.eu_cookie_compliance.store_consent && ((status === 1 && drupalSettings.eu_cookie_compliance.popup_agreed_enabled) || (status === 2  && !drupalSettings.eu_cookie_compliance.popup_agreed_enabled))) {
      var url = drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + 'eu-cookie-compliance/store_consent/banner';
      $.post(url, {}, function (data) { });
    }
  };

  Drupal.eu_cookie_compliance.setAcceptedCategories = function (categories) {
    var date = new Date();
    var domain = drupalSettings.eu_cookie_compliance.domain ? drupalSettings.eu_cookie_compliance.domain : '';
    var path = drupalSettings.eu_cookie_compliance.domain_all_sites ? '/' : drupalSettings.path.baseUrl;
    var cookieName = (typeof drupalSettings.eu_cookie_compliance.cookie_name === 'undefined' || drupalSettings.eu_cookie_compliance.cookie_name === '') ? 'cookie-agreed-categories' : drupalSettings.eu_cookie_compliance.cookie_name + '-categories';
    if (path.length > 1) {
      var pathEnd = path.length - 1;
      if (path.lastIndexOf('/') === pathEnd) {
        path = path.substring(0, pathEnd);
      }
    }
    var categoriesString = JSON.stringify(categories);
    var cookie_session = parseInt(drupalSettings.eu_cookie_compliance.cookie_session);
    if (cookie_session) {
      $.cookie(cookieName, categoriesString, { path: path, domain: domain });
    } else {
      var lifetime = parseInt(drupalSettings.eu_cookie_compliance.cookie_lifetime);
      date.setDate(date.getDate() + lifetime);
      $.cookie(cookieName, categoriesString, { expires: date, path: path, domain: domain });
    }
    $(document).trigger('eu_cookie_compliance.changePreferences', [categories]);

    // TODO: Store categories with consent if applicable?
  };

  Drupal.eu_cookie_compliance.hasAgreed = function (category) {
    var status = Drupal.eu_cookie_compliance.getCurrentStatus();
    var agreed = (status === 1 || status === 2);

    if(category !== undefined && agreed) {
      agreed = Drupal.eu_cookie_compliance.hasAgreedWithCategory(category);
    }

    return agreed;
  };

  Drupal.eu_cookie_compliance.hasAgreedWithCategory = function(category) {
    var allCategories = drupalSettings.eu_cookie_compliance.cookie_categories;
    var agreedCategories = Drupal.eu_cookie_compliance.getAcceptedCategories();

    if (drupalSettings.eu_cookie_compliance.fix_first_cookie_category && category === allCategories[0]) {
      return true;
    }

    return $.inArray(category, agreedCategories) !== -1;
  };

  Drupal.eu_cookie_compliance.showBanner = function () {
    var showBanner = false;
    var status = Drupal.eu_cookie_compliance.getCurrentStatus();
    if ((status === 0 && drupalSettings.eu_cookie_compliance.method === 'default') || status === null) {
      if (!drupalSettings.eu_cookie_compliance.disagree_do_not_show_popup || status === null) {
        showBanner = true;
      }
    } else if (status === 1 && drupalSettings.eu_cookie_compliance.popup_agreed_enabled) {
      showBanner = true;
    }

    return showBanner;
  };

  Drupal.eu_cookie_compliance.cookiesEnabled = function () {
    var cookieEnabled = (navigator.cookieEnabled);
    if (typeof navigator.cookieEnabled === 'undefined' && !cookieEnabled) {
      $.cookie('testcookie', 'testcookie', { expires: 100 });
      cookieEnabled = ($.cookie('testcookie').indexOf('testcookie') !== -1);
    }

    return (cookieEnabled);
  };

  Drupal.eu_cookie_compliance.isWhitelisted = function (cookieName) {
    // Skip the PHP session cookie.
    if (cookieName.indexOf('SESS') === 0 || cookieName.indexOf('SSESS') === 0) {
      return true;
    }
    // Split the white-listed cookies.
    var euCookieComplianceWhitelist = drupalSettings.eu_cookie_compliance.whitelisted_cookies.split(/\r\n|\n|\r/g);

    // Add the EU Cookie Compliance cookie.
    euCookieComplianceWhitelist.push((typeof drupalSettings.eu_cookie_compliance.cookie_name === 'undefined' || drupalSettings.eu_cookie_compliance.cookie_name === '') ? 'cookie-agreed' : drupalSettings.eu_cookie_compliance.cookie_name);
    euCookieComplianceWhitelist.push((typeof drupalSettings.eu_cookie_compliance.cookie_name === 'undefined' || drupalSettings.eu_cookie_compliance.cookie_name === '') ? 'cookie-agreed-categories' : drupalSettings.eu_cookie_compliance.cookie_name + '-categories');

    // Check if the cookie is white-listed.
    for (var item in euCookieComplianceWhitelist) {
      if (cookieName === euCookieComplianceWhitelist[item]) {
        return true;
      }
      // Handle cookie names that are prefixed with a category.
      if (drupalSettings.eu_cookie_compliance.method === 'categories') {
        var separatorPos = euCookieComplianceWhitelist[item].indexOf(":");
        if (separatorPos !== -1) {
          var category = euCookieComplianceWhitelist[item].substr(0, separatorPos);
          var wlCookieName = euCookieComplianceWhitelist[item].substr(separatorPos + 1);

          if (wlCookieName === cookieName && Drupal.eu_cookie_compliance.hasAgreedWithCategory(category)) {
            return true;
          }
        }
      }
    }

    return false;
  }

  // Load blocked scripts if the user has agreed to being tracked.
  var euCookieComplianceHasLoadedScripts = false;
  var euCookieComplianceHasLoadedScriptsForCategory = [];
  $(function () {
    if (Drupal.eu_cookie_compliance.hasAgreed()
        || (Drupal.eu_cookie_compliance.getCurrentStatus() === null && drupalSettings.eu_cookie_compliance.method !== 'opt_in' && drupalSettings.eu_cookie_compliance.method !== 'categories')
    ) {
      if (typeof euCookieComplianceLoadScripts === "function") {
        euCookieComplianceLoadScripts();
      }
      euCookieComplianceHasLoadedScripts = true;

      if (drupalSettings.eu_cookie_compliance.method === 'categories') {
        var acceptedCategories = Drupal.eu_cookie_compliance.getAcceptedCategories();
        Drupal.eu_cookie_compliance.loadCategoryScripts(acceptedCategories);
      }
    }
  });

  // Block cookies when the user hasn't agreed.
  if ((drupalSettings.eu_cookie_compliance.method === 'opt_in' && (Drupal.eu_cookie_compliance.getCurrentStatus() === null  || !Drupal.eu_cookie_compliance.hasAgreed()))
      || (drupalSettings.eu_cookie_compliance.method === 'opt_out' && !Drupal.eu_cookie_compliance.hasAgreed() && Drupal.eu_cookie_compliance.getCurrentStatus() !== null)
      || (drupalSettings.eu_cookie_compliance.method === 'categories')
  ) {
    var euCookieComplianceBlockCookies = setInterval(function () {
      // Load all cookies from jQuery.
      var cookies = $.cookie();

      // Check each cookie and try to remove it if it's not white-listed.
      for (var i in cookies) {
        var remove = true;
        var hostname = window.location.hostname;
        var cookieRemoved = false;
        var index = 0;

        remove = !Drupal.eu_cookie_compliance.isWhitelisted(i);

        // Remove the cookie if it's not white-listed.
        if (remove) {
          while (!cookieRemoved && hostname !== '') {
            // Attempt to remove.
            cookieRemoved = $.removeCookie(i, { domain: '.' + hostname, path: '/' });
            if (!cookieRemoved) {
              cookieRemoved = $.removeCookie(i, { domain: hostname, path: '/' });
            }

            index = hostname.indexOf('.');

            // We can be on a sub-domain, so keep checking the main domain as well.
            hostname = (index === -1) ? '' : hostname.substring(index + 1);
          }

          // Some jQuery Cookie versions don't remove cookies well.  Try again
          // using plain js.
          if (!cookieRemoved) {
            document.cookie = i + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/;';
          }
        }
      }
    }, 5000);
  }

})(jQuery, Drupal, drupalSettings);
;
/**
 * All the JS used on the filter pages (newsroom).
 */
(function ($, Drupal, drupalSettings, window) {
  $(document).ready(function () {
    // Filtres neswroom.
    if ($('#container-newsroom-filter').length) {
      newsroomFilter();
    }
    // Filtres fournisseurs.
    if ($('#container-provider-filter').length) {
      providerFilter();
    }
    // Filtres finance.
    if ($('#container-finance-filter').length) {
      financeFilter();
    }
    // Agenda.
    if ($('#container-agenda-filter').length) {
      agendaFilter();
    }

    // Activate focus update after loading more results for filter pages.
    updateFocus();
  });

  /**
   * Update focus after loading more results.
   *
   * Works for every filter pages based on infinite scroll pager.
   */
  function updateFocus() {
    // Init number of results on the page.
    var old_results_count = $('li.search-filter-results-item').length;

    // Update focus after load more pages.
    if (old_results_count > 0) {
      $(document).on('ajaxComplete', function (event, xhr, settings) {
        // Check that the ajax complete is related to an infinite scroll insert.
        var jsonResponse = xhr.responseJSON;
        if (Array.isArray(jsonResponse) && jsonResponse.length >= 2 && jsonResponse[1].hasOwnProperty('method')) {
          if (jsonResponse[1].method === 'infiniteScrollInsertView') {

            // Get the new clickable items and set focus to the topmost one.
            var new_results = $('li.search-filter-results-item');
            var item_to_focus = new_results.slice(old_results_count).find('a, button, iframe').first();
            if (item_to_focus.length) {
              // Buttons for next and previous image on slideshows are loaded after first image is loaded.
              // We need to use a trick to know when the image is loaded and wait for arrays to be settled.
              // Slideshows are on theme and visual ressources pages.
              if (item_to_focus.is('button.btn-arrow-slideshow')) {
                var container = item_to_focus.closest('slideshow-edito');
                var img = container.find('ul.slideshow-container li').eq(1).find('img');
                if (img) {
                  $('<img/>')
                    .on('load', function () {
                      setTimeout(function () {item_to_focus.focus().addClass('focus-visible');}, 100);
                    })
                    .attr('src', img.attr('src'));
                }
              }
              // We can't set focus to iframe content because we don't have access to the content (@see CORS).
              // The only solution is to wait for the iframe to be loaded and set a timeout for the dom to be ready.
              // Videos are on theme and visual ressources pages.
              else if (item_to_focus.is('iframe.block-videos-iframe')) {
                item_to_focus.ready(function () {
                  setTimeout(function () {item_to_focus.focus().addClass('focus-visible');}, 300);
                });
              }
              // Links, easily focusable.
              else {
                item_to_focus.focus().addClass('focus-visible');
              }
            }
            // Update global variable.
            old_results_count = new_results.length;
          }
        }
      });
    }
  }

  /**
   * Finance filtering.
   */
  function financeFilter() {
    var selectLibs = {};
    var relations = drupalSettings.finance.relations;
    var values = drupalSettings.finance.values;
    var selectEntity = $('#edit-field-finance-entity-vocabulary-target-id');
    var selectNature = $('#edit-field-finance-nature-vocabulary-target-id');
    var formType = $('#form-type');
    var selectNatureContainer = selectNature.closest('.js-form-type-select');
    var gridContainer = $('#grid-container');
    var financeNature = $('.js-form-item-field-finance-nature-vocabulary-target-id');
    var financeYear = $('.js-form-item-finance-year');
    var financeLanguage = $('.js-form-item-field-document-link-language-value');

    // Saving nature select libs.
    selectNature.find('option').each(function() {
      selectLibs[$(this).val()] = $(this).text();
    });

    // Use the server value on loading because when the user goes to the previous page
    // with his browser, it sometimes display the wrong entity/nature (COM-8793).
    selectEntity.val(values.entity);
    selectNature.val(values.nature);

    // Init on loading.
    onEntityChange(values.entity);

    // Change event on main select.
    selectEntity.on('change', function() {
      onEntityChange($(this).val());
    });

    /**
     * Main function for finance.
     *
     * Handle simple/advanced search, GTM, hide/show filters.
     *
     * @param entityId
     *   The new value of the entity select.
     */
    function onEntityChange(entityId) {

      var natures, entityLabel, selectedNature;

      // Send GTM.
      entityLabel = selectEntity.find('option[value="' + entityId + '"]').text().trim();
      sendGTM(entityLabel);

      // Empty natures and set nature value to 'All'.
      selectedNature = selectNature.val();
      clearNatureOptions();

      if (entityId === 'All') {
        hideAdvancedSearch();
      }
      else {
        natures = relations[entityId];
        fillNatureOptions(natures, selectedNature);
        natures.length ? showNatureFilter() : hideNatureFilter();
        showAdvancedSearch();
      }
    }

    /**
     * Show advanced search.
     */
    function showAdvancedSearch() {
      formType.attr('value', 'advanced');
      financeYear.removeClass('js-hidden');
      financeLanguage.removeClass('js-hidden');
    }

    /**
     * Hide advanced search.
     */
    function hideAdvancedSearch() {
      // Set simple search.
      formType.attr('value', 'simple');
      // Reset fields.
      financeYear.find('select option[value="all"]').prop('selected', true);
      financeLanguage.find('select option[value="All"]').prop('selected', true);
      // Hide filters containers.
      financeNature.addClass('js-hidden');
      financeYear.addClass('js-hidden');
      financeLanguage.addClass('js-hidden');
    }

    /**
     * Show nature filter.
     */
    function showNatureFilter() {
      gridContainer.addClass('grid-3-small-1');
      gridContainer.removeClass('grid-2-small-1');
      selectNatureContainer.removeClass('js-hidden');
    }

    /**
     * Hide nature filter.
     */
    function hideNatureFilter() {
      selectNatureContainer.addClass('js-hidden');
      gridContainer.addClass('grid-2-small-1');
      gridContainer.removeClass('grid-3-small-1');
    }

    /**
     * Empty the nature select and set nature value to 'All'.
     */
    function clearNatureOptions() {
      // Clear previous natures.
      selectNature.find('option').each(function() {
        if ($(this).val() !== 'All') {
          $(this).remove();
        }
      });
      // Default value for nature is 'All';
      selectNature.val('All');
    }

    /**
     * Fill the nature select with all the given items.
     *
     * @param items
     *   Nature term ids.
     */
    function fillNatureOptions(items, lastSelected) {
      var item, option, optionValue, optionLabel;
      for (item in items) {
        // Create option.
        optionValue = items[item];
        optionLabel = selectLibs[optionValue];
        option = {'value': optionValue, 'text': optionLabel};
        // If the page has been refreshed, we have to re-set selected value
        // because init removed it.
        if (optionValue === lastSelected) {
          option.selected = 'selected';
        }
        selectNature.append($('<option>', option));
      }
    }

    /**
     * Send dataLayer data.
     *
     * @param entityLabel
     *   The entity filter selected label.
     */
    function sendGTM(entityLabel) {
      // Triggered when a categorie is selected in research bar.
      dataLayer.push({
        event: 'gtmClic',
        niveau_1: 'finance',
        niveau_2: 'menu deroulant',
        niveau_3: entityLabel
      });
    }
  }

  /**
   * Fournisseurs filtering.
   */
  function providerFilter() {
    var advForm = $('#form-advanced');
    var simpleForm = $('#form-simple');
    var typeSearch = $('#type-search');
    var buttonSearch = $('[data-submit]').clone();
    var inputSearch = $('#input-search');
    var formType = $('#form-type');

    // Copy search button.
    buttonSearch.attr('id', 'simple-search-button');
    buttonSearch.addClass('search-filter-form-simple-btn');
    buttonSearch.removeClass('search-filter-advanced-form-btn');
    simpleForm.append(buttonSearch);

    // Click on form toggle button.
    typeSearch.on('click', function() {
      toggleAdvanced();
    });

    // Change state of form: simple/advanced.
    function toggleAdvanced() {
      typeSearch.find('#show-advanced').toggleClass('js-hidden');
      typeSearch.find('#hide-advanced').toggleClass('js-hidden');
      typeSearch.toggleClass('');
      advForm.toggleClass('js-hidden');
      simpleForm.toggleClass('js-hidden');
      inputSearch.toggleClass('search-filter-form-simple-field-wrapper');
      inputSearch.toggleClass('search-filter-advanced-form-field-wrapper');
      formType.attr('value', formType.attr('value') === 'simple' ? 'advanced' : 'simple');
    }
  }

  // Datepickers for agenda.
  function agendaFilter() {
    // Create our datepickers.
    var langcode = drupalSettings.agenda.langcode;
    var fromDateInput = $('#agenda-date-from');
    var toDateInput = $('#agenda-date-to');
    sncfDatepicker($, langcode, fromDateInput, toDateInput);
  }

  /**
   * Newsroom filtering.
   */
  function newsroomFilter() {
    // Classes used in the twig file.
    // Search fields.
    var simpleSearchTextInput = '#input-search-form-filter-simple';
    var advancedSearchTextInput = '#input-search-form-filter-advanced';
    // Update advanced search text when simple search text is updated.
    synchroniseValueFieldsOnChange(simpleSearchTextInput, advancedSearchTextInput);

    // Filter to select type visual resources (taxo).
    var simpleTypeVisualResources = '#select-type-visual-resources-simple';
    var advancedTypeVisualResources = '#select-type-visual-resources-advanced';
    // Update advanced/simple type filter when it is updated.
    synchroniseValueFieldsOnChange(simpleTypeVisualResources, advancedTypeVisualResources);

    // Filter to select type of content of visual resources (diap or yout).
    var simpleTypeFormatContent = '#select-type-content-simple';
    var advancedTypeFormatContent = '#select-type-content-advanced';
    // Update advanced/simple type filter when it is updated.
    synchroniseValueFieldsOnChange(simpleTypeFormatContent, advancedTypeFormatContent);

    // Hide / show advanced search div.
    // This div is the container of the accordion commands.
    // It allows this custom JS to be executed on the same event than the accordion JS.
    $('[data-accordion-btn]').on('click', function () {
      // var formType = $('#form-type');
      // Hide/show advanced search.
      $('[data-toggle-hidden]').toggleClass('js-hidden');
      // Set search type hidden field. Commented in case it would serve later.
      // formType.val($('[data-accordion-content]').hasClass('js-hidden') ? 'simple' : 'advanced');
    });

    // Create our datepickers.
    // Those pages are only in french.
    var startDateInput = $('#search-filter-advanced-form-date');
    var endDateInput = $('#search-filter-to-advanced-date');
    sncfDatepicker($, 'fr', startDateInput, endDateInput);

    // Add callback to submission to clean Form from unused fields.
    $('.search-filter-form-container').find('form').submit(cleanUnusedFields);
  }

  /**
   * Clean URL from unused fields.
   *
   * If this is a simple search, all advanced parameters are removed.
   * If this is an avanced search, all simple parameters are removed.
   *
   * @param e
   *   The event.
   */
  function cleanUnusedFields(e) {
    // Get the input field displayed to know if we are on simple or advanced search.
    var typeForm = $('[data-accordion-content]').hasClass('js-hidden') ? 'simple' : 'advanced';

    // Selectors for simple and advanced fields.
    var simple_selector = 'input[name*="simple"]';
    var advanced_selector = 'input[name*="date"], input[name*="advanced"], select[name*="filter"]';

    // Get selector of elements that should be removed from the URL.
    var selector_to_remove = (typeForm === 'advanced' ? simple_selector : advanced_selector);

    // If an element has no name then it won't appear in the URL and it won't be passed to the server.
    $(this).find(selector_to_remove).prop('name', '');
  }


  /**
   * On change of value of a field, add this new value to another field
   * (Create to synchronize advanced and simple fields..)
   *
   * @param selectorFieldChanged
   * @param selectorFieldToChange
   */
  function synchroniseValueFieldsOnChange(selectorFieldChanged, selectorFieldToChange) {
    $(selectorFieldChanged).on('change', function () {
      $(selectorFieldToChange).val($(this).val());
    });
    $(selectorFieldToChange).on('change', function () {
      $(selectorFieldChanged).val($(this).val());
    });
  }

})(jQuery, Drupal, drupalSettings, this);
;
/**
 * @file
 * Focus strate on page load.
 */
(function ($, Drupal, drupalSettings) {
  $(document).ready(function () {
    var top, strateId = getUrlParameter('strate_id');
    var strate = $('[data-strate-id="' + strateId + '"]');
    if (strate.length) {
      top = strate.offset().top
        - $('.js-be-sticky').outerHeight(true)       // Subhome tabs sticky header.
        - $('.header-for-sticky').outerHeight(true)  // Banner with menu and breadcrumb.
      $('html, body').animate({scrollTop: top}, 2000);
    }
  });

  /**
   * Helper function to get query string parameter value.
   *
   * Source: https://davidwalsh.name/query-string-javascript
   * @param name
   * @returns {string}
   */
  function getUrlParameter(name) {
    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    var results = regex.exec(location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
  }

})(jQuery, Drupal, drupalSettings);
;
/**
 * Created by cfraysse on 08/02/2018.
 */


window.snc = {};


function createUrlForGAClientIDTracking(event, $) {
  if (event !== undefined) {
    if (event.which != 3) { // prevent right click to trigger this behaviour.

      // getting the target of the click to avoid problems when the are
      // multiple external links
      var $clickedLink = $(event.target);

      var linkHref = $clickedLink.attr("href"); // get the href's value

      var linkModified;

      linkModified = addGAClientIdToUrl(linkHref);

      if (linkModified !== linkHref) {
        $clickedLink.attr("href", linkModified);
      }

    }
  }
}

function addGAClientIdToUrl(linkHref) {
  var linkModified = linkHref;

  // Marginal cases (Private navigation for example),
  // ga object is generated asynchronously by GTM and could be set twice with
  // different names.
  if (linkHref && typeof window[window.GoogleAnalyticsObject] !== 'undefined' && typeof window[window.GoogleAnalyticsObject].getAll === "function") {

    // Getting the domains list from drupal settings:
    var trackedDomainsListSetting = drupalSettings.sncf_generic.ga_userid_tracking.tracked_domains;
    var separator = ";"; // the separator for the splitting of the settings
    // form values.
    var defaultDomainUrls = ["oui.sncf", "uk.voyages-sncf"];
    var isLinkToTrackedDomain = false; // is a link targeting a tracked
                                       // domain ?
    var pattern = /\?gaID=.*/;
    var hasAlreadyClientId = pattern.test(linkHref);
    if (!hasAlreadyClientId) {
      // fetching the client id from Google Analytics object ("ga").
      var clientId = "";
      try {
        clientId = window[window.GoogleAnalyticsObject].getAll()[0].get('clientId');
      }
      catch (e) {
        // TODO : log error.
      }

      if (!trackedDomainsListSetting) {
        defaultDomainUrls.forEach(function(element) {
            isLinkToTrackedDomain = isLinkToTrackedDomain || linkHref.indexOf(element) > -1;
        });
      }
      else {
        //checking if trackedDomainsListSetting is really a list
        var isAlist = (trackedDomainsListSetting.indexOf(separator) > -1);
        var arrDomainsList = [];

        var validDomainNamesPattern = /^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$/;
        var arrValidDomainsList = [];

        if (isAlist) {

          // splitting the form setting textfield values to get an array
          arrDomainsList = trackedDomainsListSetting.split(separator);

          // filtering to get only valid domains name.
          for (var i = 0; i < arrDomainsList.length; i++) {
            if (validDomainNamesPattern.test(arrDomainsList[i])) {
              arrValidDomainsList.push(arrDomainsList[i]);
            }
          }
          // if there are no valid domain
          if (arrValidDomainsList.length === 0) {
            arrValidDomainsList = defaultDomainUrls;
          }

          // Is the link is aiming to a tracked domain ?
          for (var y = 0; y < arrValidDomainsList.length; y++) {
            if (linkHref.indexOf(arrValidDomainsList[y]) > -1) {
              isLinkToTrackedDomain = true;
              break;
            }
          }

        }
        else {
          // if it's not a list, we still check its domain name validity.
          var validDomainNames = (validDomainNamesPattern.test(trackedDomainsListSetting)
            ? trackedDomainsListSetting : defaultDomainUrls);

          if (Array.isArray(validDomainNames)) {
            validDomainNames.forEach(function (element) {
              isLinkToTrackedDomain = isLinkToTrackedDomain || linkHref.indexOf(element) > -1;
            });
          } else {
            if (linkHref.indexOf(validDomainNames) > -1) {
              isLinkToTrackedDomain = true;
            }
          }
        }
      }

      // now that we checked domains name validty, is the link targetting a
      // domain we want the client id to be added and if we have this
      // clientId... replaced by "gaID" (@see COM-6908)
      if (clientId && isLinkToTrackedDomain) {
        //... we add it to the href.
        linkModified = linkHref + "?gaID=" + clientId;
      }
    }
  }

  return linkModified;
}

// externalization for MIV
window.snc.addGAClientIdToUrl = addGAClientIdToUrl;


(function ($, Drupal, drupalSettings) {

  // Getting if the user tracking system is enabled or not
  var isUserTrackingIsEnabled = drupalSettings.sncf_generic.ga_userid_tracking.enable_user_tracking;

  if (isUserTrackingIsEnabled) {
    var $linkExternal = $("a.links-external");

    // using mousedown so middle mouse button will trigger the behaviour too
    $linkExternal.on('mousedown', function (event) {
      createUrlForGAClientIDTracking(event, jQuery);
    });

  }

}(jQuery, Drupal, drupalSettings));
;
/**
 * @file
 * Script for tracking on homepage node.
 */
(function ($, Drupal) {

  /**
   * Helper function to push the datalayer.
   *
   * @param level1
   * @param level2
   * @param level3
   */
  function pushDataLayer(level1, level2, level3) {
    dataLayer.push({
      event: 'gtmClic',
      niveau_1: level1,
      niveau_2: level2,
      niveau_3: level3
    });
  };

  Drupal.behaviors.homepageTracking = {
    attach: function (context, settings) {

      // GTM on paragraph 'news_block'.
      $('[data-paragraph-bundle="news_block"]', context).once('homepageTracking').each(function () {
        $(this).find('a').on('click', function () {
          // Get the title.
          var currentVignette = $(this);
          var title = currentVignette.find('.top-news-content-title');
          var titleText = title.length ? title.text() : '';
          // Get the position. Default to -1.
          var allVignettes = $('.top-news-content');
          var position = -1;
          allVignettes.each(function (index, vignette) {
            if ($(vignette).is(currentVignette)) {
              // As indexes start at 0, add 1.
              position = index + 1;
            }
          });
          // Push data.
          pushDataLayer('Bloc Push', titleText, position);
        });
      });
    }
  };

})(jQuery, Drupal);
;
/**
 * @file
 * Initialise the styleguide carousel.
 */


(function ($, Drupal, drupalSettings, window) {

  'use strict';

  var carousel_settings = ((drupalSettings || {}).sncfcom || {}).carousel;
  if (carousel_settings && $.fn.carousel_homepage) {
    // Check animation cookie.
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) === ' ') c = c.substring(1, c.length);
      if (c === "accessibility-animation=desactivated") {
        carousel_settings.auto_play = false;
        break;
      }
    }
    $('.home-carousel').carousel_homepage(carousel_settings);
  }

})(jQuery, Drupal, drupalSettings, this);
;
var overlay = function ($) {
  var searchButton, searchString, overlayContainer, loader;
  searchButton = $('[data-overlay-btn]');
  searchString = $('[data-overlay-input]');
  overlayContainer = $('[data-overlay-container]');
  loader = $('[data-overlay-loader-img]');

  // Initialisations.
  function init() {
    searchButton.on('click', goSearch);
    $(document).on('keydown', keydownEvent);
  }

  // Keydown listener.
  function keydownEvent(event) {
    if ((event.keyCode === 13) && (overlayContainer.hasClass('is-opened'))) {
      searchButton.click();
      return false;
    }

    return this;
  }

  // Going to search page.
  function goSearch() {
    var url, form;
    if (!searchString.val()) {
      return false;
    }
    loader.removeClass('js-hidden');
    url = window.location.protocol + '//' + document.location.hostname + drupalSettings.search.page;
    form = $('<form action="' + url + '" method="post" class="js-hidden">' +
      '<input type="text" name="search" value="' + searchString.val() + '" />' +
      '</form>');
    $('#expand-main-search').append(form);
    form.submit();
    return false;
  }

  // Exposing needed functions.
  return {
    init: init
  };
};

jQuery(document).ready(function (jQuery) {
  'use strict';

  overlay(jQuery).init();
  autocomplete(jQuery,
    'data-overlay-input',
    'data-overlay-autocomplete-container',
    'results-overlay-suggestions',
      drupalSettings.search.langcode).init();

  jQuery(document).on('focus', 'li.autocomplete-suggestion-item', function(){
    jQuery('[aria-labelledby="input-search-navigation-form"]').attr('aria-activedescendant', this.id);
    jQuery('input#input-search-navigation-form').attr('aria-activedescendant', this.id);
    jQuery(this).attr('aria-selected', "true");

  });
  jQuery(document).on('focusout', 'li.autocomplete-suggestion-item', function(){
    jQuery('[aria-labelledby="input-search-navigation-form"]').attr('aria-activedescendant', "");
    jQuery('input#input-search-navigation-form').attr('aria-activedescendant', "");
    jQuery(this).attr('aria-selected', "false");
  });

});
;
var autocomplete = function($, inputField, container, template, langcode) {
  var autoInputField, autoContainer, autoResults, resultsUl, stationsResultsUl, timeout;
  autoInputField = $('[' + inputField + ']');
  autoContainer = $('[' + container + ']');
  template = $('#' + template).html();
  autoResults = [];
  resultsUl = autoContainer.find('[data-suggestions-ul]');
  stationsResultsUl = autoContainer.find('[data-stations-suggestions-ul]');

  // Hmmm...init ?
  function init() {
    autoInputField.on('input', function() {
      if (timeout) {
        clearTimeout(timeout);
      }
      timeout = setTimeout(function() {
        search();
      }, 500);
    });
    // The touchend event is for IOS. IOS can't understand a click event that is not
    // on a <a> tag, or on something having a CSS property cursor: pointer.
    // It triggers when the screen is touched, or dragged.
    //$(document).on('click touchend', toggleContainerOnClick);
    $(document).on('click', toggleContainerOnClick);
    $(document).on('keypress', goToExternalSuggestion);
  }

  // Autocomplete base.
  function search() {
    if (autoInputField.val().length < 2) {
      if (isOpened()) {
        hideContainer();
      }
    }
    else {
      showContainer();
      getData();
    }
  }

  function goToExternalSuggestion(e){
    if(e.which == 13){
      jQuery('a.links-internal.focus-visible').trigger('click');
    }

  }

  // Ajax call to get data.
  function getData() {
    $.ajax({
      url: location.protocol + '//' + document.location.hostname + '/search-engine/search-autocomplete',
      type: 'GET',
      dataType: 'json',
      data: {
        langcode: langcode,
        categories: '',
        search: autoInputField.val()
      },
      beforeSend: function (jqXHR, settings) {
      },
      success: function (result, status) {
        // Careful with async :p
        hideError();
        clearResults();
        autoResults = result;
        showSuggestions();
        accessibilityMessage(result.count);
        displayErrorNoResults(result.count);
      },
      error: function (result, status, error) {

        // Detect if user imputed a  special character.
        let format = /[ !@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/;
        if (autoInputField.val().match(format)){
          displayErrorNoResults(0);
        } else {
          showError();
        }

      },
      complete: function (result, status) {
      }
    });
  }

  /**
   * Show suggestions.
   */
  function showSuggestions() {
    // Init variables.
    var hasResults, hasStationResults, selector, resultsContainer, stationsResultsContainer;
    hasResults = autoResults.pages.length > 0;
    hasStationResults = autoResults.gares.length > 0;
    selector = '.autocomplete-category-block-search';
    resultsContainer = resultsUl.parent(selector);
    stationsResultsContainer = stationsResultsUl.parent(selector);

    // Remove inline style, show columns previoulsy hidden, and show results.
    if (hasResults) {
      stationsResultsContainer.removeAttr('style');
      resultsContainer.removeClass('js-hidden');
      buildSuggestions(resultsUl, autoResults.pages, 'suggestion');
    }
    if (hasStationResults) {
      resultsContainer.removeAttr('style');
      stationsResultsContainer.removeClass('js-hidden');
      buildSuggestions(stationsResultsUl, autoResults.gares, 'gare');
    }

    // Stretch column with results and hide the empty one(s).
    if (hasResults && !hasStationResults) {
      resultsContainer.css('width', '100%');
      stationsResultsContainer.addClass('js-hidden');
    }
    if (!hasResults && hasStationResults) {
      stationsResultsContainer.css('width', '100%');
      resultsContainer.addClass('js-hidden');
    }
    if (!hasResults && !hasStationResults) {
      resultsContainer.addClass('js-hidden');
      stationsResultsContainer.addClass('js-hidden');
    }
  }

  /**
   * Fill the suggestion list with the given results.
   *
   * @param ul The <ul> element that will contains suggestions.
   * @param results All the results as JSON.
   */
  function buildSuggestions(ul, results, indexation) {
    var li, resultLink, resultTitle;
    results.forEach(function (result, index) {
      // Clone template.
      li = $(template).clone();
      // Set link.
      resultLink = li.find('[data-link]');
      resultLink.attr('href', result.uri);
      li.attr('id', indexation.concat(index));
      // Set title.
      resultTitle = li.find('[data-title]');
      resultTitle.text(result.title || '');
      // Remove tag span with "SUGGESTION".
      if (indexation === 'gare') {
        li.find('span').remove();
      }
      // Add to list.
      ul.append(li);
    });
  }

  // Empty results and autocomplete overlay.
  function clearResults() {
    autoResults = [];
    // Clear results blocks.
    resultsUl.empty();
    stationsResultsUl.empty();
    autoContainer.find('[data-results-num-access]').text('');
    autoContainer.find('[data-results-num-access-overlay]').text('');
  }

  // Hide autocomplete popup.
  function hideContainer() {
    autoContainer.addClass('js-hidden');
  }

  // Show autocomplete popup.
  function showContainer() {
    autoContainer.removeClass('js-hidden');
  }

  // Show autocomplete error message.
  function showError() {
    autoContainer.find('[data-autocomplete-error]').removeClass('js-hidden');
    autoContainer.find('[data-autocomplete-no-result-error]').addClass('js-hidden');
    autoContainer.find('[data-autocomplete-suggestions]').addClass('js-hidden');
  }

  // Hide autocomplete error message.
  function hideError() {
    autoContainer.find('[data-autocomplete-error]').addClass('js-hidden');
    autoContainer.find('[data-autocomplete-suggestions]').removeClass('js-hidden');
  }

  // Is autocompletePopup opened ?
  function isOpened() {
    return !autoContainer.hasClass('js-hidden');
  }

  // On mouse click, may hide the container.
  function toggleContainerOnClick(evt) {
    var parents, inSuggestions, target;
    parents = $(evt.target).parents();

    inSuggestions = false;
    parents.each(function() {
      if ($(this).attr(container) !== undefined) {
        inSuggestions = true;
        return false;
      }
    });

    // Blacklist some classnames.
    target = evt.target.className;
    if (typeof target.indexOf === 'function' && target.indexOf('carousel_') !== -1) {
      inSuggestions = true;
    }

    if (isOpened() && !inSuggestions) {
      hideContainer();
    }

    return this;
  }

  function accessibilityMessage(nbResults) {
    autoContainer
      .find('[data-results-num-access]')
      .text(nbResults > 0 ? nbResults + ' ' + drupalSettings.search.t.resultsAccess : drupalSettings.search.t.noResultsAccess);
    autoContainer
      .find('[data-results-num-access-overlay]')
      .text(nbResults > 0 ? nbResults + ' ' + drupalSettings.search.t.resultsAccess : drupalSettings.search.t.noResultsAccess);
  }

  function displayErrorNoResults(nbResults) {
    if (nbResults < 1) {
      autoContainer.find('[data-autocomplete-no-result-error]').removeClass('js-hidden');
      autoContainer.find('[data-autocomplete-suggestions]').addClass('js-hidden');
    }
    else {
      autoContainer.find('[data-autocomplete-no-result-error]').addClass('js-hidden');
      autoContainer.find('[data-autocomplete-suggestions]').removeClass('js-hidden');
    }
  }

  return {
    init: init
  };
};
;
/**
 * @file
 * Handle GTM tags for the overlay.
 *
 * @see COM-8034
 */

'use strict';

(function ($, window) {

  // Trigger quick access click (@see line 29 excel).
  $(document).on('click', '[data-quick-access=\'\']',  function() {
    var quickAccessText = $(this).text() ? $(this).text().trim() : '';
    var quickAccessUrl = window.location.origin + $(this).attr('href');
    dataLayer.push({
      event: 'gtmClic',
      niveau_1: 'moteur de recherche interne',
      niveau_2: 'acces rapide',
      niveau_3: quickAccessText,
      niveau_4: quickAccessUrl
    });
  });


  // Trigger autocomplete click (@see line 32 excel).
  $(document).on('click', '[data-autocomplete-link=\'\']',  function() {
    var autocompleteLinkText = $(this).text() ? $(this).text().trim() : '';
    var autocompleteLinkUrl = window.location.origin + $(this).attr('href');
    dataLayer.push({
      event: 'gtmClic',
      niveau_1: 'moteur de recherche interne',
      niveau_2: 'suggestions',
      niveau_3: autocompleteLinkText,
      niveau_4: autocompleteLinkUrl
    });
  });

})(jQuery, this);
;
/**
 * @file
 * Initialise the styleguide carousel.
 */
(function ($, Drupal, drupalSettings, window) {

  'use strict';

  $(window).on("load", function () {
    if ($.fn.navigation_menu) {
      $('.main-menu-btn-container').navigation_menu({
        menu: drupalSettings.list_menu,
        whitelist: drupalSettings.whitelist,
        defaultBackMenuTitle: Drupal.t("Return to main menu"),
        currentBackMenuTitle: Drupal.t("Return to level %menu"),
        titleExternalLink: Drupal.t("New window"),
      });
    }

    /**
     * COM-5568.
     * Gestion des liens du footer 'internes'
     */
    $('.footer-list-links a[target!=\'_blank\']').on('click', (function(e) {
      window.location.href = e.target.href;
      $(window).trigger('snc:nav_menu:update_menu');
    }));
  });
})(jQuery, Drupal, drupalSettings, this);
;
(function ($) {
  "use strict";
  Drupal.behaviors.iv = {
    attach: function (context) {
      ivApp.default(
        'app', {
          arianeTargetId: drupalSettings.portailiv.arianeTargetId,
          endpoint: drupalSettings.portailiv.endpoint,
          features: drupalSettings.vsctFeatureFlipping['front-iv'],
          timeout: drupalSettings.portailiv.timeout,
          nbPlaces: drupalSettings.portailiv.nbPlaces,
          base: '/modules/custom/sncf_portailiv/app/dist/',
          nbDaysBefore: drupalSettings.portailiv.nbDaysBefore,
          nbDaysAfter: drupalSettings.portailiv.nbDaysAfter,
          regexMobileDetection: drupalSettings.portailiv.regexMobileDetection,
          intercalaire: drupalSettings.portailiv.intercalaire,
          export: $.fn.export,
          wording: drupalSettings.portailiv.wording,
          nbPreviousSearch: drupalSettings.portailiv.nbPreviousSearch,
          locationItinerary: $.fn.locationItinerary,
          breadcrumbReact: $.fn.breadcrumbReact,
          resultItinerary: $.fn.resultItinerary,
          resultPartnerItinerary: $.fn.resultPartnerItinerary,
          resultMapBoolItinerary: $.fn.resultMapBoolItinerary,
          downloadLinkGTM: $.fn.downloadLinkGTM,
          modeTransportGTM: $.fn.modeTransportGTM,
          submitSearchGTM: $.fn.submitSearchGTM,
          errorCatch: $.fn.errorCatch,
          vscBookTicketFR: drupalSettings.portailiv.vscBookTicketFR,
          vscBookTicketEN: drupalSettings.portailiv.vscBookTicketEN,
          vscBookTicketDE: drupalSettings.portailiv.vscBookTicketDE,
          vscCardsAndPassesFR: drupalSettings.portailiv.vscCardsAndPassesFR,
          vscCardsAndPassesEN: drupalSettings.portailiv.vscCardsAndPassesEN,
          vscCardsAndPassesDE: drupalSettings.portailiv.vscCardsAndPassesDE,
          modesOfTransport: drupalSettings.portailiv.modesOftransport,
          sncfCodesModes: drupalSettings.portailiv.sncfCodesModes,
          addGAClientIdToUrl: snc.addGAClientIdToUrl,
          isFluxMapsAlt: drupalSettings.portailiv.isFluxMapsAlt,
          basicAuthMIV: drupalSettings.portailiv.basicAuthMIV,
        }
      );
    }
  };
})(jQuery);
;
/**
 * Complete tagManager with itinerary information.
 * Required:
 * - jQuery
 * Usage:
 *  Call the function on react.
 */
(function ($) {
  $.fn.resultItinerary = function (itineraryArray) {
    var itiConseille
    var itiMoinsChangement
    var itiMoinsMarche
    itineraryArray.forEach(function (y) {
      if (y.length > 1) {
        switch (y[0]) {
          case "TRAJET_CONSEILLE":
            itiConseille = y[1];
            break;

          case "MOINS_CORRESPONDANCE":
            itiMoinsChangement = y[1];
            break;

          case "MOINS_MARCHE":
            itiMoinsMarche = y[1];
            break;
        }
      }
    });

    dataLayer.push({
      'sncfItineraireMIV_trajetConseille': itiConseille != undefined ? itiConseille : '',
      'sncfItineraireMIV_moinsDeChangements': itiMoinsChangement != undefined ? itiMoinsChangement : '',
      'sncfItineraireMIV_moinsDeMarche': itiMoinsMarche != undefined ? itiMoinsMarche : ''
    });
  };
}(jQuery));
;
/**
 * Complete tagManager with itinerary information.
 * Required:
 * - jQuery
 * Usage:
 *  Call the function on react.
 */
(function ($) {
  $.fn.resultPartnerItinerary = function (partnerString) {
    if (partnerString) {
      dataLayer.push({
        'sncfItineraireMIV_sourceDonnees': partnerString
      });
    }
  };
}(jQuery));
;
/**
 * Complete tagManager with itinerary information.
 * Required:
 * - jQuery
 * Usage:
 *  Call the function on react.
 */ 
(function ($) {
  $.fn.resultMapBoolItinerary = function (isMapDisplay) {
    dataLayer.push({
      'sncfItineraireMIV_cartographie': isMapDisplay
    });
  };
}(jQuery));
;
/**
 * gtmClic for mode Transport changes.
 * modeTransport : transport mode, exemple : "tram", "bus", "metro", "voiture", "train" or "velo"
 * modeState : if the mode is enable or not : true or false (boolean)
 * Required:
 * - jQuery
 * Usage:
 *  Call the function on react.
 */
(function ($) {
  $.fn.modeTransportGTM = function (modeTransport, modeState) {
    dataLayer.push({
      'event': 'gtmClic',
      'niveau_1': 'module informations voyageurs - resultats',
      'niveau_2': 'itineraire',
      'niveau_3': modeTransport,
      'niveau_4': modeState ? 'oui' : 'non'
    });
  };
}(jQuery));
;
/**
 * gtmClic for itinerary search.
 * Required:
 * - jQuery
 * Usage:
 *  Call the function on react.
 */
(function ($) {
  $.fn.submitSearchGTM = function (sendItinerarySearchTime, timeSearchDifference) {
    dataLayer.push({
      'event': 'gtmClic',
      'niveau_1': 'itineraire - recherche',
      'niveau_2': sendItinerarySearchTime,
      'niveau_3': timeSearchDifference
    });
  };
}(jQuery));
;
/**
 * gtmClic for download link.
 * fileName : name of file, example "cp_info_trafic_v1_9_juin_1.pdf"
 * fileUrl : url of file, example "https://www.sncf.com/ressources/cp_info_trafic_v1_9_juin_1.pdf'
 * Required:
 * - jQuery
 * Usage:
 *  Call the function on react.
 */
(function ($) {
  $.fn.downloadLinkGTM = function (fileName, fileUrl) {
    dataLayer.push({
      'event': 'gtmClic',
      'niveau_1': 'telechargements',
      'niveau_2': fileName,
      'niveau_3': fileUrl
    });
  };
}(jQuery));
;
/**
 * Error Catch.
 */
(function ($) {
  $.fn.errorCatch = function (fluxName, errorCode) {
    dataLayer.push({
      'event': 'gtmErreur',
      'niveau_1': 'erreur technique',
      'niveau_2': fluxName,
      'niveau_3': errorCode
    });
  };
}(jQuery));
;
/**
 * Complete tagManager with breadcrumb react.
 * Required:
 * - jQuery
 * Usage:
 *  Call the function on react.
 */
(function ($) {
  $.fn.breadcrumbReact = function (breadcrumbArray) {
    if (breadcrumbArray) {
      dataLayer.push({
        // Variable de pages.
        "sncfGlobal_pageCat1": breadcrumbArray['firstElement'] != undefined ? breadcrumbArray['firstElement'] : '',
        "sncfGlobal_pageCat2": breadcrumbArray['secondElement'] != undefined ? breadcrumbArray['secondElement'] : '',
        "sncfGlobal_pageCat3": breadcrumbArray['thirdElement'] != undefined ? breadcrumbArray['thirdElement'] : ''
      });
    }
  };
}(jQuery));
;
/**
 *
 * Export location
 *
 * Required:
 * - jQuery
 *
 * Usage:
 *  Call the function on react.
 *
 */
(function ($) {
$.fn.locationItinerary = function (departureX, departureY, arrivalX, arrivalY) {
  dataLayer.push({
    'event': 'gtmClic',
    'niveau_1': 'module informations voyageurs',
    'niveau_2': 'itineraire',
    'niveau_3': departureX + ',' + departureY,
    'niveau_4': arrivalX + ',' + arrivalY
  });
};
}(jQuery));
;
/**
 *
 * Export title, packshot and bloc (à découvrir) for react search page
 *
 * Required:
 * - jQuery
 *
 * Usage:
 *  Call the function on react.
 *
 */
(function ($) {
  $.fn.export = function (pageBaseUrl, ln) {
    $.ajax({
      url: '/'+ln+'/portailiv/ajax-export?page=' + pageBaseUrl,
      success: function (result) {

        // Change header and "A découvrir".
        $("#react-miv-title").html(result.header_title);
        $("#react-miv-packshot").attr('src', result.header_packshot);
        $("#react-miv-carousel").html(result.a_decouvrir);
        if ($.fn.initEditoCaroussel) {
          $('.edito-caroussel-slider').initEditoCaroussel();
        }
        // Change breadcrumb.
        $("#page-breadcrumb ul li:last-child strong").html(result.breadcrumb);
        $(window).trigger('resizePageBreadcrumb');
        if ($("#page-breadcrumb ul li:last-child strong").attr('title') !== $("#page-breadcrumb ul li:last-child strong").text()) {
          $("#page-breadcrumb ul li:last-child strong").attr('title', $("#page-breadcrumb ul li:last-child strong").text())
        }
      },
      error: function (xhr, status) {
        console.log('error');
      }
    });
  };
}(jQuery));
;
/**
 * @file
 * Initialise the styleguide accessibility.
 */


(function ($, Drupal, drupalSettings, window) {

  'use strict';

  var accessibility_settings = ((drupalSettings || {}).sncfcom || {}).accessibility;
  if (accessibility_settings && $.fn.accessibility) {
    $('.block-btn-accessibility').accessibility(accessibility_settings);
  }

})(jQuery, Drupal, drupalSettings, this);
;
/**
 * @file
 * Adding a cookie for the user so the white page (which appear on crisis time)
 *     appear only once. (or everytime if it's set to permanent redirection)
 *
 * @author : Corentin Fraysse - Capgemini
 */
(function ($, Drupal, drupalSettings, window) {

  /**
   * Set a cookie.
   *
   * @param cname : String The cookie's name.
   * @param cvalue :  String cookie's value.
   * @param exdays : String The cookie's expiration date.
   */
  function setCookie(cname, cvalue, exdays) {
    var date = new Date();
    date.setTime(date.getTime() + (exdays * 24 * 60 * 60 * 1000));
    var expires = "expires=" + date.toUTCString();
    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
  }

  /**
   * Get a cookie by its name.
   *
   * @param cookieName : The cookie's name.
   * @returns {string} : Return the cookie's value.
   */
  function getCookie(cookieName) {
    var name = cookieName + "=";
    var allCookies = document.cookie.split(';');
    for (var i = 0; i < allCookies.length; i++) {
      var cookie = allCookies[i];
      while (cookie.charAt(0) == ' ') {
        cookie = cookie.substring(1);
      }
      if (cookie.indexOf(name) == 0) {
        return cookie.substring(name.length, cookie.length);
      }
    }
    return "";
  }

  /**
   * Simple redirection function.
   * @param redirectPath : an URL containing the page to redirect to.
   * @param destination : an URL to redirect the user to when "access to the
   *     website" is clicked (if not permanent redirection).
   */
  function redirectMe(redirectPath, destination) {
    if (destination !== "") {
      window.location.href = redirectPath + "?destination=" + destination;
    }
    else {
      window.location.href = redirectPath;
    }
  }

  /**
   * If a white page is published this function manage the redirection (with
   * "redirectMe") to this white page.
   */
  function checkWhitePage() {

    // Get user id
    var userId = drupalSettings.user.uid;

    // First we check if the user is anonymous AND not trying to
    // login via the login page (otherwise no user could connect with a
    // permanent redirection).

    if (userId === 0 && (window.location.pathname.search("user/login") === -1)) {

      // is there published white page.
      var isThere1PublishedWhitePage = drupalSettings.whitePage.isThere1PublishedWhitePage;

      // Get the node's url.
      var nodeUrl = drupalSettings.whitePage.nodeUrl;

      // Get the destination url from preview request
      var reqUri = (drupalSettings.whitePage.reqUri ? drupalSettings.whitePage.reqUri : "");

      var _IN_PROGRESS = "in_progress";
      var _SUCCESS = "success";
      var _FAILURE = "failure";
      var timestampNow = new Date().getTime();

      if (isThere1PublishedWhitePage) {

        // Getting local information to know it there are any.
        var whitePageCookie = getCookie("sncf_is_white_page_visited");
        var localStorageWhitePageToken = localStorage.getItem('sncf_last_time_white_page_was_visited');
        var localStorageRedirectionToWhitePage = localStorage.getItem('sncf_redirection_to_white_page');

        if (nodeUrl && window.location.pathname === nodeUrl) {
          // - There is a published white page, the node's url is set and the
          // current path is the same as the node url. so we are on the white
          // page.
          // - Checking localStorageRedirectionToWhitePage to avoid
          // infinite redirection.

          // The redirection is a success.
          localStorage.setItem('sncf_redirection_to_white_page', _SUCCESS);

          localStorage.setItem('sncf_last_time_white_page_was_visited', new Date().getTime().toString());
          setCookie("sncf_is_white_page_visited", 1, 0.5);

        }
        else {
          // If the redirection is ALREADY in progress, we may have a loop
          // (cache issue for example...) so we stop there...
          if (localStorageRedirectionToWhitePage === _IN_PROGRESS) {
            localStorage.setItem('sncf_redirection_to_white_page', _FAILURE);
            throw "ERROR : Looping redirection in 'checkWhitePage' !";
          }
          else {
            if (!whitePageCookie || !localStorageWhitePageToken) {
              // REDIRECT : NOT on white page && NOT IN_PROGRESS  && NO cookie
              // && NO localStorage.token.

              // ========= redirection : =================
              localStorage.setItem('sncf_redirection_to_white_page', _IN_PROGRESS);
              redirectMe(nodeUrl, reqUri);
              // -------------------------

            }// Check local storage, we may be in private mode which mean : no
             // cookie.
            else if (localStorageWhitePageToken) {

              // We calculate if the localStorage is expired.
              var lastTimeWhitePageVisited = (localStorageWhitePageToken ? localStorageWhitePageToken : timestampNow);
              var lifetime = 43200000; // 12 hours.
              var isWhitePageVisitedTokenExpired = timestampNow - lastTimeWhitePageVisited >= lifetime;

              if (isWhitePageVisitedTokenExpired) {
                // The localStorage is set but seems to be expired, we
                // redirect to display again the white page.
                if (nodeUrl && window.location.pathname !== nodeUrl) {
                  // REDIRECT : NOT on white page && NOT IN_PROGRESS && IS
                  // localStorage.token && IS token expired && NOT on white
                  // page.
                  localStorage.setItem('sncf_redirection_to_white_page', _IN_PROGRESS);
                  redirectMe(nodeUrl, reqUri);
                }
              }
            }
          }

        }
      }
    }
  }

  /**
   * Using a try/catch to avoid looping infinite redirection that could happen
   * with some cache problems (like the cache_view problem...).
   */
  try {
    checkWhitePage();
  }
  catch (e) {
    console.log(e);
  }

})(jQuery, Drupal, drupalSettings, this);;
